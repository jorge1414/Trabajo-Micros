
TrabajoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a27c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d0  0800a410  0800a410  0001a410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4e0  0800b4e0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4e0  0800b4e0  0001b4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4e8  0800b4e8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4e8  0800b4e8  0001b4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4ec  0800b4ec  0001b4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b4f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001e8  0800b6d8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  0800b6d8  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f84a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f84  00000000  00000000  0002fa62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d90  00000000  00000000  000319e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  00032778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002195b  00000000  00000000  00033438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa2b  00000000  00000000  00054d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cadfd  00000000  00000000  0005f7be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a5bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004828  00000000  00000000  0012a638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3f4 	.word	0x0800a3f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a3f4 	.word	0x0800a3f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	829a      	strh	r2, [r3, #20]
	uint16_t Callib_Start = 0xAA;
 8000f9e:	23aa      	movs	r3, #170	; 0xaa
 8000fa0:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fa2:	8afa      	ldrh	r2, [r7, #22]
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2316      	movs	r3, #22
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	463b      	mov	r3, r7
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	21ee      	movs	r1, #238	; 0xee
 8000fb6:	4836      	ldr	r0, [pc, #216]	; (8001090 <read_calliberation_data+0x108>)
 8000fb8:	f002 fcb0 	bl	800391c <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fbc:	783b      	ldrb	r3, [r7, #0]
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	b21a      	sxth	r2, r3
 8000fc2:	787b      	ldrb	r3, [r7, #1]
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <read_calliberation_data+0x10c>)
 8000fcc:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fce:	78bb      	ldrb	r3, [r7, #2]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <read_calliberation_data+0x110>)
 8000fde:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fe0:	793b      	ldrb	r3, [r7, #4]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	797b      	ldrb	r3, [r7, #5]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21a      	sxth	r2, r3
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <read_calliberation_data+0x114>)
 8000ff0:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <read_calliberation_data+0x118>)
 8001004:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001006:	7a3b      	ldrb	r3, [r7, #8]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	7a7b      	ldrb	r3, [r7, #9]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21b      	sxth	r3, r3
 8001014:	b29a      	uxth	r2, r3
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <read_calliberation_data+0x11c>)
 8001018:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 800101a:	7abb      	ldrb	r3, [r7, #10]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <read_calliberation_data+0x120>)
 800102c:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21a      	sxth	r2, r3
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <read_calliberation_data+0x124>)
 800103e:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <read_calliberation_data+0x128>)
 8001050:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001052:	7c3b      	ldrb	r3, [r7, #16]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	7c7b      	ldrb	r3, [r7, #17]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <read_calliberation_data+0x12c>)
 8001062:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001064:	7cbb      	ldrb	r3, [r7, #18]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	7cfb      	ldrb	r3, [r7, #19]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <read_calliberation_data+0x130>)
 8001074:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001076:	7d3b      	ldrb	r3, [r7, #20]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	7d7b      	ldrb	r3, [r7, #21]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21a      	sxth	r2, r3
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <read_calliberation_data+0x134>)
 8001086:	801a      	strh	r2, [r3, #0]

}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200006cc 	.word	0x200006cc
 8001094:	20000204 	.word	0x20000204
 8001098:	20000206 	.word	0x20000206
 800109c:	20000208 	.word	0x20000208
 80010a0:	2000020a 	.word	0x2000020a
 80010a4:	2000020c 	.word	0x2000020c
 80010a8:	2000020e 	.word	0x2000020e
 80010ac:	20000210 	.word	0x20000210
 80010b0:	20000212 	.word	0x20000212
 80010b4:	20000214 	.word	0x20000214
 80010b8:	20000216 	.word	0x20000216
 80010bc:	20000218 	.word	0x20000218

080010c0 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010c6:	232e      	movs	r3, #46	; 0x2e
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010ca:	2300      	movs	r3, #0
 80010cc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	22f4      	movs	r2, #244	; 0xf4
 80010e0:	21ee      	movs	r1, #238	; 0xee
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <Get_UTemp+0x60>)
 80010e4:	f002 fb20 	bl	8003728 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80010e8:	2005      	movs	r0, #5
 80010ea:	f001 fdcf 	bl	8002c8c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2302      	movs	r3, #2
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	22f6      	movs	r2, #246	; 0xf6
 8001100:	21ee      	movs	r1, #238	; 0xee
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <Get_UTemp+0x60>)
 8001104:	f002 fc0a 	bl	800391c <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	b29b      	uxth	r3, r3
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b29a      	uxth	r2, r3
 8001110:	797b      	ldrb	r3, [r7, #5]
 8001112:	b29b      	uxth	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b29b      	uxth	r3, r3
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200006cc 	.word	0x200006cc

08001124 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001128:	f7ff ffca 	bl	80010c0 <Get_UTemp>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b3e      	ldr	r3, [pc, #248]	; (800122c <BMP180_GetTemp+0x108>)
 8001132:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <BMP180_GetTemp+0x108>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <BMP180_GetTemp+0x10c>)
 800113a:	8812      	ldrh	r2, [r2, #0]
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9f0 	bl	8000524 <__aeabi_i2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <BMP180_GetTemp+0x110>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f9e9 	bl	8000524 <__aeabi_i2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <BMP180_GetTemp+0x114>)
 8001158:	f7ff fb78 	bl	800084c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff fa48 	bl	80005f8 <__aeabi_dmul>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	4618      	mov	r0, r3
 800116e:	4621      	mov	r1, r4
 8001170:	f7ff fcf2 	bl	8000b58 <__aeabi_d2iz>
 8001174:	4602      	mov	r2, r0
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <BMP180_GetTemp+0x118>)
 8001178:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <BMP180_GetTemp+0x11c>)
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9cf 	bl	8000524 <__aeabi_i2d>
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <BMP180_GetTemp+0x120>)
 800118c:	f7ff fa34 	bl	80005f8 <__aeabi_dmul>
 8001190:	4603      	mov	r3, r0
 8001192:	460c      	mov	r4, r1
 8001194:	4625      	mov	r5, r4
 8001196:	461c      	mov	r4, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <BMP180_GetTemp+0x124>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	461a      	mov	r2, r3
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <BMP180_GetTemp+0x118>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9bc 	bl	8000524 <__aeabi_i2d>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4620      	mov	r0, r4
 80011b2:	4629      	mov	r1, r5
 80011b4:	f7ff fb4a 	bl	800084c <__aeabi_ddiv>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	4618      	mov	r0, r3
 80011be:	4621      	mov	r1, r4
 80011c0:	f7ff fcca 	bl	8000b58 <__aeabi_d2iz>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <BMP180_GetTemp+0x128>)
 80011c8:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <BMP180_GetTemp+0x118>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <BMP180_GetTemp+0x128>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <BMP180_GetTemp+0x12c>)
 80011d6:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <BMP180_GetTemp+0x12c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3308      	adds	r3, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a0 	bl	8000524 <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <BMP180_GetTemp+0x130>)
 80011ea:	f7ff fb2f 	bl	800084c <__aeabi_ddiv>
 80011ee:	4603      	mov	r3, r0
 80011f0:	460c      	mov	r4, r1
 80011f2:	4618      	mov	r0, r3
 80011f4:	4621      	mov	r1, r4
 80011f6:	f7ff fcaf 	bl	8000b58 <__aeabi_d2iz>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <BMP180_GetTemp+0x134>)
 80011fe:	601a      	str	r2, [r3, #0]
	return Temp/10.0;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <BMP180_GetTemp+0x134>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f98d 	bl	8000524 <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <BMP180_GetTemp+0x138>)
 8001210:	f7ff fb1c 	bl	800084c <__aeabi_ddiv>
 8001214:	4603      	mov	r3, r0
 8001216:	460c      	mov	r4, r1
 8001218:	4618      	mov	r0, r3
 800121a:	4621      	mov	r1, r4
 800121c:	f7ff fce4 	bl	8000be8 <__aeabi_d2f>
 8001220:	4603      	mov	r3, r0
 8001222:	ee07 3a90 	vmov	s15, r3
}
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	2000021c 	.word	0x2000021c
 8001230:	2000020e 	.word	0x2000020e
 8001234:	2000020c 	.word	0x2000020c
 8001238:	40e00000 	.word	0x40e00000
 800123c:	20000224 	.word	0x20000224
 8001240:	20000216 	.word	0x20000216
 8001244:	40a00000 	.word	0x40a00000
 8001248:	20000218 	.word	0x20000218
 800124c:	20000228 	.word	0x20000228
 8001250:	20000234 	.word	0x20000234
 8001254:	40300000 	.word	0x40300000
 8001258:	20000248 	.word	0x20000248
 800125c:	40240000 	.word	0x40240000

08001260 <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3334      	adds	r3, #52	; 0x34
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2100      	movs	r1, #0
 800127c:	460a      	mov	r2, r1
 800127e:	801a      	strh	r2, [r3, #0]
 8001280:	460a      	mov	r2, r1
 8001282:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2301      	movs	r3, #1
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	f107 030f 	add.w	r3, r7, #15
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	22f4      	movs	r2, #244	; 0xf4
 8001298:	21ee      	movs	r1, #238	; 0xee
 800129a:	481f      	ldr	r0, [pc, #124]	; (8001318 <Get_UPress+0xb8>)
 800129c:	f002 fa44 	bl	8003728 <HAL_I2C_Mem_Write>
	switch (oss)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d81a      	bhi.n	80012dc <Get_UPress+0x7c>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <Get_UPress+0x4c>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	080012c5 	.word	0x080012c5
 80012b4:	080012cd 	.word	0x080012cd
 80012b8:	080012d5 	.word	0x080012d5
	{
		case (0):
			HAL_Delay (5);
 80012bc:	2005      	movs	r0, #5
 80012be:	f001 fce5 	bl	8002c8c <HAL_Delay>
			break;
 80012c2:	e00b      	b.n	80012dc <Get_UPress+0x7c>
		case (1):
			HAL_Delay (8);
 80012c4:	2008      	movs	r0, #8
 80012c6:	f001 fce1 	bl	8002c8c <HAL_Delay>
			break;
 80012ca:	e007      	b.n	80012dc <Get_UPress+0x7c>
		case (2):
			HAL_Delay (14);
 80012cc:	200e      	movs	r0, #14
 80012ce:	f001 fcdd 	bl	8002c8c <HAL_Delay>
			break;
 80012d2:	e003      	b.n	80012dc <Get_UPress+0x7c>
		case (3):
			HAL_Delay (26);
 80012d4:	201a      	movs	r0, #26
 80012d6:	f001 fcd9 	bl	8002c8c <HAL_Delay>
			break;
 80012da:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 80012dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2303      	movs	r3, #3
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	22f6      	movs	r2, #246	; 0xf6
 80012f0:	21ee      	movs	r1, #238	; 0xee
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <Get_UPress+0xb8>)
 80012f4:	f002 fb12 	bl	800391c <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80012f8:	7b3b      	ldrb	r3, [r7, #12]
 80012fa:	041a      	lsls	r2, r3, #16
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	4413      	add	r3, r2
 8001302:	7bba      	ldrb	r2, [r7, #14]
 8001304:	441a      	add	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f1c3 0308 	rsb	r3, r3, #8
 800130c:	fa42 f303 	asr.w	r3, r2, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200006cc 	.word	0x200006cc

0800131c <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff9b 	bl	8001260 <Get_UPress>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4ba8      	ldr	r3, [pc, #672]	; (80015d0 <BMP180_GetPress+0x2b4>)
 8001330:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001332:	4ba8      	ldr	r3, [pc, #672]	; (80015d4 <BMP180_GetPress+0x2b8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4aa8      	ldr	r2, [pc, #672]	; (80015d8 <BMP180_GetPress+0x2bc>)
 8001338:	8812      	ldrh	r2, [r2, #0]
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8f1 	bl	8000524 <__aeabi_i2d>
 8001342:	4604      	mov	r4, r0
 8001344:	460d      	mov	r5, r1
 8001346:	4ba5      	ldr	r3, [pc, #660]	; (80015dc <BMP180_GetPress+0x2c0>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8ea 	bl	8000524 <__aeabi_i2d>
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4ba2      	ldr	r3, [pc, #648]	; (80015e0 <BMP180_GetPress+0x2c4>)
 8001356:	f7ff fa79 	bl	800084c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4620      	mov	r0, r4
 8001360:	4629      	mov	r1, r5
 8001362:	f7ff f949 	bl	80005f8 <__aeabi_dmul>
 8001366:	4603      	mov	r3, r0
 8001368:	460c      	mov	r4, r1
 800136a:	4618      	mov	r0, r3
 800136c:	4621      	mov	r1, r4
 800136e:	f7ff fbf3 	bl	8000b58 <__aeabi_d2iz>
 8001372:	4602      	mov	r2, r0
 8001374:	4b9b      	ldr	r3, [pc, #620]	; (80015e4 <BMP180_GetPress+0x2c8>)
 8001376:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001378:	4b9b      	ldr	r3, [pc, #620]	; (80015e8 <BMP180_GetPress+0x2cc>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8d0 	bl	8000524 <__aeabi_i2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b98      	ldr	r3, [pc, #608]	; (80015ec <BMP180_GetPress+0x2d0>)
 800138a:	f7ff f935 	bl	80005f8 <__aeabi_dmul>
 800138e:	4603      	mov	r3, r0
 8001390:	460c      	mov	r4, r1
 8001392:	4625      	mov	r5, r4
 8001394:	461c      	mov	r4, r3
 8001396:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <BMP180_GetPress+0x2d4>)
 8001398:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139c:	461a      	mov	r2, r3
 800139e:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <BMP180_GetPress+0x2c8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8bd 	bl	8000524 <__aeabi_i2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4620      	mov	r0, r4
 80013b0:	4629      	mov	r1, r5
 80013b2:	f7ff fa4b 	bl	800084c <__aeabi_ddiv>
 80013b6:	4603      	mov	r3, r0
 80013b8:	460c      	mov	r4, r1
 80013ba:	4618      	mov	r0, r3
 80013bc:	4621      	mov	r1, r4
 80013be:	f7ff fbcb 	bl	8000b58 <__aeabi_d2iz>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b8b      	ldr	r3, [pc, #556]	; (80015f4 <BMP180_GetPress+0x2d8>)
 80013c6:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 80013c8:	4b86      	ldr	r3, [pc, #536]	; (80015e4 <BMP180_GetPress+0x2c8>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <BMP180_GetPress+0x2d8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a89      	ldr	r2, [pc, #548]	; (80015f8 <BMP180_GetPress+0x2dc>)
 80013d4:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <BMP180_GetPress+0x2dc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80013de:	4a87      	ldr	r2, [pc, #540]	; (80015fc <BMP180_GetPress+0x2e0>)
 80013e0:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80013e2:	4b87      	ldr	r3, [pc, #540]	; (8001600 <BMP180_GetPress+0x2e4>)
 80013e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f89b 	bl	8000524 <__aeabi_i2d>
 80013ee:	4604      	mov	r4, r0
 80013f0:	460d      	mov	r5, r1
 80013f2:	4b82      	ldr	r3, [pc, #520]	; (80015fc <BMP180_GetPress+0x2e0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a81      	ldr	r2, [pc, #516]	; (80015fc <BMP180_GetPress+0x2e0>)
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f890 	bl	8000524 <__aeabi_i2d>
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b7e      	ldr	r3, [pc, #504]	; (8001604 <BMP180_GetPress+0x2e8>)
 800140a:	f7ff fa1f 	bl	800084c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7ff f8ef 	bl	80005f8 <__aeabi_dmul>
 800141a:	4603      	mov	r3, r0
 800141c:	460c      	mov	r4, r1
 800141e:	4618      	mov	r0, r3
 8001420:	4621      	mov	r1, r4
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b71      	ldr	r3, [pc, #452]	; (80015ec <BMP180_GetPress+0x2d0>)
 8001428:	f7ff fa10 	bl	800084c <__aeabi_ddiv>
 800142c:	4603      	mov	r3, r0
 800142e:	460c      	mov	r4, r1
 8001430:	4618      	mov	r0, r3
 8001432:	4621      	mov	r1, r4
 8001434:	f7ff fb90 	bl	8000b58 <__aeabi_d2iz>
 8001438:	4602      	mov	r2, r0
 800143a:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <BMP180_GetPress+0x2c8>)
 800143c:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 800143e:	4b72      	ldr	r3, [pc, #456]	; (8001608 <BMP180_GetPress+0x2ec>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	461a      	mov	r2, r3
 8001446:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <BMP180_GetPress+0x2e0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fb03 f302 	mul.w	r3, r3, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f868 	bl	8000524 <__aeabi_i2d>
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	4b64      	ldr	r3, [pc, #400]	; (80015ec <BMP180_GetPress+0x2d0>)
 800145a:	f7ff f9f7 	bl	800084c <__aeabi_ddiv>
 800145e:	4603      	mov	r3, r0
 8001460:	460c      	mov	r4, r1
 8001462:	4618      	mov	r0, r3
 8001464:	4621      	mov	r1, r4
 8001466:	f7ff fb77 	bl	8000b58 <__aeabi_d2iz>
 800146a:	4602      	mov	r2, r0
 800146c:	4b61      	ldr	r3, [pc, #388]	; (80015f4 <BMP180_GetPress+0x2d8>)
 800146e:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8001470:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <BMP180_GetPress+0x2c8>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <BMP180_GetPress+0x2d8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4413      	add	r3, r2
 800147a:	4a64      	ldr	r2, [pc, #400]	; (800160c <BMP180_GetPress+0x2f0>)
 800147c:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 800147e:	4b64      	ldr	r3, [pc, #400]	; (8001610 <BMP180_GetPress+0x2f4>)
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001484:	009a      	lsls	r2, r3, #2
 8001486:	4b61      	ldr	r3, [pc, #388]	; (800160c <BMP180_GetPress+0x2f0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	441a      	add	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	3302      	adds	r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	da00      	bge.n	800149a <BMP180_GetPress+0x17e>
 8001498:	3303      	adds	r3, #3
 800149a:	109b      	asrs	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <BMP180_GetPress+0x2f8>)
 80014a0:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <BMP180_GetPress+0x2fc>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b54      	ldr	r3, [pc, #336]	; (80015fc <BMP180_GetPress+0x2e0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fb03 f302 	mul.w	r3, r3, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f836 	bl	8000524 <__aeabi_i2d>
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b57      	ldr	r3, [pc, #348]	; (800161c <BMP180_GetPress+0x300>)
 80014be:	f7ff f9c5 	bl	800084c <__aeabi_ddiv>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4618      	mov	r0, r3
 80014c8:	4621      	mov	r1, r4
 80014ca:	f7ff fb45 	bl	8000b58 <__aeabi_d2iz>
 80014ce:	4602      	mov	r2, r0
 80014d0:	4b44      	ldr	r3, [pc, #272]	; (80015e4 <BMP180_GetPress+0x2c8>)
 80014d2:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80014d4:	4b52      	ldr	r3, [pc, #328]	; (8001620 <BMP180_GetPress+0x304>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f822 	bl	8000524 <__aeabi_i2d>
 80014e0:	4604      	mov	r4, r0
 80014e2:	460d      	mov	r5, r1
 80014e4:	4b45      	ldr	r3, [pc, #276]	; (80015fc <BMP180_GetPress+0x2e0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a44      	ldr	r2, [pc, #272]	; (80015fc <BMP180_GetPress+0x2e0>)
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f817 	bl	8000524 <__aeabi_i2d>
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b42      	ldr	r3, [pc, #264]	; (8001604 <BMP180_GetPress+0x2e8>)
 80014fc:	f7ff f9a6 	bl	800084c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4620      	mov	r0, r4
 8001506:	4629      	mov	r1, r5
 8001508:	f7ff f876 	bl	80005f8 <__aeabi_dmul>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	4618      	mov	r0, r3
 8001512:	4621      	mov	r1, r4
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <BMP180_GetPress+0x308>)
 800151a:	f7ff f997 	bl	800084c <__aeabi_ddiv>
 800151e:	4603      	mov	r3, r0
 8001520:	460c      	mov	r4, r1
 8001522:	4618      	mov	r0, r3
 8001524:	4621      	mov	r1, r4
 8001526:	f7ff fb17 	bl	8000b58 <__aeabi_d2iz>
 800152a:	4602      	mov	r2, r0
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <BMP180_GetPress+0x2d8>)
 800152e:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <BMP180_GetPress+0x2c8>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <BMP180_GetPress+0x2d8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4413      	add	r3, r2
 800153a:	3302      	adds	r3, #2
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff1 	bl	8000524 <__aeabi_i2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <BMP180_GetPress+0x30c>)
 8001548:	f7ff f980 	bl	800084c <__aeabi_ddiv>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	f7ff fb00 	bl	8000b58 <__aeabi_d2iz>
 8001558:	4602      	mov	r2, r0
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <BMP180_GetPress+0x2f0>)
 800155c:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <BMP180_GetPress+0x310>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <BMP180_GetPress+0x2f0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800156c:	fb03 f302 	mul.w	r3, r3, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffc7 	bl	8000504 <__aeabi_ui2d>
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <BMP180_GetPress+0x2c4>)
 800157c:	f7ff f966 	bl	800084c <__aeabi_ddiv>
 8001580:	4603      	mov	r3, r0
 8001582:	460c      	mov	r4, r1
 8001584:	4618      	mov	r0, r3
 8001586:	4621      	mov	r1, r4
 8001588:	f7ff fb0e 	bl	8000ba8 <__aeabi_d2uiz>
 800158c:	4602      	mov	r2, r0
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <BMP180_GetPress+0x314>)
 8001590:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <BMP180_GetPress+0x2b4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <BMP180_GetPress+0x2f8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	fa41 f202 	asr.w	r2, r1, r2
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <BMP180_GetPress+0x318>)
 80015ae:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <BMP180_GetPress+0x318>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	db41      	blt.n	800163c <BMP180_GetPress+0x320>
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <BMP180_GetPress+0x318>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	005a      	lsls	r2, r3, #1
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <BMP180_GetPress+0x314>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <BMP180_GetPress+0x31c>)
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	e040      	b.n	8001650 <BMP180_GetPress+0x334>
 80015ce:	bf00      	nop
 80015d0:	20000220 	.word	0x20000220
 80015d4:	2000021c 	.word	0x2000021c
 80015d8:	2000020e 	.word	0x2000020e
 80015dc:	2000020c 	.word	0x2000020c
 80015e0:	40e00000 	.word	0x40e00000
 80015e4:	20000224 	.word	0x20000224
 80015e8:	20000216 	.word	0x20000216
 80015ec:	40a00000 	.word	0x40a00000
 80015f0:	20000218 	.word	0x20000218
 80015f4:	20000228 	.word	0x20000228
 80015f8:	20000234 	.word	0x20000234
 80015fc:	2000023c 	.word	0x2000023c
 8001600:	20000212 	.word	0x20000212
 8001604:	40b00000 	.word	0x40b00000
 8001608:	20000206 	.word	0x20000206
 800160c:	2000022c 	.word	0x2000022c
 8001610:	20000204 	.word	0x20000204
 8001614:	20000230 	.word	0x20000230
 8001618:	20000208 	.word	0x20000208
 800161c:	40c00000 	.word	0x40c00000
 8001620:	20000210 	.word	0x20000210
 8001624:	40f00000 	.word	0x40f00000
 8001628:	40100000 	.word	0x40100000
 800162c:	2000020a 	.word	0x2000020a
 8001630:	20000238 	.word	0x20000238
 8001634:	20000240 	.word	0x20000240
 8001638:	20000244 	.word	0x20000244
	else Press = (B7/B4)*2;
 800163c:	4b46      	ldr	r3, [pc, #280]	; (8001758 <BMP180_GetPress+0x43c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <BMP180_GetPress+0x440>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	461a      	mov	r2, r3
 800164c:	4b44      	ldr	r3, [pc, #272]	; (8001760 <BMP180_GetPress+0x444>)
 800164e:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <BMP180_GetPress+0x444>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff65 	bl	8000524 <__aeabi_i2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <BMP180_GetPress+0x448>)
 8001660:	f7ff f8f4 	bl	800084c <__aeabi_ddiv>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4625      	mov	r5, r4
 800166a:	461c      	mov	r4, r3
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <BMP180_GetPress+0x444>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff57 	bl	8000524 <__aeabi_i2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b3a      	ldr	r3, [pc, #232]	; (8001764 <BMP180_GetPress+0x448>)
 800167c:	f7ff f8e6 	bl	800084c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe ffb6 	bl	80005f8 <__aeabi_dmul>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	4618      	mov	r0, r3
 8001692:	4621      	mov	r1, r4
 8001694:	f7ff fa60 	bl	8000b58 <__aeabi_d2iz>
 8001698:	4602      	mov	r2, r0
 800169a:	4b33      	ldr	r3, [pc, #204]	; (8001768 <BMP180_GetPress+0x44c>)
 800169c:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <BMP180_GetPress+0x44c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f640 32de 	movw	r2, #3038	; 0xbde
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff3a 	bl	8000524 <__aeabi_i2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <BMP180_GetPress+0x450>)
 80016b6:	f7ff f8c9 	bl	800084c <__aeabi_ddiv>
 80016ba:	4603      	mov	r3, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	4618      	mov	r0, r3
 80016c0:	4621      	mov	r1, r4
 80016c2:	f7ff fa49 	bl	8000b58 <__aeabi_d2iz>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <BMP180_GetPress+0x44c>)
 80016ca:	601a      	str	r2, [r3, #0]
	X2 = (-7357*Press)/(pow(2,16));
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <BMP180_GetPress+0x444>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <BMP180_GetPress+0x454>)
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff24 	bl	8000524 <__aeabi_i2d>
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <BMP180_GetPress+0x450>)
 80016e2:	f7ff f8b3 	bl	800084c <__aeabi_ddiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	f7ff fa33 	bl	8000b58 <__aeabi_d2iz>
 80016f2:	4602      	mov	r2, r0
 80016f4:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <BMP180_GetPress+0x458>)
 80016f6:	601a      	str	r2, [r3, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <BMP180_GetPress+0x444>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff11 	bl	8000524 <__aeabi_i2d>
 8001702:	4604      	mov	r4, r0
 8001704:	460d      	mov	r5, r1
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <BMP180_GetPress+0x44c>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <BMP180_GetPress+0x458>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff05 	bl	8000524 <__aeabi_i2d>
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <BMP180_GetPress+0x45c>)
 8001720:	f7ff f894 	bl	800084c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7fe fdae 	bl	800028c <__adddf3>
 8001730:	4603      	mov	r3, r0
 8001732:	460c      	mov	r4, r1
 8001734:	4618      	mov	r0, r3
 8001736:	4621      	mov	r1, r4
 8001738:	f7ff fa0e 	bl	8000b58 <__aeabi_d2iz>
 800173c:	4602      	mov	r2, r0
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <BMP180_GetPress+0x444>)
 8001740:	601a      	str	r2, [r3, #0]

	return Press;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <BMP180_GetPress+0x444>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800174e:	eeb0 0a67 	vmov.f32	s0, s15
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bdb0      	pop	{r4, r5, r7, pc}
 8001758:	20000240 	.word	0x20000240
 800175c:	20000238 	.word	0x20000238
 8001760:	20000244 	.word	0x20000244
 8001764:	40700000 	.word	0x40700000
 8001768:	20000224 	.word	0x20000224
 800176c:	40f00000 	.word	0x40f00000
 8001770:	ffffe343 	.word	0xffffe343
 8001774:	20000228 	.word	0x20000228
 8001778:	40300000 	.word	0x40300000
 800177c:	00000000 	.word	0x00000000

08001780 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fdc7 	bl	800131c <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <BMP180_GetAlt+0x90>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001814 <BMP180_GetAlt+0x94>
 800179e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017a2:	ee16 0a90 	vmov	r0, s13
 80017a6:	f7fe fecf 	bl	8000548 <__aeabi_f2d>
 80017aa:	4603      	mov	r3, r0
 80017ac:	460c      	mov	r4, r1
 80017ae:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8001800 <BMP180_GetAlt+0x80>
 80017b2:	ec44 3b10 	vmov	d0, r3, r4
 80017b6:	f007 fdc5 	bl	8009344 <pow>
 80017ba:	ec54 3b10 	vmov	r3, r4, d0
 80017be:	461a      	mov	r2, r3
 80017c0:	4623      	mov	r3, r4
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	4914      	ldr	r1, [pc, #80]	; (8001818 <BMP180_GetAlt+0x98>)
 80017c8:	f7fe fd5e 	bl	8000288 <__aeabi_dsub>
 80017cc:	4603      	mov	r3, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	4618      	mov	r0, r3
 80017d2:	4621      	mov	r1, r4
 80017d4:	a30c      	add	r3, pc, #48	; (adr r3, 8001808 <BMP180_GetAlt+0x88>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	f7fe ff0d 	bl	80005f8 <__aeabi_dmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4618      	mov	r0, r3
 80017e4:	4621      	mov	r1, r4
 80017e6:	f7ff f9ff 	bl	8000be8 <__aeabi_d2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	ee07 3a90 	vmov	s15, r3
}
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	ccd745e4 	.word	0xccd745e4
 8001804:	3fc85b95 	.word	0x3fc85b95
 8001808:	00000000 	.word	0x00000000
 800180c:	40e5a540 	.word	0x40e5a540
 8001810:	20000244 	.word	0x20000244
 8001814:	47c5e680 	.word	0x47c5e680
 8001818:	3ff00000 	.word	0x3ff00000

0800181c <BMP180_Start>:

void BMP180_Start (void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	read_calliberation_data();
 8001820:	f7ff fbb2 	bl	8000f88 <read_calliberation_data>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_GPIO_EXTI_Callback>:

volatile int button_int=0;
volatile int presencia=0;
volatile int firsttime=0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_4){
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	2b10      	cmp	r3, #16
 8001836:	d110      	bne.n	800185a <HAL_GPIO_EXTI_Callback+0x32>
		presencia = 1;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_GPIO_EXTI_Callback+0x48>)
 800183a:	2201      	movs	r2, #1
 800183c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,1);
 800183e:	2201      	movs	r2, #1
 8001840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001844:	480b      	ldr	r0, [pc, #44]	; (8001874 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001846:	f001 fd07 	bl	8003258 <HAL_GPIO_WritePin>
		display_intruso();
 800184a:	f000 f8bf 	bl	80019cc <display_intruso>
		TIM4->CNT = 0;
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_GPIO_EXTI_Callback+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(&htim4);
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <HAL_GPIO_EXTI_Callback+0x54>)
 8001856:	f003 fc0c 	bl	8005072 <HAL_TIM_Base_Start_IT>
	}

	if (GPIO_Pin==GPIO_PIN_0){
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d102      	bne.n	8001866 <HAL_GPIO_EXTI_Callback+0x3e>
		button_int=1;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_GPIO_EXTI_Callback+0x58>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]
	}

}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000025c 	.word	0x2000025c
 8001874:	40020c00 	.word	0x40020c00
 8001878:	40000800 	.word	0x40000800
 800187c:	2000068c 	.word	0x2000068c
 8001880:	20000258 	.word	0x20000258

08001884 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

	if (htim == &htim4){
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d114      	bne.n	80018be <HAL_TIM_PeriodElapsedCallback+0x3a>

		if (firsttime==1){
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d10d      	bne.n	80018b8 <HAL_TIM_PeriodElapsedCallback+0x34>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,0);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018a4:	f001 fcd8 	bl	8003258 <HAL_GPIO_WritePin>
			presencia = 0;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
			display_titulo();
 80018ae:	f000 f863 	bl	8001978 <display_titulo>
			HAL_TIM_Base_Stop_IT(&htim4);
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80018b4:	f003 fc01 	bl	80050ba <HAL_TIM_Base_Stop_IT>
		}

		firsttime=1;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
	}
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000068c 	.word	0x2000068c
 80018cc:	20000260 	.word	0x20000260
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	2000025c 	.word	0x2000025c

080018d8 <debouncer>:

int debouncer(volatile int* button_int, GPIO_TypeDef* GPIO_port, uint16_t GPIO_number){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	4613      	mov	r3, r2
 80018e4:	80fb      	strh	r3, [r7, #6]
	static uint8_t button_count=0;
	static int counter=0;

	if (*button_int==1){
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d13b      	bne.n	8001966 <debouncer+0x8e>
		if (button_count==0) {
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <debouncer+0x98>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10b      	bne.n	800190e <debouncer+0x36>
			counter=HAL_GetTick();
 80018f6:	f001 f9bd 	bl	8002c74 <HAL_GetTick>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <debouncer+0x9c>)
 8001900:	601a      	str	r2, [r3, #0]
			button_count++;
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <debouncer+0x98>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <debouncer+0x98>)
 800190c:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick()-counter>=20){
 800190e:	f001 f9b1 	bl	8002c74 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <debouncer+0x9c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b13      	cmp	r3, #19
 800191c:	d923      	bls.n	8001966 <debouncer+0x8e>
			counter=HAL_GetTick();
 800191e:	f001 f9a9 	bl	8002c74 <HAL_GetTick>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <debouncer+0x9c>)
 8001928:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(GPIO_port, GPIO_number)!=1){
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4619      	mov	r1, r3
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f001 fc7a 	bl	8003228 <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b01      	cmp	r3, #1
 8001938:	d003      	beq.n	8001942 <debouncer+0x6a>
				button_count=1;
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <debouncer+0x98>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e005      	b.n	800194e <debouncer+0x76>
			}
			else{
				button_count++;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <debouncer+0x98>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <debouncer+0x98>)
 800194c:	701a      	strb	r2, [r3, #0]
			}
			if (button_count==4){ //Periodo antirebotes
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <debouncer+0x98>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b04      	cmp	r3, #4
 8001954:	d107      	bne.n	8001966 <debouncer+0x8e>
				button_count=0;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <debouncer+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
				*button_int=0;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
				return 1;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <debouncer+0x90>
			}
		}
	}
	return 0;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000264 	.word	0x20000264
 8001974:	20000268 	.word	0x20000268

08001978 <display_titulo>:

void display_titulo(void){
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 800197e:	f000 ff40 	bl	8002802 <SSD1306_Clear>
	SSD1306_DrawRectangle(0, 0, 128, 64, 1);
 8001982:	2301      	movs	r3, #1
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2340      	movs	r3, #64	; 0x40
 8001988:	2280      	movs	r2, #128	; 0x80
 800198a:	2100      	movs	r1, #0
 800198c:	2000      	movs	r0, #0
 800198e:	f000 fdfb 	bl	8002588 <SSD1306_DrawRectangle>
	SSD1306_GotoXY (27,15);
 8001992:	210f      	movs	r1, #15
 8001994:	201b      	movs	r0, #27
 8001996:	f000 fc41 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("MONITOR", &Font_11x18, 1);
 800199a:	2201      	movs	r2, #1
 800199c:	4908      	ldr	r1, [pc, #32]	; (80019c0 <display_titulo+0x48>)
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <display_titulo+0x4c>)
 80019a0:	f000 fcd2 	bl	8002348 <SSD1306_Puts>
	SSD1306_GotoXY (17, 35);
 80019a4:	2123      	movs	r1, #35	; 0x23
 80019a6:	2011      	movs	r0, #17
 80019a8:	f000 fc38 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("CLIMATICO", &Font_11x18, 1);
 80019ac:	2201      	movs	r2, #1
 80019ae:	4904      	ldr	r1, [pc, #16]	; (80019c0 <display_titulo+0x48>)
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <display_titulo+0x50>)
 80019b2:	f000 fcc9 	bl	8002348 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80019b6:	f000 fb8b 	bl	80020d0 <SSD1306_UpdateScreen>
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000000 	.word	0x20000000
 80019c4:	0800a410 	.word	0x0800a410
 80019c8:	0800a418 	.word	0x0800a418

080019cc <display_intruso>:

void display_intruso(void){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 80019d2:	f000 ff16 	bl	8002802 <SSD1306_Clear>
	SSD1306_DrawRectangle(0, 0, 128, 64, 1);
 80019d6:	2301      	movs	r3, #1
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2340      	movs	r3, #64	; 0x40
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	2100      	movs	r1, #0
 80019e0:	2000      	movs	r0, #0
 80019e2:	f000 fdd1 	bl	8002588 <SSD1306_DrawRectangle>
	SSD1306_DrawRectangle(5, 5, 118, 54, 1);
 80019e6:	2301      	movs	r3, #1
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2336      	movs	r3, #54	; 0x36
 80019ec:	2276      	movs	r2, #118	; 0x76
 80019ee:	2105      	movs	r1, #5
 80019f0:	2005      	movs	r0, #5
 80019f2:	f000 fdc9 	bl	8002588 <SSD1306_DrawRectangle>
	SSD1306_GotoXY (20,15);
 80019f6:	210f      	movs	r1, #15
 80019f8:	2014      	movs	r0, #20
 80019fa:	f000 fc0f 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("!INTRUSO!", &Font_11x18, 1);
 80019fe:	2201      	movs	r2, #1
 8001a00:	4908      	ldr	r1, [pc, #32]	; (8001a24 <display_intruso+0x58>)
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <display_intruso+0x5c>)
 8001a04:	f000 fca0 	bl	8002348 <SSD1306_Puts>
	SSD1306_GotoXY (30, 35);
 8001a08:	2123      	movs	r1, #35	; 0x23
 8001a0a:	201e      	movs	r0, #30
 8001a0c:	f000 fc06 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("CUIDADO", &Font_11x18, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	4904      	ldr	r1, [pc, #16]	; (8001a24 <display_intruso+0x58>)
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <display_intruso+0x60>)
 8001a16:	f000 fc97 	bl	8002348 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a1a:	f000 fb59 	bl	80020d0 <SSD1306_UpdateScreen>
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	0800a424 	.word	0x0800a424
 8001a2c:	0800a430 	.word	0x0800a430

08001a30 <get_info>:

void get_info (void){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	Temperatura = BMP180_GetTemp();
 8001a34:	f7ff fb76 	bl	8001124 <BMP180_GetTemp>
 8001a38:	eef0 7a40 	vmov.f32	s15, s0
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <get_info+0x38>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
	Presion = BMP180_GetPress (0);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff fc6a 	bl	800131c <BMP180_GetPress>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <get_info+0x3c>)
 8001a4e:	edc3 7a00 	vstr	s15, [r3]
	Altitud= BMP180_GetAlt(0);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fe94 	bl	8001780 <BMP180_GetAlt>
 8001a58:	eef0 7a40 	vmov.f32	s15, s0
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <get_info+0x40>)
 8001a5e:	edc3 7a00 	vstr	s15, [r3]
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000024c 	.word	0x2000024c
 8001a6c:	20000250 	.word	0x20000250
 8001a70:	20000254 	.word	0x20000254

08001a74 <display_info>:

void display_info (void){
 8001a74:	b598      	push	{r3, r4, r7, lr}
 8001a76:	af00      	add	r7, sp, #0

	get_info();
 8001a78:	f7ff ffda 	bl	8001a30 <get_info>

	SSD1306_Clear();
 8001a7c:	f000 fec1 	bl	8002802 <SSD1306_Clear>
	SSD1306_GotoXY (35,0);
 8001a80:	2100      	movs	r1, #0
 8001a82:	2023      	movs	r0, #35	; 0x23
 8001a84:	f000 fbca 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("BMP180", &Font_11x18, 1);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4952      	ldr	r1, [pc, #328]	; (8001bd4 <display_info+0x160>)
 8001a8c:	4852      	ldr	r0, [pc, #328]	; (8001bd8 <display_info+0x164>)
 8001a8e:	f000 fc5b 	bl	8002348 <SSD1306_Puts>
	SSD1306_GotoXY (0,0);
 8001a92:	2100      	movs	r1, #0
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 fbc1 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("Temperatura", &Font_11x18, 1);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	494d      	ldr	r1, [pc, #308]	; (8001bd4 <display_info+0x160>)
 8001a9e:	484f      	ldr	r0, [pc, #316]	; (8001bdc <display_info+0x168>)
 8001aa0:	f000 fc52 	bl	8002348 <SSD1306_Puts>
	SSD1306_GotoXY (20,40);
 8001aa4:	2128      	movs	r1, #40	; 0x28
 8001aa6:	2014      	movs	r0, #20
 8001aa8:	f000 fbb8 	bl	800221c <SSD1306_GotoXY>
	sprintf(Temperatura1, "%.2f", Temperatura);
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <display_info+0x16c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fd49 	bl	8000548 <__aeabi_f2d>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460c      	mov	r4, r1
 8001aba:	461a      	mov	r2, r3
 8001abc:	4623      	mov	r3, r4
 8001abe:	4949      	ldr	r1, [pc, #292]	; (8001be4 <display_info+0x170>)
 8001ac0:	4849      	ldr	r0, [pc, #292]	; (8001be8 <display_info+0x174>)
 8001ac2:	f004 fd4d 	bl	8006560 <siprintf>
	SSD1306_Puts(Temperatura1, &Font_11x18, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4942      	ldr	r1, [pc, #264]	; (8001bd4 <display_info+0x160>)
 8001aca:	4847      	ldr	r0, [pc, #284]	; (8001be8 <display_info+0x174>)
 8001acc:	f000 fc3c 	bl	8002348 <SSD1306_Puts>
	SSD1306_DrawCircle(80, 40, 2, 1);  //To print degree only
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	2128      	movs	r1, #40	; 0x28
 8001ad6:	2050      	movs	r0, #80	; 0x50
 8001ad8:	f000 fdc0 	bl	800265c <SSD1306_DrawCircle>
	SSD1306_GotoXY (85,40);  //To print celcius
 8001adc:	2128      	movs	r1, #40	; 0x28
 8001ade:	2055      	movs	r0, #85	; 0x55
 8001ae0:	f000 fb9c 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("C", &Font_11x18, 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	493b      	ldr	r1, [pc, #236]	; (8001bd4 <display_info+0x160>)
 8001ae8:	4840      	ldr	r0, [pc, #256]	; (8001bec <display_info+0x178>)
 8001aea:	f000 fc2d 	bl	8002348 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001aee:	f000 faef 	bl	80020d0 <SSD1306_UpdateScreen>

	HAL_Delay(2000);
 8001af2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001af6:	f001 f8c9 	bl	8002c8c <HAL_Delay>

	SSD1306_Clear();
 8001afa:	f000 fe82 	bl	8002802 <SSD1306_Clear>
	SSD1306_GotoXY (20,0);
 8001afe:	2100      	movs	r1, #0
 8001b00:	2014      	movs	r0, #20
 8001b02:	f000 fb8b 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("Presion", &Font_11x18, 1);
 8001b06:	2201      	movs	r2, #1
 8001b08:	4932      	ldr	r1, [pc, #200]	; (8001bd4 <display_info+0x160>)
 8001b0a:	4839      	ldr	r0, [pc, #228]	; (8001bf0 <display_info+0x17c>)
 8001b0c:	f000 fc1c 	bl	8002348 <SSD1306_Puts>
	SSD1306_GotoXY (10,40);
 8001b10:	2128      	movs	r1, #40	; 0x28
 8001b12:	200a      	movs	r0, #10
 8001b14:	f000 fb82 	bl	800221c <SSD1306_GotoXY>
	sprintf(Presion1, "%.2f", Presion);
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <display_info+0x180>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd13 	bl	8000548 <__aeabi_f2d>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	492e      	ldr	r1, [pc, #184]	; (8001be4 <display_info+0x170>)
 8001b2c:	4832      	ldr	r0, [pc, #200]	; (8001bf8 <display_info+0x184>)
 8001b2e:	f004 fd17 	bl	8006560 <siprintf>
	SSD1306_Puts(Presion1, &Font_11x18, 1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	4927      	ldr	r1, [pc, #156]	; (8001bd4 <display_info+0x160>)
 8001b36:	4830      	ldr	r0, [pc, #192]	; (8001bf8 <display_info+0x184>)
 8001b38:	f000 fc06 	bl	8002348 <SSD1306_Puts>
	SSD1306_GotoXY (100,40);
 8001b3c:	2128      	movs	r1, #40	; 0x28
 8001b3e:	2064      	movs	r0, #100	; 0x64
 8001b40:	f000 fb6c 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("pa", &Font_11x18, 1);
 8001b44:	2201      	movs	r2, #1
 8001b46:	4923      	ldr	r1, [pc, #140]	; (8001bd4 <display_info+0x160>)
 8001b48:	482c      	ldr	r0, [pc, #176]	; (8001bfc <display_info+0x188>)
 8001b4a:	f000 fbfd 	bl	8002348 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001b4e:	f000 fabf 	bl	80020d0 <SSD1306_UpdateScreen>

	HAL_Delay(2000);
 8001b52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b56:	f001 f899 	bl	8002c8c <HAL_Delay>

	SSD1306_Clear();
 8001b5a:	f000 fe52 	bl	8002802 <SSD1306_Clear>
	SSD1306_GotoXY (20,0);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2014      	movs	r0, #20
 8001b62:	f000 fb5b 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("Altitud", &Font_11x18, 1);
 8001b66:	2201      	movs	r2, #1
 8001b68:	491a      	ldr	r1, [pc, #104]	; (8001bd4 <display_info+0x160>)
 8001b6a:	4825      	ldr	r0, [pc, #148]	; (8001c00 <display_info+0x18c>)
 8001b6c:	f000 fbec 	bl	8002348 <SSD1306_Puts>
	SSD1306_GotoXY (15,40);
 8001b70:	2128      	movs	r1, #40	; 0x28
 8001b72:	200f      	movs	r0, #15
 8001b74:	f000 fb52 	bl	800221c <SSD1306_GotoXY>
	sprintf(Altitud1, "%.2f", Altitud);
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <display_info+0x190>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fce3 	bl	8000548 <__aeabi_f2d>
 8001b82:	4603      	mov	r3, r0
 8001b84:	460c      	mov	r4, r1
 8001b86:	461a      	mov	r2, r3
 8001b88:	4623      	mov	r3, r4
 8001b8a:	4916      	ldr	r1, [pc, #88]	; (8001be4 <display_info+0x170>)
 8001b8c:	481e      	ldr	r0, [pc, #120]	; (8001c08 <display_info+0x194>)
 8001b8e:	f004 fce7 	bl	8006560 <siprintf>
	SSD1306_Puts(Altitud1, &Font_11x18, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	490f      	ldr	r1, [pc, #60]	; (8001bd4 <display_info+0x160>)
 8001b96:	481c      	ldr	r0, [pc, #112]	; (8001c08 <display_info+0x194>)
 8001b98:	f000 fbd6 	bl	8002348 <SSD1306_Puts>
	SSD1306_GotoXY (90,40);
 8001b9c:	2128      	movs	r1, #40	; 0x28
 8001b9e:	205a      	movs	r0, #90	; 0x5a
 8001ba0:	f000 fb3c 	bl	800221c <SSD1306_GotoXY>
	SSD1306_Puts ("m", &Font_11x18, 1);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	490b      	ldr	r1, [pc, #44]	; (8001bd4 <display_info+0x160>)
 8001ba8:	4818      	ldr	r0, [pc, #96]	; (8001c0c <display_info+0x198>)
 8001baa:	f000 fbcd 	bl	8002348 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001bae:	f000 fa8f 	bl	80020d0 <SSD1306_UpdateScreen>

	HAL_Delay(2000);
 8001bb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bb6:	f001 f869 	bl	8002c8c <HAL_Delay>
	SSD1306_Clear();
 8001bba:	f000 fe22 	bl	8002802 <SSD1306_Clear>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <display_info+0x19c>)
 8001bc6:	f001 fb47 	bl	8003258 <HAL_GPIO_WritePin>

	display_titulo();
 8001bca:	f7ff fed5 	bl	8001978 <display_titulo>
}
 8001bce:	bf00      	nop
 8001bd0:	bd98      	pop	{r3, r4, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	0800a438 	.word	0x0800a438
 8001bdc:	0800a440 	.word	0x0800a440
 8001be0:	2000024c 	.word	0x2000024c
 8001be4:	0800a44c 	.word	0x0800a44c
 8001be8:	20000680 	.word	0x20000680
 8001bec:	0800a454 	.word	0x0800a454
 8001bf0:	0800a458 	.word	0x0800a458
 8001bf4:	20000250 	.word	0x20000250
 8001bf8:	20000720 	.word	0x20000720
 8001bfc:	0800a460 	.word	0x0800a460
 8001c00:	0800a464 	.word	0x0800a464
 8001c04:	20000254 	.word	0x20000254
 8001c08:	2000072c 	.word	0x2000072c
 8001c0c:	0800a46c 	.word	0x0800a46c
 8001c10:	40020c00 	.word	0x40020c00

08001c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c18:	f000 ffc6 	bl	8002ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1c:	f000 f82a 	bl	8001c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c20:	f000 f90e 	bl	8001e40 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001c24:	f000 f8be 	bl	8001da4 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001c28:	f000 f88e 	bl	8001d48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 8001c2c:	f000 f98c 	bl	8001f48 <SSD1306_Init>
  BMP180_Start();
 8001c30:	f7ff fdf4 	bl	800181c <BMP180_Start>
  display_titulo();
 8001c34:	f7ff fea0 	bl	8001978 <display_titulo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (debouncer(&button_int, GPIOA, GPIO_PIN_0)&&presencia==0){
 8001c38:	2201      	movs	r2, #1
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <main+0x50>)
 8001c3c:	480a      	ldr	r0, [pc, #40]	; (8001c68 <main+0x54>)
 8001c3e:	f7ff fe4b 	bl	80018d8 <debouncer>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f7      	beq.n	8001c38 <main+0x24>
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <main+0x58>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f3      	bne.n	8001c38 <main+0x24>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8001c50:	2201      	movs	r2, #1
 8001c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <main+0x5c>)
 8001c58:	f001 fafe 	bl	8003258 <HAL_GPIO_WritePin>
		  display_info();
 8001c5c:	f7ff ff0a 	bl	8001a74 <display_info>
	  if (debouncer(&button_int, GPIOA, GPIO_PIN_0)&&presencia==0){
 8001c60:	e7ea      	b.n	8001c38 <main+0x24>
 8001c62:	bf00      	nop
 8001c64:	40020000 	.word	0x40020000
 8001c68:	20000258 	.word	0x20000258
 8001c6c:	2000025c 	.word	0x2000025c
 8001c70:	40020c00 	.word	0x40020c00

08001c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b094      	sub	sp, #80	; 0x50
 8001c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7a:	f107 0320 	add.w	r3, r7, #32
 8001c7e:	2230      	movs	r2, #48	; 0x30
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fe20 	bl	80058c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <SystemClock_Config+0xcc>)
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	4a27      	ldr	r2, [pc, #156]	; (8001d40 <SystemClock_Config+0xcc>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <SystemClock_Config+0xcc>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <SystemClock_Config+0xd0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a21      	ldr	r2, [pc, #132]	; (8001d44 <SystemClock_Config+0xd0>)
 8001cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <SystemClock_Config+0xd0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cd8:	2310      	movs	r3, #16
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001ce8:	2340      	movs	r3, #64	; 0x40
 8001cea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cec:	2302      	movs	r3, #2
 8001cee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f002 fd41 	bl	8004780 <HAL_RCC_OscConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d04:	f000 f91c 	bl	8001f40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d08:	230f      	movs	r3, #15
 8001d0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001d1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	2102      	movs	r1, #2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 ff9a 	bl	8004c60 <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d32:	f000 f905 	bl	8001f40 <Error_Handler>
  }
}
 8001d36:	bf00      	nop
 8001d38:	3750      	adds	r7, #80	; 0x50
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40007000 	.word	0x40007000

08001d48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d4e:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <MX_I2C1_Init+0x54>)
 8001d50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <MX_I2C1_Init+0x58>)
 8001d56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d84:	4804      	ldr	r0, [pc, #16]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d86:	f001 fa99 	bl	80032bc <HAL_I2C_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d90:	f000 f8d6 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200006cc 	.word	0x200006cc
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	00061a80 	.word	0x00061a80

08001da4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	463b      	mov	r3, r7
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_TIM4_Init+0x94>)
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <MX_TIM4_Init+0x98>)
 8001dc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <MX_TIM4_Init+0x94>)
 8001dc8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001dcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_TIM4_Init+0x94>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_TIM4_Init+0x94>)
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_TIM4_Init+0x94>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_TIM4_Init+0x94>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001de8:	4813      	ldr	r0, [pc, #76]	; (8001e38 <MX_TIM4_Init+0x94>)
 8001dea:	f003 f917 	bl	800501c <HAL_TIM_Base_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001df4:	f000 f8a4 	bl	8001f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dfe:	f107 0308 	add.w	r3, r7, #8
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <MX_TIM4_Init+0x94>)
 8001e06:	f003 fa8b 	bl	8005320 <HAL_TIM_ConfigClockSource>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001e10:	f000 f896 	bl	8001f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_TIM4_Init+0x94>)
 8001e22:	f003 fc97 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e2c:	f000 f888 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	2000068c 	.word	0x2000068c
 8001e3c:	40000800 	.word	0x40000800

08001e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a2d      	ldr	r2, [pc, #180]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_GPIO_Init+0xf0>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001ecc:	4819      	ldr	r0, [pc, #100]	; (8001f34 <MX_GPIO_Init+0xf4>)
 8001ece:	f001 f9c3 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001ed2:	2311      	movs	r3, #17
 8001ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_GPIO_Init+0xf8>)
 8001ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4815      	ldr	r0, [pc, #84]	; (8001f3c <MX_GPIO_Init+0xfc>)
 8001ee6:	f001 f805 	bl	8002ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001eea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	480c      	ldr	r0, [pc, #48]	; (8001f34 <MX_GPIO_Init+0xf4>)
 8001f04:	f000 fff6 	bl	8002ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2006      	movs	r0, #6
 8001f0e:	f000 ffba 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f12:	2006      	movs	r0, #6
 8001f14:	f000 ffd3 	bl	8002ebe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	200a      	movs	r0, #10
 8001f1e:	f000 ffb2 	bl	8002e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f22:	200a      	movs	r0, #10
 8001f24:	f000 ffcb 	bl	8002ebe <HAL_NVIC_EnableIRQ>

}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	10110000 	.word	0x10110000
 8001f3c:	40020000 	.word	0x40020000

08001f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <Error_Handler+0x6>

08001f48 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001f4e:	f000 fc61 	bl	8002814 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f52:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f56:	2201      	movs	r2, #1
 8001f58:	2178      	movs	r1, #120	; 0x78
 8001f5a:	485b      	ldr	r0, [pc, #364]	; (80020c8 <SSD1306_Init+0x180>)
 8001f5c:	f001 ff04 	bl	8003d68 <HAL_I2C_IsDeviceReady>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e0a9      	b.n	80020be <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001f6a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001f6e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f70:	e002      	b.n	8001f78 <SSD1306_Init+0x30>
		p--;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f9      	bne.n	8001f72 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001f7e:	22ae      	movs	r2, #174	; 0xae
 8001f80:	2100      	movs	r1, #0
 8001f82:	2078      	movs	r0, #120	; 0x78
 8001f84:	f000 fca2 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001f88:	2220      	movs	r2, #32
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2078      	movs	r0, #120	; 0x78
 8001f8e:	f000 fc9d 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f92:	2210      	movs	r2, #16
 8001f94:	2100      	movs	r1, #0
 8001f96:	2078      	movs	r0, #120	; 0x78
 8001f98:	f000 fc98 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f9c:	22b0      	movs	r2, #176	; 0xb0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2078      	movs	r0, #120	; 0x78
 8001fa2:	f000 fc93 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001fa6:	22c8      	movs	r2, #200	; 0xc8
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2078      	movs	r0, #120	; 0x78
 8001fac:	f000 fc8e 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2078      	movs	r0, #120	; 0x78
 8001fb6:	f000 fc89 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001fba:	2210      	movs	r2, #16
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2078      	movs	r0, #120	; 0x78
 8001fc0:	f000 fc84 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001fc4:	2240      	movs	r2, #64	; 0x40
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	2078      	movs	r0, #120	; 0x78
 8001fca:	f000 fc7f 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001fce:	2281      	movs	r2, #129	; 0x81
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2078      	movs	r0, #120	; 0x78
 8001fd4:	f000 fc7a 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001fd8:	22ff      	movs	r2, #255	; 0xff
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2078      	movs	r0, #120	; 0x78
 8001fde:	f000 fc75 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001fe2:	22a1      	movs	r2, #161	; 0xa1
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2078      	movs	r0, #120	; 0x78
 8001fe8:	f000 fc70 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001fec:	22a6      	movs	r2, #166	; 0xa6
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2078      	movs	r0, #120	; 0x78
 8001ff2:	f000 fc6b 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001ff6:	22a8      	movs	r2, #168	; 0xa8
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2078      	movs	r0, #120	; 0x78
 8001ffc:	f000 fc66 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002000:	223f      	movs	r2, #63	; 0x3f
 8002002:	2100      	movs	r1, #0
 8002004:	2078      	movs	r0, #120	; 0x78
 8002006:	f000 fc61 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800200a:	22a4      	movs	r2, #164	; 0xa4
 800200c:	2100      	movs	r1, #0
 800200e:	2078      	movs	r0, #120	; 0x78
 8002010:	f000 fc5c 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002014:	22d3      	movs	r2, #211	; 0xd3
 8002016:	2100      	movs	r1, #0
 8002018:	2078      	movs	r0, #120	; 0x78
 800201a:	f000 fc57 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	2078      	movs	r0, #120	; 0x78
 8002024:	f000 fc52 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002028:	22d5      	movs	r2, #213	; 0xd5
 800202a:	2100      	movs	r1, #0
 800202c:	2078      	movs	r0, #120	; 0x78
 800202e:	f000 fc4d 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002032:	22f0      	movs	r2, #240	; 0xf0
 8002034:	2100      	movs	r1, #0
 8002036:	2078      	movs	r0, #120	; 0x78
 8002038:	f000 fc48 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800203c:	22d9      	movs	r2, #217	; 0xd9
 800203e:	2100      	movs	r1, #0
 8002040:	2078      	movs	r0, #120	; 0x78
 8002042:	f000 fc43 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002046:	2222      	movs	r2, #34	; 0x22
 8002048:	2100      	movs	r1, #0
 800204a:	2078      	movs	r0, #120	; 0x78
 800204c:	f000 fc3e 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002050:	22da      	movs	r2, #218	; 0xda
 8002052:	2100      	movs	r1, #0
 8002054:	2078      	movs	r0, #120	; 0x78
 8002056:	f000 fc39 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800205a:	2212      	movs	r2, #18
 800205c:	2100      	movs	r1, #0
 800205e:	2078      	movs	r0, #120	; 0x78
 8002060:	f000 fc34 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002064:	22db      	movs	r2, #219	; 0xdb
 8002066:	2100      	movs	r1, #0
 8002068:	2078      	movs	r0, #120	; 0x78
 800206a:	f000 fc2f 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800206e:	2220      	movs	r2, #32
 8002070:	2100      	movs	r1, #0
 8002072:	2078      	movs	r0, #120	; 0x78
 8002074:	f000 fc2a 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002078:	228d      	movs	r2, #141	; 0x8d
 800207a:	2100      	movs	r1, #0
 800207c:	2078      	movs	r0, #120	; 0x78
 800207e:	f000 fc25 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002082:	2214      	movs	r2, #20
 8002084:	2100      	movs	r1, #0
 8002086:	2078      	movs	r0, #120	; 0x78
 8002088:	f000 fc20 	bl	80028cc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800208c:	22af      	movs	r2, #175	; 0xaf
 800208e:	2100      	movs	r1, #0
 8002090:	2078      	movs	r0, #120	; 0x78
 8002092:	f000 fc1b 	bl	80028cc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002096:	222e      	movs	r2, #46	; 0x2e
 8002098:	2100      	movs	r1, #0
 800209a:	2078      	movs	r0, #120	; 0x78
 800209c:	f000 fc16 	bl	80028cc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f000 f843 	bl	800212c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80020a6:	f000 f813 	bl	80020d0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <SSD1306_Init+0x184>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <SSD1306_Init+0x184>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SSD1306_Init+0x184>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200006cc 	.word	0x200006cc
 80020cc:	2000066c 	.word	0x2000066c

080020d0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80020d6:	2300      	movs	r3, #0
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	e01d      	b.n	8002118 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	3b50      	subs	r3, #80	; 0x50
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	2100      	movs	r1, #0
 80020e6:	2078      	movs	r0, #120	; 0x78
 80020e8:	f000 fbf0 	bl	80028cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2078      	movs	r0, #120	; 0x78
 80020f2:	f000 fbeb 	bl	80028cc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80020f6:	2210      	movs	r2, #16
 80020f8:	2100      	movs	r1, #0
 80020fa:	2078      	movs	r0, #120	; 0x78
 80020fc:	f000 fbe6 	bl	80028cc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	01db      	lsls	r3, r3, #7
 8002104:	4a08      	ldr	r2, [pc, #32]	; (8002128 <SSD1306_UpdateScreen+0x58>)
 8002106:	441a      	add	r2, r3
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	2140      	movs	r1, #64	; 0x40
 800210c:	2078      	movs	r0, #120	; 0x78
 800210e:	f000 fb95 	bl	800283c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	3301      	adds	r3, #1
 8002116:	71fb      	strb	r3, [r7, #7]
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	2b07      	cmp	r3, #7
 800211c:	d9de      	bls.n	80020dc <SSD1306_UpdateScreen+0xc>
	}
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000026c 	.word	0x2000026c

0800212c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <SSD1306_Fill+0x14>
 800213c:	2300      	movs	r3, #0
 800213e:	e000      	b.n	8002142 <SSD1306_Fill+0x16>
 8002140:	23ff      	movs	r3, #255	; 0xff
 8002142:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002146:	4619      	mov	r1, r3
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <SSD1306_Fill+0x2c>)
 800214a:	f003 fbbd 	bl	80058c8 <memset>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000026c 	.word	0x2000026c

0800215c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]
 8002166:	460b      	mov	r3, r1
 8002168:	80bb      	strh	r3, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	70fb      	strb	r3, [r7, #3]
	if (
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	2b7f      	cmp	r3, #127	; 0x7f
 8002172:	d848      	bhi.n	8002206 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002174:	88bb      	ldrh	r3, [r7, #4]
 8002176:	2b3f      	cmp	r3, #63	; 0x3f
 8002178:	d845      	bhi.n	8002206 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <SSD1306_DrawPixel+0xb8>)
 800217c:	791b      	ldrb	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002182:	78fb      	ldrb	r3, [r7, #3]
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d11a      	bne.n	80021cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002196:	88fa      	ldrh	r2, [r7, #6]
 8002198:	88bb      	ldrh	r3, [r7, #4]
 800219a:	08db      	lsrs	r3, r3, #3
 800219c:	b298      	uxth	r0, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	01db      	lsls	r3, r3, #7
 80021a2:	4413      	add	r3, r2
 80021a4:	4a1c      	ldr	r2, [pc, #112]	; (8002218 <SSD1306_DrawPixel+0xbc>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	b25a      	sxtb	r2, r3
 80021aa:	88bb      	ldrh	r3, [r7, #4]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b259      	sxtb	r1, r3
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	4603      	mov	r3, r0
 80021c0:	01db      	lsls	r3, r3, #7
 80021c2:	4413      	add	r3, r2
 80021c4:	b2c9      	uxtb	r1, r1
 80021c6:	4a14      	ldr	r2, [pc, #80]	; (8002218 <SSD1306_DrawPixel+0xbc>)
 80021c8:	54d1      	strb	r1, [r2, r3]
 80021ca:	e01d      	b.n	8002208 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	88bb      	ldrh	r3, [r7, #4]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	b298      	uxth	r0, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	01db      	lsls	r3, r3, #7
 80021d8:	4413      	add	r3, r2
 80021da:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <SSD1306_DrawPixel+0xbc>)
 80021dc:	5cd3      	ldrb	r3, [r2, r3]
 80021de:	b25a      	sxtb	r2, r3
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	4013      	ands	r3, r2
 80021f4:	b259      	sxtb	r1, r3
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	4603      	mov	r3, r0
 80021fa:	01db      	lsls	r3, r3, #7
 80021fc:	4413      	add	r3, r2
 80021fe:	b2c9      	uxtb	r1, r1
 8002200:	4a05      	ldr	r2, [pc, #20]	; (8002218 <SSD1306_DrawPixel+0xbc>)
 8002202:	54d1      	strb	r1, [r2, r3]
 8002204:	e000      	b.n	8002208 <SSD1306_DrawPixel+0xac>
		return;
 8002206:	bf00      	nop
	}
}
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000066c 	.word	0x2000066c
 8002218:	2000026c 	.word	0x2000026c

0800221c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	460a      	mov	r2, r1
 8002226:	80fb      	strh	r3, [r7, #6]
 8002228:	4613      	mov	r3, r2
 800222a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800222c:	4a05      	ldr	r2, [pc, #20]	; (8002244 <SSD1306_GotoXY+0x28>)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <SSD1306_GotoXY+0x28>)
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	8053      	strh	r3, [r2, #2]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	2000066c 	.word	0x2000066c

08002248 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4613      	mov	r3, r2
 8002256:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002258:	4b3a      	ldr	r3, [pc, #232]	; (8002344 <SSD1306_Putc+0xfc>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
	if (
 8002264:	2b7f      	cmp	r3, #127	; 0x7f
 8002266:	dc07      	bgt.n	8002278 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002268:	4b36      	ldr	r3, [pc, #216]	; (8002344 <SSD1306_Putc+0xfc>)
 800226a:	885b      	ldrh	r3, [r3, #2]
 800226c:	461a      	mov	r2, r3
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	785b      	ldrb	r3, [r3, #1]
 8002272:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002274:	2b3f      	cmp	r3, #63	; 0x3f
 8002276:	dd01      	ble.n	800227c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002278:	2300      	movs	r3, #0
 800227a:	e05e      	b.n	800233a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e04b      	b.n	800231a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	3b20      	subs	r3, #32
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	7849      	ldrb	r1, [r1, #1]
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4619      	mov	r1, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	440b      	add	r3, r1
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	e030      	b.n	8002308 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80022b6:	4b23      	ldr	r3, [pc, #140]	; (8002344 <SSD1306_Putc+0xfc>)
 80022b8:	881a      	ldrh	r2, [r3, #0]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4413      	add	r3, r2
 80022c0:	b298      	uxth	r0, r3
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <SSD1306_Putc+0xfc>)
 80022c4:	885a      	ldrh	r2, [r3, #2]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	79ba      	ldrb	r2, [r7, #6]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f7ff ff43 	bl	800215c <SSD1306_DrawPixel>
 80022d6:	e014      	b.n	8002302 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <SSD1306_Putc+0xfc>)
 80022da:	881a      	ldrh	r2, [r3, #0]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	b298      	uxth	r0, r3
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <SSD1306_Putc+0xfc>)
 80022e6:	885a      	ldrh	r2, [r3, #2]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	b299      	uxth	r1, r3
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	f7ff ff2d 	bl	800215c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	3301      	adds	r3, #1
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4293      	cmp	r3, r2
 8002312:	d3c8      	bcc.n	80022a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	461a      	mov	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4293      	cmp	r3, r2
 8002324:	d3ad      	bcc.n	8002282 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <SSD1306_Putc+0xfc>)
 8002328:	881a      	ldrh	r2, [r3, #0]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	4413      	add	r3, r2
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <SSD1306_Putc+0xfc>)
 8002336:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002338:	79fb      	ldrb	r3, [r7, #7]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000066c 	.word	0x2000066c

08002348 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002356:	e012      	b.n	800237e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	79fa      	ldrb	r2, [r7, #7]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff71 	bl	8002248 <SSD1306_Putc>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d002      	beq.n	8002378 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	e008      	b.n	800238a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3301      	adds	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1e8      	bne.n	8002358 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	781b      	ldrb	r3, [r3, #0]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002392:	b590      	push	{r4, r7, lr}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	4604      	mov	r4, r0
 800239a:	4608      	mov	r0, r1
 800239c:	4611      	mov	r1, r2
 800239e:	461a      	mov	r2, r3
 80023a0:	4623      	mov	r3, r4
 80023a2:	80fb      	strh	r3, [r7, #6]
 80023a4:	4603      	mov	r3, r0
 80023a6:	80bb      	strh	r3, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	2b7f      	cmp	r3, #127	; 0x7f
 80023b4:	d901      	bls.n	80023ba <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80023b6:	237f      	movs	r3, #127	; 0x7f
 80023b8:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	2b7f      	cmp	r3, #127	; 0x7f
 80023be:	d901      	bls.n	80023c4 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80023c0:	237f      	movs	r3, #127	; 0x7f
 80023c2:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 80023c4:	88bb      	ldrh	r3, [r7, #4]
 80023c6:	2b3f      	cmp	r3, #63	; 0x3f
 80023c8:	d901      	bls.n	80023ce <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80023ca:	233f      	movs	r3, #63	; 0x3f
 80023cc:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 80023ce:	883b      	ldrh	r3, [r7, #0]
 80023d0:	2b3f      	cmp	r3, #63	; 0x3f
 80023d2:	d901      	bls.n	80023d8 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80023d4:	233f      	movs	r3, #63	; 0x3f
 80023d6:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d205      	bcs.n	80023ec <SSD1306_DrawLine+0x5a>
 80023e0:	887a      	ldrh	r2, [r7, #2]
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	e004      	b.n	80023f6 <SSD1306_DrawLine+0x64>
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80023f8:	88ba      	ldrh	r2, [r7, #4]
 80023fa:	883b      	ldrh	r3, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d205      	bcs.n	800240c <SSD1306_DrawLine+0x7a>
 8002400:	883a      	ldrh	r2, [r7, #0]
 8002402:	88bb      	ldrh	r3, [r7, #4]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	b29b      	uxth	r3, r3
 8002408:	b21b      	sxth	r3, r3
 800240a:	e004      	b.n	8002416 <SSD1306_DrawLine+0x84>
 800240c:	88ba      	ldrh	r2, [r7, #4]
 800240e:	883b      	ldrh	r3, [r7, #0]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	b29b      	uxth	r3, r3
 8002414:	b21b      	sxth	r3, r3
 8002416:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	887b      	ldrh	r3, [r7, #2]
 800241c:	429a      	cmp	r2, r3
 800241e:	d201      	bcs.n	8002424 <SSD1306_DrawLine+0x92>
 8002420:	2301      	movs	r3, #1
 8002422:	e001      	b.n	8002428 <SSD1306_DrawLine+0x96>
 8002424:	f04f 33ff 	mov.w	r3, #4294967295
 8002428:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 800242a:	88ba      	ldrh	r2, [r7, #4]
 800242c:	883b      	ldrh	r3, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d201      	bcs.n	8002436 <SSD1306_DrawLine+0xa4>
 8002432:	2301      	movs	r3, #1
 8002434:	e001      	b.n	800243a <SSD1306_DrawLine+0xa8>
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
 800243a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800243c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002440:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	dd06      	ble.n	8002456 <SSD1306_DrawLine+0xc4>
 8002448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800244c:	0fda      	lsrs	r2, r3, #31
 800244e:	4413      	add	r3, r2
 8002450:	105b      	asrs	r3, r3, #1
 8002452:	b21b      	sxth	r3, r3
 8002454:	e006      	b.n	8002464 <SSD1306_DrawLine+0xd2>
 8002456:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800245a:	425b      	negs	r3, r3
 800245c:	0fda      	lsrs	r2, r3, #31
 800245e:	4413      	add	r3, r2
 8002460:	105b      	asrs	r3, r3, #1
 8002462:	b21b      	sxth	r3, r3
 8002464:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8002466:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d129      	bne.n	80024c2 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800246e:	883a      	ldrh	r2, [r7, #0]
 8002470:	88bb      	ldrh	r3, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	d205      	bcs.n	8002482 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8002476:	883b      	ldrh	r3, [r7, #0]
 8002478:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800247a:	88bb      	ldrh	r3, [r7, #4]
 800247c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800247e:	893b      	ldrh	r3, [r7, #8]
 8002480:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	429a      	cmp	r2, r3
 8002488:	d205      	bcs.n	8002496 <SSD1306_DrawLine+0x104>
			tmp = x1;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002492:	893b      	ldrh	r3, [r7, #8]
 8002494:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002496:	88bb      	ldrh	r3, [r7, #4]
 8002498:	82bb      	strh	r3, [r7, #20]
 800249a:	e00c      	b.n	80024b6 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 800249c:	8ab9      	ldrh	r1, [r7, #20]
 800249e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fe59 	bl	800215c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80024aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	82bb      	strh	r3, [r7, #20]
 80024b6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80024ba:	883b      	ldrh	r3, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	dded      	ble.n	800249c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80024c0:	e05f      	b.n	8002582 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80024c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d129      	bne.n	800251e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 80024ca:	883a      	ldrh	r2, [r7, #0]
 80024cc:	88bb      	ldrh	r3, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d205      	bcs.n	80024de <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80024d2:	883b      	ldrh	r3, [r7, #0]
 80024d4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80024d6:	88bb      	ldrh	r3, [r7, #4]
 80024d8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80024da:	893b      	ldrh	r3, [r7, #8]
 80024dc:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d205      	bcs.n	80024f2 <SSD1306_DrawLine+0x160>
			tmp = x1;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80024ee:	893b      	ldrh	r3, [r7, #8]
 80024f0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	82bb      	strh	r3, [r7, #20]
 80024f6:	e00c      	b.n	8002512 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80024f8:	8abb      	ldrh	r3, [r7, #20]
 80024fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80024fe:	88b9      	ldrh	r1, [r7, #4]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fe2b 	bl	800215c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002506:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800250a:	b29b      	uxth	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	b29b      	uxth	r3, r3
 8002510:	82bb      	strh	r3, [r7, #20]
 8002512:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	429a      	cmp	r2, r3
 800251a:	dded      	ble.n	80024f8 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 800251c:	e031      	b.n	8002582 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800251e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002522:	88b9      	ldrh	r1, [r7, #4]
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fe18 	bl	800215c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800252c:	88fa      	ldrh	r2, [r7, #6]
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	429a      	cmp	r2, r3
 8002532:	d103      	bne.n	800253c <SSD1306_DrawLine+0x1aa>
 8002534:	88ba      	ldrh	r2, [r7, #4]
 8002536:	883b      	ldrh	r3, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d021      	beq.n	8002580 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002540:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002544:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002548:	425b      	negs	r3, r3
 800254a:	429a      	cmp	r2, r3
 800254c:	dd08      	ble.n	8002560 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800254e:	8afa      	ldrh	r2, [r7, #22]
 8002550:	8a3b      	ldrh	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	b29b      	uxth	r3, r3
 8002556:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002558:	89fa      	ldrh	r2, [r7, #14]
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	4413      	add	r3, r2
 800255e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002560:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002564:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	dad8      	bge.n	800251e <SSD1306_DrawLine+0x18c>
			err += dx;
 800256c:	8afa      	ldrh	r2, [r7, #22]
 800256e:	8a7b      	ldrh	r3, [r7, #18]
 8002570:	4413      	add	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002576:	89ba      	ldrh	r2, [r7, #12]
 8002578:	88bb      	ldrh	r3, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800257e:	e7ce      	b.n	800251e <SSD1306_DrawLine+0x18c>
			break;
 8002580:	bf00      	nop
		} 
	}
}
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd90      	pop	{r4, r7, pc}

08002588 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b085      	sub	sp, #20
 800258c:	af02      	add	r7, sp, #8
 800258e:	4604      	mov	r4, r0
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4623      	mov	r3, r4
 8002598:	80fb      	strh	r3, [r7, #6]
 800259a:	4603      	mov	r3, r0
 800259c:	80bb      	strh	r3, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	807b      	strh	r3, [r7, #2]
 80025a2:	4613      	mov	r3, r2
 80025a4:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b7f      	cmp	r3, #127	; 0x7f
 80025aa:	d853      	bhi.n	8002654 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 80025ac:	88bb      	ldrh	r3, [r7, #4]
 80025ae:	2b3f      	cmp	r3, #63	; 0x3f
 80025b0:	d850      	bhi.n	8002654 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	4413      	add	r3, r2
 80025b8:	2b7f      	cmp	r3, #127	; 0x7f
 80025ba:	dd03      	ble.n	80025c4 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80025c2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80025c4:	88ba      	ldrh	r2, [r7, #4]
 80025c6:	883b      	ldrh	r3, [r7, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	2b3f      	cmp	r3, #63	; 0x3f
 80025cc:	dd03      	ble.n	80025d6 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80025ce:	88bb      	ldrh	r3, [r7, #4]
 80025d0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80025d4:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 80025d6:	88fa      	ldrh	r2, [r7, #6]
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4413      	add	r3, r2
 80025dc:	b29a      	uxth	r2, r3
 80025de:	88bc      	ldrh	r4, [r7, #4]
 80025e0:	88b9      	ldrh	r1, [r7, #4]
 80025e2:	88f8      	ldrh	r0, [r7, #6]
 80025e4:	7e3b      	ldrb	r3, [r7, #24]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4623      	mov	r3, r4
 80025ea:	f7ff fed2 	bl	8002392 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 80025ee:	88ba      	ldrh	r2, [r7, #4]
 80025f0:	883b      	ldrh	r3, [r7, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	b299      	uxth	r1, r3
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	4413      	add	r3, r2
 80025fc:	b29c      	uxth	r4, r3
 80025fe:	88ba      	ldrh	r2, [r7, #4]
 8002600:	883b      	ldrh	r3, [r7, #0]
 8002602:	4413      	add	r3, r2
 8002604:	b29a      	uxth	r2, r3
 8002606:	88f8      	ldrh	r0, [r7, #6]
 8002608:	7e3b      	ldrb	r3, [r7, #24]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	4622      	mov	r2, r4
 8002610:	f7ff febf 	bl	8002392 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8002614:	88ba      	ldrh	r2, [r7, #4]
 8002616:	883b      	ldrh	r3, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	b29c      	uxth	r4, r3
 800261c:	88fa      	ldrh	r2, [r7, #6]
 800261e:	88b9      	ldrh	r1, [r7, #4]
 8002620:	88f8      	ldrh	r0, [r7, #6]
 8002622:	7e3b      	ldrb	r3, [r7, #24]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	4623      	mov	r3, r4
 8002628:	f7ff feb3 	bl	8002392 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 800262c:	88fa      	ldrh	r2, [r7, #6]
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	4413      	add	r3, r2
 8002632:	b298      	uxth	r0, r3
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	4413      	add	r3, r2
 800263a:	b29c      	uxth	r4, r3
 800263c:	88ba      	ldrh	r2, [r7, #4]
 800263e:	883b      	ldrh	r3, [r7, #0]
 8002640:	4413      	add	r3, r2
 8002642:	b29a      	uxth	r2, r3
 8002644:	88b9      	ldrh	r1, [r7, #4]
 8002646:	7e3b      	ldrb	r3, [r7, #24]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	4622      	mov	r2, r4
 800264e:	f7ff fea0 	bl	8002392 <SSD1306_DrawLine>
 8002652:	e000      	b.n	8002656 <SSD1306_DrawRectangle+0xce>
		return;
 8002654:	bf00      	nop
}
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bd90      	pop	{r4, r7, pc}

0800265c <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	4604      	mov	r4, r0
 8002664:	4608      	mov	r0, r1
 8002666:	4611      	mov	r1, r2
 8002668:	461a      	mov	r2, r3
 800266a:	4623      	mov	r3, r4
 800266c:	80fb      	strh	r3, [r7, #6]
 800266e:	4603      	mov	r3, r0
 8002670:	80bb      	strh	r3, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	807b      	strh	r3, [r7, #2]
 8002676:	4613      	mov	r3, r2
 8002678:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800267a:	887b      	ldrh	r3, [r7, #2]
 800267c:	f1c3 0301 	rsb	r3, r3, #1
 8002680:	b29b      	uxth	r3, r3
 8002682:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002684:	2301      	movs	r3, #1
 8002686:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	461a      	mov	r2, r3
 800268c:	03d2      	lsls	r2, r2, #15
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	b29b      	uxth	r3, r3
 8002694:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800269a:	887b      	ldrh	r3, [r7, #2]
 800269c:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 800269e:	88f8      	ldrh	r0, [r7, #6]
 80026a0:	88ba      	ldrh	r2, [r7, #4]
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	4413      	add	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	787a      	ldrb	r2, [r7, #1]
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7ff fd56 	bl	800215c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80026b0:	88f8      	ldrh	r0, [r7, #6]
 80026b2:	88ba      	ldrh	r2, [r7, #4]
 80026b4:	887b      	ldrh	r3, [r7, #2]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	787a      	ldrb	r2, [r7, #1]
 80026bc:	4619      	mov	r1, r3
 80026be:	f7ff fd4d 	bl	800215c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	4413      	add	r3, r2
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	88b9      	ldrh	r1, [r7, #4]
 80026cc:	787a      	ldrb	r2, [r7, #1]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fd44 	bl	800215c <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	b29b      	uxth	r3, r3
 80026dc:	88b9      	ldrh	r1, [r7, #4]
 80026de:	787a      	ldrb	r2, [r7, #1]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fd3b 	bl	800215c <SSD1306_DrawPixel>

    while (x < y) {
 80026e6:	e081      	b.n	80027ec <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 80026e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0e      	blt.n	800270e <SSD1306_DrawCircle+0xb2>
            y--;
 80026f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80026fc:	8a7b      	ldrh	r3, [r7, #18]
 80026fe:	3302      	adds	r3, #2
 8002700:	b29b      	uxth	r3, r3
 8002702:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8002704:	8afa      	ldrh	r2, [r7, #22]
 8002706:	8a7b      	ldrh	r3, [r7, #18]
 8002708:	4413      	add	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 800270e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002712:	b29b      	uxth	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	b29b      	uxth	r3, r3
 8002718:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800271a:	8abb      	ldrh	r3, [r7, #20]
 800271c:	3302      	adds	r3, #2
 800271e:	b29b      	uxth	r3, r3
 8002720:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8002722:	8afa      	ldrh	r2, [r7, #22]
 8002724:	8abb      	ldrh	r3, [r7, #20]
 8002726:	4413      	add	r3, r2
 8002728:	b29b      	uxth	r3, r3
 800272a:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 800272c:	88fa      	ldrh	r2, [r7, #6]
 800272e:	8a3b      	ldrh	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	b298      	uxth	r0, r3
 8002734:	88ba      	ldrh	r2, [r7, #4]
 8002736:	89fb      	ldrh	r3, [r7, #14]
 8002738:	4413      	add	r3, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	787a      	ldrb	r2, [r7, #1]
 800273e:	4619      	mov	r1, r3
 8002740:	f7ff fd0c 	bl	800215c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	8a3b      	ldrh	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	b298      	uxth	r0, r3
 800274c:	88ba      	ldrh	r2, [r7, #4]
 800274e:	89fb      	ldrh	r3, [r7, #14]
 8002750:	4413      	add	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	787a      	ldrb	r2, [r7, #1]
 8002756:	4619      	mov	r1, r3
 8002758:	f7ff fd00 	bl	800215c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 800275c:	88fa      	ldrh	r2, [r7, #6]
 800275e:	8a3b      	ldrh	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	b298      	uxth	r0, r3
 8002764:	88ba      	ldrh	r2, [r7, #4]
 8002766:	89fb      	ldrh	r3, [r7, #14]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	b29b      	uxth	r3, r3
 800276c:	787a      	ldrb	r2, [r7, #1]
 800276e:	4619      	mov	r1, r3
 8002770:	f7ff fcf4 	bl	800215c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	8a3b      	ldrh	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	b298      	uxth	r0, r3
 800277c:	88ba      	ldrh	r2, [r7, #4]
 800277e:	89fb      	ldrh	r3, [r7, #14]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	b29b      	uxth	r3, r3
 8002784:	787a      	ldrb	r2, [r7, #1]
 8002786:	4619      	mov	r1, r3
 8002788:	f7ff fce8 	bl	800215c <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	89fb      	ldrh	r3, [r7, #14]
 8002790:	4413      	add	r3, r2
 8002792:	b298      	uxth	r0, r3
 8002794:	88ba      	ldrh	r2, [r7, #4]
 8002796:	8a3b      	ldrh	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	b29b      	uxth	r3, r3
 800279c:	787a      	ldrb	r2, [r7, #1]
 800279e:	4619      	mov	r1, r3
 80027a0:	f7ff fcdc 	bl	800215c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 80027a4:	88fa      	ldrh	r2, [r7, #6]
 80027a6:	89fb      	ldrh	r3, [r7, #14]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	b298      	uxth	r0, r3
 80027ac:	88ba      	ldrh	r2, [r7, #4]
 80027ae:	8a3b      	ldrh	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	787a      	ldrb	r2, [r7, #1]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7ff fcd0 	bl	800215c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	89fb      	ldrh	r3, [r7, #14]
 80027c0:	4413      	add	r3, r2
 80027c2:	b298      	uxth	r0, r3
 80027c4:	88ba      	ldrh	r2, [r7, #4]
 80027c6:	8a3b      	ldrh	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	787a      	ldrb	r2, [r7, #1]
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7ff fcc4 	bl	800215c <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 80027d4:	88fa      	ldrh	r2, [r7, #6]
 80027d6:	89fb      	ldrh	r3, [r7, #14]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	b298      	uxth	r0, r3
 80027dc:	88ba      	ldrh	r2, [r7, #4]
 80027de:	8a3b      	ldrh	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	787a      	ldrb	r2, [r7, #1]
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7ff fcb8 	bl	800215c <SSD1306_DrawPixel>
    while (x < y) {
 80027ec:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80027f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f6ff af77 	blt.w	80026e8 <SSD1306_DrawCircle+0x8c>
    }
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}

08002802 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002806:	2000      	movs	r0, #0
 8002808:	f7ff fc90 	bl	800212c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800280c:	f7ff fc60 	bl	80020d0 <SSD1306_UpdateScreen>
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}

08002814 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <ssd1306_I2C_Init+0x24>)
 800281c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800281e:	e002      	b.n	8002826 <ssd1306_I2C_Init+0x12>
		p--;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	0003d090 	.word	0x0003d090

0800283c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b0c7      	sub	sp, #284	; 0x11c
 8002840:	af02      	add	r7, sp, #8
 8002842:	4604      	mov	r4, r0
 8002844:	4608      	mov	r0, r1
 8002846:	4639      	mov	r1, r7
 8002848:	600a      	str	r2, [r1, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	4622      	mov	r2, r4
 8002850:	701a      	strb	r2, [r3, #0]
 8002852:	1dbb      	adds	r3, r7, #6
 8002854:	4602      	mov	r2, r0
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	460a      	mov	r2, r1
 800285c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800285e:	f107 030c 	add.w	r3, r7, #12
 8002862:	1dba      	adds	r2, r7, #6
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002868:	2300      	movs	r3, #0
 800286a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800286e:	e010      	b.n	8002892 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8002870:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002874:	463a      	mov	r2, r7
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	441a      	add	r2, r3
 800287a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800287e:	3301      	adds	r3, #1
 8002880:	7811      	ldrb	r1, [r2, #0]
 8002882:	f107 020c 	add.w	r2, r7, #12
 8002886:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002888:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800288c:	3301      	adds	r3, #1
 800288e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002892:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002896:	b29b      	uxth	r3, r3
 8002898:	1d3a      	adds	r2, r7, #4
 800289a:	8812      	ldrh	r2, [r2, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8e7      	bhi.n	8002870 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80028a0:	1dfb      	adds	r3, r7, #7
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	b299      	uxth	r1, r3
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	b298      	uxth	r0, r3
 80028ae:	f107 020c 	add.w	r2, r7, #12
 80028b2:	230a      	movs	r3, #10
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4603      	mov	r3, r0
 80028b8:	4803      	ldr	r0, [pc, #12]	; (80028c8 <ssd1306_I2C_WriteMulti+0x8c>)
 80028ba:	f000 fe37 	bl	800352c <HAL_I2C_Master_Transmit>
}
 80028be:	bf00      	nop
 80028c0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd90      	pop	{r4, r7, pc}
 80028c8:	200006cc 	.word	0x200006cc

080028cc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
 80028d6:	460b      	mov	r3, r1
 80028d8:	71bb      	strb	r3, [r7, #6]
 80028da:	4613      	mov	r3, r2
 80028dc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80028de:	79bb      	ldrb	r3, [r7, #6]
 80028e0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80028e2:	797b      	ldrb	r3, [r7, #5]
 80028e4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	b299      	uxth	r1, r3
 80028ea:	f107 020c 	add.w	r2, r7, #12
 80028ee:	230a      	movs	r3, #10
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	2302      	movs	r3, #2
 80028f4:	4803      	ldr	r0, [pc, #12]	; (8002904 <ssd1306_I2C_Write+0x38>)
 80028f6:	f000 fe19 	bl	800352c <HAL_I2C_Master_Transmit>
}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200006cc 	.word	0x200006cc

08002908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_MspInit+0x4c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <HAL_MspInit+0x4c>)
 8002918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <HAL_MspInit+0x4c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_MspInit+0x4c>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a08      	ldr	r2, [pc, #32]	; (8002954 <HAL_MspInit+0x4c>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_MspInit+0x4c>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002946:	2007      	movs	r0, #7
 8002948:	f000 fa92 	bl	8002e70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_I2C_MspInit+0x84>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d12b      	bne.n	80029d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002996:	23c0      	movs	r3, #192	; 0xc0
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800299a:	2312      	movs	r3, #18
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299e:	2301      	movs	r3, #1
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029a6:	2304      	movs	r3, #4
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	480c      	ldr	r0, [pc, #48]	; (80029e4 <HAL_I2C_MspInit+0x8c>)
 80029b2:	f000 fa9f 	bl	8002ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 80029c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029d2:	bf00      	nop
 80029d4:	3728      	adds	r7, #40	; 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40005400 	.word	0x40005400
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020400 	.word	0x40020400

080029e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <HAL_TIM_Base_MspInit+0x48>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d115      	bne.n	8002a26 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_TIM_Base_MspInit+0x4c>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_TIM_Base_MspInit+0x4c>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_TIM_Base_MspInit+0x4c>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	201e      	movs	r0, #30
 8002a1c:	f000 fa33 	bl	8002e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a20:	201e      	movs	r0, #30
 8002a22:	f000 fa4c 	bl	8002ebe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40000800 	.word	0x40000800
 8002a34:	40023800 	.word	0x40023800

08002a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <NMI_Handler+0x4>

08002a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <HardFault_Handler+0x4>

08002a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <MemManage_Handler+0x4>

08002a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4e:	e7fe      	b.n	8002a4e <BusFault_Handler+0x4>

08002a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <UsageFault_Handler+0x4>

08002a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a84:	f000 f8e2 	bl	8002c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f000 fbfb 	bl	800328c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002a9e:	2010      	movs	r0, #16
 8002aa0:	f000 fbf4 	bl	800328c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <TIM4_IRQHandler+0x10>)
 8002aae:	f002 fb2f 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000068c 	.word	0x2000068c

08002abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <_sbrk+0x5c>)
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <_sbrk+0x60>)
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <_sbrk+0x64>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <_sbrk+0x64>)
 8002ada:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <_sbrk+0x68>)
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d207      	bcs.n	8002afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aec:	f002 fec2 	bl	8005874 <__errno>
 8002af0:	4602      	mov	r2, r0
 8002af2:	230c      	movs	r3, #12
 8002af4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
 8002afa:	e009      	b.n	8002b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <_sbrk+0x64>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <_sbrk+0x64>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <_sbrk+0x64>)
 8002b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20020000 	.word	0x20020000
 8002b1c:	00000400 	.word	0x00000400
 8002b20:	20000674 	.word	0x20000674
 8002b24:	20000740 	.word	0x20000740

08002b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <SystemInit+0x28>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <SystemInit+0x28>)
 8002b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <SystemInit+0x28>)
 8002b3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b42:	609a      	str	r2, [r3, #8]
#endif
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b5a:	e003      	b.n	8002b64 <LoopCopyDataInit>

08002b5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b62:	3104      	adds	r1, #4

08002b64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b64:	480b      	ldr	r0, [pc, #44]	; (8002b94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b6c:	d3f6      	bcc.n	8002b5c <CopyDataInit>
  ldr  r2, =_sbss
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b70:	e002      	b.n	8002b78 <LoopFillZerobss>

08002b72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b74:	f842 3b04 	str.w	r3, [r2], #4

08002b78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b7c:	d3f9      	bcc.n	8002b72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b7e:	f7ff ffd3 	bl	8002b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b82:	f002 fe7d 	bl	8005880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b86:	f7ff f845 	bl	8001c14 <main>
  bx  lr    
 8002b8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b90:	0800b4f0 	.word	0x0800b4f0
  ldr  r0, =_sdata
 8002b94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b98:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8002b9c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002ba0:	20000740 	.word	0x20000740

08002ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC_IRQHandler>
	...

08002ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_Init+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <HAL_Init+0x40>)
 8002bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_Init+0x40>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <HAL_Init+0x40>)
 8002bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <HAL_Init+0x40>)
 8002bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f000 f94d 	bl	8002e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f000 f808 	bl	8002bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bdc:	f7ff fe94 	bl	8002908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023c00 	.word	0x40023c00

08002bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_InitTick+0x54>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_InitTick+0x58>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f965 	bl	8002eda <HAL_SYSTICK_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00e      	b.n	8002c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b0f      	cmp	r3, #15
 8002c1e:	d80a      	bhi.n	8002c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c20:	2200      	movs	r2, #0
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f000 f92d 	bl	8002e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c2c:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <HAL_InitTick+0x5c>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000008 	.word	0x20000008
 8002c44:	20000010 	.word	0x20000010
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_IncTick+0x20>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_IncTick+0x24>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <HAL_IncTick+0x24>)
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000010 	.word	0x20000010
 8002c70:	20000738 	.word	0x20000738

08002c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return uwTick;
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <HAL_GetTick+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20000738 	.word	0x20000738

08002c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff ffee 	bl	8002c74 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d005      	beq.n	8002cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_Delay+0x40>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cb2:	bf00      	nop
 8002cb4:	f7ff ffde 	bl	8002c74 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d8f7      	bhi.n	8002cb4 <HAL_Delay+0x28>
  {
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000010 	.word	0x20000010

08002cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cec:	4013      	ands	r3, r2
 8002cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <__NVIC_SetPriorityGrouping+0x44>)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	60d3      	str	r3, [r2, #12]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <__NVIC_GetPriorityGrouping+0x18>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 0307 	and.w	r3, r3, #7
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	db0b      	blt.n	8002d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4907      	ldr	r1, [pc, #28]	; (8002d6c <__NVIC_EnableIRQ+0x38>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2001      	movs	r0, #1
 8002d56:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000e100 	.word	0xe000e100

08002d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	6039      	str	r1, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	db0a      	blt.n	8002d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	490c      	ldr	r1, [pc, #48]	; (8002dbc <__NVIC_SetPriority+0x4c>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	0112      	lsls	r2, r2, #4
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	440b      	add	r3, r1
 8002d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d98:	e00a      	b.n	8002db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4908      	ldr	r1, [pc, #32]	; (8002dc0 <__NVIC_SetPriority+0x50>)
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	3b04      	subs	r3, #4
 8002da8:	0112      	lsls	r2, r2, #4
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	440b      	add	r3, r1
 8002dae:	761a      	strb	r2, [r3, #24]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	; 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f1c3 0307 	rsb	r3, r3, #7
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	bf28      	it	cs
 8002de2:	2304      	movcs	r3, #4
 8002de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2b06      	cmp	r3, #6
 8002dec:	d902      	bls.n	8002df4 <NVIC_EncodePriority+0x30>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3b03      	subs	r3, #3
 8002df2:	e000      	b.n	8002df6 <NVIC_EncodePriority+0x32>
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43da      	mvns	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	401a      	ands	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43d9      	mvns	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	4313      	orrs	r3, r2
         );
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e3c:	d301      	bcc.n	8002e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00f      	b.n	8002e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <SysTick_Config+0x40>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4a:	210f      	movs	r1, #15
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f7ff ff8e 	bl	8002d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <SysTick_Config+0x40>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5a:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <SysTick_Config+0x40>)
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	e000e010 	.word	0xe000e010

08002e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff29 	bl	8002cd0 <__NVIC_SetPriorityGrouping>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e98:	f7ff ff3e 	bl	8002d18 <__NVIC_GetPriorityGrouping>
 8002e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f7ff ff8e 	bl	8002dc4 <NVIC_EncodePriority>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff5d 	bl	8002d70 <__NVIC_SetPriority>
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff31 	bl	8002d34 <__NVIC_EnableIRQ>
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ffa2 	bl	8002e2c <SysTick_Config>
 8002ee8:	4603      	mov	r3, r0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b089      	sub	sp, #36	; 0x24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e16b      	b.n	80031e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f10:	2201      	movs	r2, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	f040 815a 	bne.w	80031e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d00b      	beq.n	8002f4e <HAL_GPIO_Init+0x5a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d007      	beq.n	8002f4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f42:	2b11      	cmp	r3, #17
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b12      	cmp	r3, #18
 8002f4c:	d130      	bne.n	8002fb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0xfc>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b12      	cmp	r3, #18
 8002fee:	d123      	bne.n	8003038 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	08da      	lsrs	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3208      	adds	r2, #8
 8002ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	220f      	movs	r2, #15
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	08da      	lsrs	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3208      	adds	r2, #8
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0203 	and.w	r2, r3, #3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80b4 	beq.w	80031e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	4b5f      	ldr	r3, [pc, #380]	; (80031fc <HAL_GPIO_Init+0x308>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	4a5e      	ldr	r2, [pc, #376]	; (80031fc <HAL_GPIO_Init+0x308>)
 8003084:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003088:	6453      	str	r3, [r2, #68]	; 0x44
 800308a:	4b5c      	ldr	r3, [pc, #368]	; (80031fc <HAL_GPIO_Init+0x308>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003096:	4a5a      	ldr	r2, [pc, #360]	; (8003200 <HAL_GPIO_Init+0x30c>)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	220f      	movs	r2, #15
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a51      	ldr	r2, [pc, #324]	; (8003204 <HAL_GPIO_Init+0x310>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02b      	beq.n	800311a <HAL_GPIO_Init+0x226>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a50      	ldr	r2, [pc, #320]	; (8003208 <HAL_GPIO_Init+0x314>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d025      	beq.n	8003116 <HAL_GPIO_Init+0x222>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4f      	ldr	r2, [pc, #316]	; (800320c <HAL_GPIO_Init+0x318>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <HAL_GPIO_Init+0x21e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4e      	ldr	r2, [pc, #312]	; (8003210 <HAL_GPIO_Init+0x31c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d019      	beq.n	800310e <HAL_GPIO_Init+0x21a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4d      	ldr	r2, [pc, #308]	; (8003214 <HAL_GPIO_Init+0x320>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0x216>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4c      	ldr	r2, [pc, #304]	; (8003218 <HAL_GPIO_Init+0x324>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_GPIO_Init+0x212>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4b      	ldr	r2, [pc, #300]	; (800321c <HAL_GPIO_Init+0x328>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <HAL_GPIO_Init+0x20e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4a      	ldr	r2, [pc, #296]	; (8003220 <HAL_GPIO_Init+0x32c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_GPIO_Init+0x20a>
 80030fa:	2307      	movs	r3, #7
 80030fc:	e00e      	b.n	800311c <HAL_GPIO_Init+0x228>
 80030fe:	2308      	movs	r3, #8
 8003100:	e00c      	b.n	800311c <HAL_GPIO_Init+0x228>
 8003102:	2306      	movs	r3, #6
 8003104:	e00a      	b.n	800311c <HAL_GPIO_Init+0x228>
 8003106:	2305      	movs	r3, #5
 8003108:	e008      	b.n	800311c <HAL_GPIO_Init+0x228>
 800310a:	2304      	movs	r3, #4
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x228>
 800310e:	2303      	movs	r3, #3
 8003110:	e004      	b.n	800311c <HAL_GPIO_Init+0x228>
 8003112:	2302      	movs	r3, #2
 8003114:	e002      	b.n	800311c <HAL_GPIO_Init+0x228>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x228>
 800311a:	2300      	movs	r3, #0
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f002 0203 	and.w	r2, r2, #3
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	4093      	lsls	r3, r2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800312c:	4934      	ldr	r1, [pc, #208]	; (8003200 <HAL_GPIO_Init+0x30c>)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800313a:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <HAL_GPIO_Init+0x330>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800315e:	4a31      	ldr	r2, [pc, #196]	; (8003224 <HAL_GPIO_Init+0x330>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003164:	4b2f      	ldr	r3, [pc, #188]	; (8003224 <HAL_GPIO_Init+0x330>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003188:	4a26      	ldr	r2, [pc, #152]	; (8003224 <HAL_GPIO_Init+0x330>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318e:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_GPIO_Init+0x330>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b2:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <HAL_GPIO_Init+0x330>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b8:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_GPIO_Init+0x330>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031dc:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_GPIO_Init+0x330>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3301      	adds	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	f67f ae90 	bls.w	8002f10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	3724      	adds	r7, #36	; 0x24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40023800 	.word	0x40023800
 8003200:	40013800 	.word	0x40013800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40020800 	.word	0x40020800
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40021400 	.word	0x40021400
 800321c:	40021800 	.word	0x40021800
 8003220:	40021c00 	.word	0x40021c00
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	e001      	b.n	800324a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d006      	beq.n	80032b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032a2:	4a05      	ldr	r2, [pc, #20]	; (80032b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fabc 	bl	8001828 <HAL_GPIO_EXTI_Callback>
  }
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40013c00 	.word	0x40013c00

080032bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e11f      	b.n	800350e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fb38 	bl	8002958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800331e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003320:	f001 fe68 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8003324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4a7b      	ldr	r2, [pc, #492]	; (8003518 <HAL_I2C_Init+0x25c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d807      	bhi.n	8003340 <HAL_I2C_Init+0x84>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a7a      	ldr	r2, [pc, #488]	; (800351c <HAL_I2C_Init+0x260>)
 8003334:	4293      	cmp	r3, r2
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e006      	b.n	800334e <HAL_I2C_Init+0x92>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a77      	ldr	r2, [pc, #476]	; (8003520 <HAL_I2C_Init+0x264>)
 8003344:	4293      	cmp	r3, r2
 8003346:	bf94      	ite	ls
 8003348:	2301      	movls	r3, #1
 800334a:	2300      	movhi	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0db      	b.n	800350e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a72      	ldr	r2, [pc, #456]	; (8003524 <HAL_I2C_Init+0x268>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0c9b      	lsrs	r3, r3, #18
 8003360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a64      	ldr	r2, [pc, #400]	; (8003518 <HAL_I2C_Init+0x25c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d802      	bhi.n	8003390 <HAL_I2C_Init+0xd4>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	3301      	adds	r3, #1
 800338e:	e009      	b.n	80033a4 <HAL_I2C_Init+0xe8>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	4a63      	ldr	r2, [pc, #396]	; (8003528 <HAL_I2C_Init+0x26c>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	3301      	adds	r3, #1
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4956      	ldr	r1, [pc, #344]	; (8003518 <HAL_I2C_Init+0x25c>)
 80033c0:	428b      	cmp	r3, r1
 80033c2:	d80d      	bhi.n	80033e0 <HAL_I2C_Init+0x124>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1e59      	subs	r1, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	2b04      	cmp	r3, #4
 80033da:	bf38      	it	cc
 80033dc:	2304      	movcc	r3, #4
 80033de:	e04f      	b.n	8003480 <HAL_I2C_Init+0x1c4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d111      	bne.n	800340c <HAL_I2C_Init+0x150>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e58      	subs	r0, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	440b      	add	r3, r1
 80033f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e012      	b.n	8003432 <HAL_I2C_Init+0x176>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1e58      	subs	r0, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	0099      	lsls	r1, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003422:	3301      	adds	r3, #1
 8003424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_Init+0x17e>
 8003436:	2301      	movs	r3, #1
 8003438:	e022      	b.n	8003480 <HAL_I2C_Init+0x1c4>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10e      	bne.n	8003460 <HAL_I2C_Init+0x1a4>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1e58      	subs	r0, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	440b      	add	r3, r1
 8003450:	fbb0 f3f3 	udiv	r3, r0, r3
 8003454:	3301      	adds	r3, #1
 8003456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345e:	e00f      	b.n	8003480 <HAL_I2C_Init+0x1c4>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e58      	subs	r0, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	0099      	lsls	r1, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	6809      	ldr	r1, [r1, #0]
 8003484:	4313      	orrs	r3, r2
 8003486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6911      	ldr	r1, [r2, #16]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68d2      	ldr	r2, [r2, #12]
 80034ba:	4311      	orrs	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	000186a0 	.word	0x000186a0
 800351c:	001e847f 	.word	0x001e847f
 8003520:	003d08ff 	.word	0x003d08ff
 8003524:	431bde83 	.word	0x431bde83
 8003528:	10624dd3 	.word	0x10624dd3

0800352c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	461a      	mov	r2, r3
 8003538:	460b      	mov	r3, r1
 800353a:	817b      	strh	r3, [r7, #10]
 800353c:	4613      	mov	r3, r2
 800353e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003540:	f7ff fb98 	bl	8002c74 <HAL_GetTick>
 8003544:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	f040 80e0 	bne.w	8003714 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2319      	movs	r3, #25
 800355a:	2201      	movs	r2, #1
 800355c:	4970      	ldr	r1, [pc, #448]	; (8003720 <HAL_I2C_Master_Transmit+0x1f4>)
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 ff30 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800356a:	2302      	movs	r3, #2
 800356c:	e0d3      	b.n	8003716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_I2C_Master_Transmit+0x50>
 8003578:	2302      	movs	r3, #2
 800357a:	e0cc      	b.n	8003716 <HAL_I2C_Master_Transmit+0x1ea>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d007      	beq.n	80035a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2221      	movs	r2, #33	; 0x21
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2210      	movs	r2, #16
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	893a      	ldrh	r2, [r7, #8]
 80035d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a50      	ldr	r2, [pc, #320]	; (8003724 <HAL_I2C_Master_Transmit+0x1f8>)
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035e4:	8979      	ldrh	r1, [r7, #10]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 fcea 	bl	8003fc4 <I2C_MasterRequestWrite>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e08d      	b.n	8003716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003610:	e066      	b.n	80036e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	6a39      	ldr	r1, [r7, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 ffaa 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2b04      	cmp	r3, #4
 8003628:	d107      	bne.n	800363a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003638:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e06b      	b.n	8003716 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	781a      	ldrb	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d11b      	bne.n	80036b4 <HAL_I2C_Master_Transmit+0x188>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d017      	beq.n	80036b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	6a39      	ldr	r1, [r7, #32]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 ff9a 	bl	80045f2 <I2C_WaitOnBTFFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00d      	beq.n	80036e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d107      	bne.n	80036dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e01a      	b.n	8003716 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d194      	bne.n	8003612 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	00100002 	.word	0x00100002
 8003724:	ffff0000 	.word	0xffff0000

08003728 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	460b      	mov	r3, r1
 800373c:	813b      	strh	r3, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003742:	f7ff fa97 	bl	8002c74 <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b20      	cmp	r3, #32
 8003752:	f040 80d9 	bne.w	8003908 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2319      	movs	r3, #25
 800375c:	2201      	movs	r2, #1
 800375e:	496d      	ldr	r1, [pc, #436]	; (8003914 <HAL_I2C_Mem_Write+0x1ec>)
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fe2f 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
 800376e:	e0cc      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_I2C_Mem_Write+0x56>
 800377a:	2302      	movs	r3, #2
 800377c:	e0c5      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d007      	beq.n	80037a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2221      	movs	r2, #33	; 0x21
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a4d      	ldr	r2, [pc, #308]	; (8003918 <HAL_I2C_Mem_Write+0x1f0>)
 80037e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037e6:	88f8      	ldrh	r0, [r7, #6]
 80037e8:	893a      	ldrh	r2, [r7, #8]
 80037ea:	8979      	ldrh	r1, [r7, #10]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	4603      	mov	r3, r0
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fc66 	bl	80040c8 <I2C_RequestMemoryWrite>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d052      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e081      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 feb0 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	2b04      	cmp	r3, #4
 800381c:	d107      	bne.n	800382e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e06b      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b04      	cmp	r3, #4
 800386e:	d11b      	bne.n	80038a8 <HAL_I2C_Mem_Write+0x180>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1aa      	bne.n	8003806 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fe9c 	bl	80045f2 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d107      	bne.n	80038d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e016      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	00100002 	.word	0x00100002
 8003918:	ffff0000 	.word	0xffff0000

0800391c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	817b      	strh	r3, [r7, #10]
 800392e:	460b      	mov	r3, r1
 8003930:	813b      	strh	r3, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003936:	f7ff f99d 	bl	8002c74 <HAL_GetTick>
 800393a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b20      	cmp	r3, #32
 8003946:	f040 8208 	bne.w	8003d5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	2319      	movs	r3, #25
 8003950:	2201      	movs	r2, #1
 8003952:	497b      	ldr	r1, [pc, #492]	; (8003b40 <HAL_I2C_Mem_Read+0x224>)
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fd35 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
 8003962:	e1fb      	b.n	8003d5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_I2C_Mem_Read+0x56>
 800396e:	2302      	movs	r3, #2
 8003970:	e1f4      	b.n	8003d5c <HAL_I2C_Mem_Read+0x440>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d007      	beq.n	8003998 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2222      	movs	r2, #34	; 0x22
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a5b      	ldr	r2, [pc, #364]	; (8003b44 <HAL_I2C_Mem_Read+0x228>)
 80039d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039da:	88f8      	ldrh	r0, [r7, #6]
 80039dc:	893a      	ldrh	r2, [r7, #8]
 80039de:	8979      	ldrh	r1, [r7, #10]
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4603      	mov	r3, r0
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fc02 	bl	80041f4 <I2C_RequestMemoryRead>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e1b0      	b.n	8003d5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d113      	bne.n	8003a2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a02:	2300      	movs	r3, #0
 8003a04:	623b      	str	r3, [r7, #32]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	623b      	str	r3, [r7, #32]
 8003a16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e184      	b.n	8003d34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d11b      	bne.n	8003a6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	e164      	b.n	8003d34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d11b      	bne.n	8003aaa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	e144      	b.n	8003d34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ac0:	e138      	b.n	8003d34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	f200 80f1 	bhi.w	8003cae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d123      	bne.n	8003b1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fdcb 	bl	8004674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e139      	b.n	8003d5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b1a:	e10b      	b.n	8003d34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d14e      	bne.n	8003bc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4906      	ldr	r1, [pc, #24]	; (8003b48 <HAL_I2C_Mem_Read+0x22c>)
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fc48 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e10e      	b.n	8003d5c <HAL_I2C_Mem_Read+0x440>
 8003b3e:	bf00      	nop
 8003b40:	00100002 	.word	0x00100002
 8003b44:	ffff0000 	.word	0xffff0000
 8003b48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bc0:	e0b8      	b.n	8003d34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4966      	ldr	r1, [pc, #408]	; (8003d64 <HAL_I2C_Mem_Read+0x448>)
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 fbf9 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0bf      	b.n	8003d5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	2200      	movs	r2, #0
 8003c26:	494f      	ldr	r1, [pc, #316]	; (8003d64 <HAL_I2C_Mem_Read+0x448>)
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fbcb 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e091      	b.n	8003d5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cac:	e042      	b.n	8003d34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fcde 	bl	8004674 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e04c      	b.n	8003d5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d118      	bne.n	8003d34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f47f aec2 	bne.w	8003ac2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3728      	adds	r7, #40	; 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	00010004 	.word	0x00010004

08003d68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	460b      	mov	r3, r1
 8003d76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d78:	f7fe ff7c 	bl	8002c74 <HAL_GetTick>
 8003d7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	f040 8111 	bne.w	8003fb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	2319      	movs	r3, #25
 8003d96:	2201      	movs	r2, #1
 8003d98:	4988      	ldr	r1, [pc, #544]	; (8003fbc <HAL_I2C_IsDeviceReady+0x254>)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fb12 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
 8003da8:	e104      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_I2C_IsDeviceReady+0x50>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e0fd      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d007      	beq.n	8003dde <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2224      	movs	r2, #36	; 0x24
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a70      	ldr	r2, [pc, #448]	; (8003fc0 <HAL_I2C_IsDeviceReady+0x258>)
 8003e00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fad0 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00d      	beq.n	8003e46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e38:	d103      	bne.n	8003e42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e0b6      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e46:	897b      	ldrh	r3, [r7, #10]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fe ff0d 	bl	8002c74 <HAL_GetTick>
 8003e5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	bf0c      	ite	eq
 8003e6a:	2301      	moveq	r3, #1
 8003e6c:	2300      	movne	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e8a:	e025      	b.n	8003ed8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fe fef2 	bl	8002c74 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <HAL_I2C_IsDeviceReady+0x13a>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	22a0      	movs	r2, #160	; 0xa0
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2ba0      	cmp	r3, #160	; 0xa0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_I2C_IsDeviceReady+0x188>
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <HAL_I2C_IsDeviceReady+0x188>
 8003eea:	7dbb      	ldrb	r3, [r7, #22]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0cd      	beq.n	8003e8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d129      	bne.n	8003f5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2319      	movs	r3, #25
 8003f32:	2201      	movs	r2, #1
 8003f34:	4921      	ldr	r1, [pc, #132]	; (8003fbc <HAL_I2C_IsDeviceReady+0x254>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fa44 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e036      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e02c      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2319      	movs	r3, #25
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	490f      	ldr	r1, [pc, #60]	; (8003fbc <HAL_I2C_IsDeviceReady+0x254>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fa20 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e012      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	3301      	adds	r3, #1
 8003f92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	f4ff af32 	bcc.w	8003e02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	00100002 	.word	0x00100002
 8003fc0:	ffff0000 	.word	0xffff0000

08003fc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d006      	beq.n	8003fee <I2C_MasterRequestWrite+0x2a>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d003      	beq.n	8003fee <I2C_MasterRequestWrite+0x2a>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fec:	d108      	bne.n	8004000 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e00b      	b.n	8004018 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	2b12      	cmp	r3, #18
 8004006:	d107      	bne.n	8004018 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f9cd 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403e:	d103      	bne.n	8004048 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e035      	b.n	80040b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004054:	d108      	bne.n	8004068 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004056:	897b      	ldrh	r3, [r7, #10]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	e01b      	b.n	80040a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004068:	897b      	ldrh	r3, [r7, #10]
 800406a:	11db      	asrs	r3, r3, #7
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 0306 	and.w	r3, r3, #6
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f063 030f 	orn	r3, r3, #15
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	490e      	ldr	r1, [pc, #56]	; (80040c0 <I2C_MasterRequestWrite+0xfc>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f9f3 	bl	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e010      	b.n	80040b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004096:	897b      	ldrh	r3, [r7, #10]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4907      	ldr	r1, [pc, #28]	; (80040c4 <I2C_MasterRequestWrite+0x100>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f9e3 	bl	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	00010008 	.word	0x00010008
 80040c4:	00010002 	.word	0x00010002

080040c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	4608      	mov	r0, r1
 80040d2:	4611      	mov	r1, r2
 80040d4:	461a      	mov	r2, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	817b      	strh	r3, [r7, #10]
 80040da:	460b      	mov	r3, r1
 80040dc:	813b      	strh	r3, [r7, #8]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f960 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00d      	beq.n	8004126 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004118:	d103      	bne.n	8004122 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e05f      	b.n	80041e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004134:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	492d      	ldr	r1, [pc, #180]	; (80041f0 <I2C_RequestMemoryWrite+0x128>)
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 f998 	bl	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e04c      	b.n	80041e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004164:	6a39      	ldr	r1, [r7, #32]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fa02 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00d      	beq.n	800418e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b04      	cmp	r3, #4
 8004178:	d107      	bne.n	800418a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004188:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e02b      	b.n	80041e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004194:	893b      	ldrh	r3, [r7, #8]
 8004196:	b2da      	uxtb	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	611a      	str	r2, [r3, #16]
 800419e:	e021      	b.n	80041e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041a0:	893b      	ldrh	r3, [r7, #8]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b0:	6a39      	ldr	r1, [r7, #32]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f9dc 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d107      	bne.n	80041d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e005      	b.n	80041e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041da:	893b      	ldrh	r3, [r7, #8]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	00010002 	.word	0x00010002

080041f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	4608      	mov	r0, r1
 80041fe:	4611      	mov	r1, r2
 8004200:	461a      	mov	r2, r3
 8004202:	4603      	mov	r3, r0
 8004204:	817b      	strh	r3, [r7, #10]
 8004206:	460b      	mov	r3, r1
 8004208:	813b      	strh	r3, [r7, #8]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800421c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	2200      	movs	r2, #0
 8004236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f8c2 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004254:	d103      	bne.n	800425e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e0aa      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004262:	897b      	ldrh	r3, [r7, #10]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004270:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	4952      	ldr	r1, [pc, #328]	; (80043c0 <I2C_RequestMemoryRead+0x1cc>)
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 f8fa 	bl	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e097      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800429e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a0:	6a39      	ldr	r1, [r7, #32]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f964 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d107      	bne.n	80042c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e076      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042d0:	893b      	ldrh	r3, [r7, #8]
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	611a      	str	r2, [r3, #16]
 80042da:	e021      	b.n	8004320 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042dc:	893b      	ldrh	r3, [r7, #8]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ec:	6a39      	ldr	r1, [r7, #32]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f93e 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00d      	beq.n	8004316 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d107      	bne.n	8004312 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004310:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e050      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004316:	893b      	ldrh	r3, [r7, #8]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	6a39      	ldr	r1, [r7, #32]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 f923 	bl	8004570 <I2C_WaitOnTXEFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	2b04      	cmp	r3, #4
 8004336:	d107      	bne.n	8004348 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004346:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e035      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	2200      	movs	r2, #0
 8004364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f82b 	bl	80043c4 <I2C_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004382:	d103      	bne.n	800438c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800438a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e013      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004390:	897b      	ldrh	r3, [r7, #10]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	6a3a      	ldr	r2, [r7, #32]
 80043a4:	4906      	ldr	r1, [pc, #24]	; (80043c0 <I2C_RequestMemoryRead+0x1cc>)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f863 	bl	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	00010002 	.word	0x00010002

080043c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d4:	e025      	b.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d021      	beq.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe fc49 	bl	8002c74 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d116      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f043 0220 	orr.w	r2, r3, #32
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e023      	b.n	800446a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d10d      	bne.n	8004448 <I2C_WaitOnFlagUntilTimeout+0x84>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4013      	ands	r3, r2
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf0c      	ite	eq
 800443e:	2301      	moveq	r3, #1
 8004440:	2300      	movne	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	e00c      	b.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	43da      	mvns	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4013      	ands	r3, r2
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	bf0c      	ite	eq
 800445a:	2301      	moveq	r3, #1
 800445c:	2300      	movne	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	429a      	cmp	r2, r3
 8004466:	d0b6      	beq.n	80043d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004480:	e051      	b.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004490:	d123      	bne.n	80044da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f043 0204 	orr.w	r2, r3, #4
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e046      	b.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e0:	d021      	beq.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7fe fbc7 	bl	8002c74 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d116      	bne.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f043 0220 	orr.w	r2, r3, #32
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e020      	b.n	8004568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	0c1b      	lsrs	r3, r3, #16
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d10c      	bne.n	800454a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4013      	ands	r3, r2
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf14      	ite	ne
 8004542:	2301      	movne	r3, #1
 8004544:	2300      	moveq	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	e00b      	b.n	8004562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	43da      	mvns	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4013      	ands	r3, r2
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d18d      	bne.n	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800457c:	e02d      	b.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f8ce 	bl	8004720 <I2C_IsAcknowledgeFailed>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e02d      	b.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d021      	beq.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004596:	f7fe fb6d 	bl	8002c74 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d116      	bne.n	80045da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e007      	b.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	2b80      	cmp	r3, #128	; 0x80
 80045e6:	d1ca      	bne.n	800457e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045fe:	e02d      	b.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f88d 	bl	8004720 <I2C_IsAcknowledgeFailed>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e02d      	b.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d021      	beq.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004618:	f7fe fb2c 	bl	8002c74 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d116      	bne.n	800465c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e007      	b.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b04      	cmp	r3, #4
 8004668:	d1ca      	bne.n	8004600 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004680:	e042      	b.n	8004708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b10      	cmp	r3, #16
 800468e:	d119      	bne.n	80046c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0210 	mvn.w	r2, #16
 8004698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e029      	b.n	8004718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c4:	f7fe fad6 	bl	8002c74 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d302      	bcc.n	80046da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d116      	bne.n	8004708 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e007      	b.n	8004718 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d1b5      	bne.n	8004682 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004736:	d11b      	bne.n	8004770 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004740:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	f043 0204 	orr.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e25b      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d075      	beq.n	800488a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800479e:	4ba3      	ldr	r3, [pc, #652]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d00c      	beq.n	80047c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047aa:	4ba0      	ldr	r3, [pc, #640]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d112      	bne.n	80047dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b6:	4b9d      	ldr	r3, [pc, #628]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c2:	d10b      	bne.n	80047dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c4:	4b99      	ldr	r3, [pc, #612]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d05b      	beq.n	8004888 <HAL_RCC_OscConfig+0x108>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d157      	bne.n	8004888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e236      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d106      	bne.n	80047f4 <HAL_RCC_OscConfig+0x74>
 80047e6:	4b91      	ldr	r3, [pc, #580]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a90      	ldr	r2, [pc, #576]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e01d      	b.n	8004830 <HAL_RCC_OscConfig+0xb0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0x98>
 80047fe:	4b8b      	ldr	r3, [pc, #556]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a8a      	ldr	r2, [pc, #552]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 8004804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b88      	ldr	r3, [pc, #544]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a87      	ldr	r2, [pc, #540]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0xb0>
 8004818:	4b84      	ldr	r3, [pc, #528]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a83      	ldr	r2, [pc, #524]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 800481e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b81      	ldr	r3, [pc, #516]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a80      	ldr	r2, [pc, #512]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 800482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fe fa1c 	bl	8002c74 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004840:	f7fe fa18 	bl	8002c74 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e1fb      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b76      	ldr	r3, [pc, #472]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0xc0>
 800485e:	e014      	b.n	800488a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fe fa08 	bl	8002c74 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004868:	f7fe fa04 	bl	8002c74 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1e7      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	4b6c      	ldr	r3, [pc, #432]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0xe8>
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004896:	4b65      	ldr	r3, [pc, #404]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a2:	4b62      	ldr	r3, [pc, #392]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d11c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ae:	4b5f      	ldr	r3, [pc, #380]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d116      	bne.n	80048e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	4b5c      	ldr	r3, [pc, #368]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x152>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1bb      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d2:	4b56      	ldr	r3, [pc, #344]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4952      	ldr	r1, [pc, #328]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	e03a      	b.n	800495e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f0:	4b4f      	ldr	r3, [pc, #316]	; (8004a30 <HAL_RCC_OscConfig+0x2b0>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7fe f9bd 	bl	8002c74 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048fe:	f7fe f9b9 	bl	8002c74 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e19c      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	4b46      	ldr	r3, [pc, #280]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b43      	ldr	r3, [pc, #268]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4940      	ldr	r1, [pc, #256]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	e015      	b.n	800495e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004932:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <HAL_RCC_OscConfig+0x2b0>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fe f99c 	bl	8002c74 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004940:	f7fe f998 	bl	8002c74 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e17b      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	4b36      	ldr	r3, [pc, #216]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d030      	beq.n	80049cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_RCC_OscConfig+0x2b4>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fe f97c 	bl	8002c74 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004980:	f7fe f978 	bl	8002c74 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e15b      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	4b26      	ldr	r3, [pc, #152]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 8004994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x200>
 800499e:	e015      	b.n	80049cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCC_OscConfig+0x2b4>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a6:	f7fe f965 	bl	8002c74 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ae:	f7fe f961 	bl	8002c74 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e144      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80049c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80a0 	beq.w	8004b1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049da:	2300      	movs	r3, #0
 80049dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6413      	str	r3, [r2, #64]	; 0x40
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a06:	2301      	movs	r3, #1
 8004a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_OscConfig+0x2b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d121      	bne.n	8004a5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a16:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_RCC_OscConfig+0x2b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a07      	ldr	r2, [pc, #28]	; (8004a38 <HAL_RCC_OscConfig+0x2b8>)
 8004a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a22:	f7fe f927 	bl	8002c74 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a28:	e011      	b.n	8004a4e <HAL_RCC_OscConfig+0x2ce>
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	42470000 	.word	0x42470000
 8004a34:	42470e80 	.word	0x42470e80
 8004a38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3c:	f7fe f91a 	bl	8002c74 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0fd      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4e:	4b81      	ldr	r3, [pc, #516]	; (8004c54 <HAL_RCC_OscConfig+0x4d4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d106      	bne.n	8004a70 <HAL_RCC_OscConfig+0x2f0>
 8004a62:	4b7d      	ldr	r3, [pc, #500]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	4a7c      	ldr	r2, [pc, #496]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6e:	e01c      	b.n	8004aaa <HAL_RCC_OscConfig+0x32a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b05      	cmp	r3, #5
 8004a76:	d10c      	bne.n	8004a92 <HAL_RCC_OscConfig+0x312>
 8004a78:	4b77      	ldr	r3, [pc, #476]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	4a76      	ldr	r2, [pc, #472]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004a7e:	f043 0304 	orr.w	r3, r3, #4
 8004a82:	6713      	str	r3, [r2, #112]	; 0x70
 8004a84:	4b74      	ldr	r3, [pc, #464]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	4a73      	ldr	r2, [pc, #460]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a90:	e00b      	b.n	8004aaa <HAL_RCC_OscConfig+0x32a>
 8004a92:	4b71      	ldr	r3, [pc, #452]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	4a70      	ldr	r2, [pc, #448]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9e:	4b6e      	ldr	r3, [pc, #440]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4a6d      	ldr	r2, [pc, #436]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004aa4:	f023 0304 	bic.w	r3, r3, #4
 8004aa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d015      	beq.n	8004ade <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab2:	f7fe f8df 	bl	8002c74 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fe f8db 	bl	8002c74 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e0bc      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad0:	4b61      	ldr	r3, [pc, #388]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ee      	beq.n	8004aba <HAL_RCC_OscConfig+0x33a>
 8004adc:	e014      	b.n	8004b08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ade:	f7fe f8c9 	bl	8002c74 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae4:	e00a      	b.n	8004afc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae6:	f7fe f8c5 	bl	8002c74 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e0a6      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afc:	4b56      	ldr	r3, [pc, #344]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ee      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d105      	bne.n	8004b1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b0e:	4b52      	ldr	r3, [pc, #328]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	4a51      	ldr	r2, [pc, #324]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 8092 	beq.w	8004c48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b24:	4b4c      	ldr	r3, [pc, #304]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d05c      	beq.n	8004bea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d141      	bne.n	8004bbc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b38:	4b48      	ldr	r3, [pc, #288]	; (8004c5c <HAL_RCC_OscConfig+0x4dc>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3e:	f7fe f899 	bl	8002c74 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b46:	f7fe f895 	bl	8002c74 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e078      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b58:	4b3f      	ldr	r3, [pc, #252]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	019b      	lsls	r3, r3, #6
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	061b      	lsls	r3, r3, #24
 8004b88:	4933      	ldr	r1, [pc, #204]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b8e:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <HAL_RCC_OscConfig+0x4dc>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b94:	f7fe f86e 	bl	8002c74 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b9c:	f7fe f86a 	bl	8002c74 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e04d      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bae:	4b2a      	ldr	r3, [pc, #168]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0x41c>
 8004bba:	e045      	b.n	8004c48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b27      	ldr	r3, [pc, #156]	; (8004c5c <HAL_RCC_OscConfig+0x4dc>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fe f857 	bl	8002c74 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fe f853 	bl	8002c74 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e036      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bdc:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x44a>
 8004be8:	e02e      	b.n	8004c48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e029      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bf6:	4b18      	ldr	r3, [pc, #96]	; (8004c58 <HAL_RCC_OscConfig+0x4d8>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d11c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d115      	bne.n	8004c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c1e:	4013      	ands	r3, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d10d      	bne.n	8004c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d106      	bne.n	8004c44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40007000 	.word	0x40007000
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	42470060 	.word	0x42470060

08004c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0cc      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c74:	4b68      	ldr	r3, [pc, #416]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d90c      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b65      	ldr	r3, [pc, #404]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8a:	4b63      	ldr	r3, [pc, #396]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d001      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0b8      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d020      	beq.n	8004cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cb4:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ccc:	4b53      	ldr	r3, [pc, #332]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a52      	ldr	r2, [pc, #328]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd8:	4b50      	ldr	r3, [pc, #320]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	494d      	ldr	r1, [pc, #308]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d044      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b47      	ldr	r3, [pc, #284]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d119      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e07f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d003      	beq.n	8004d1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e06f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2e:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e067      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3e:	4b37      	ldr	r3, [pc, #220]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f023 0203 	bic.w	r2, r3, #3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4934      	ldr	r1, [pc, #208]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d50:	f7fd ff90 	bl	8002c74 <HAL_GetTick>
 8004d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d58:	f7fd ff8c 	bl	8002c74 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e04f      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 020c 	and.w	r2, r3, #12
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d1eb      	bne.n	8004d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d20c      	bcs.n	8004da8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b22      	ldr	r3, [pc, #136]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e032      	b.n	8004e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4916      	ldr	r1, [pc, #88]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	490e      	ldr	r1, [pc, #56]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004de6:	f000 f821 	bl	8004e2c <HAL_RCC_GetSysClockFreq>
 8004dea:	4601      	mov	r1, r0
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <HAL_RCC_ClockConfig+0x1c0>)
 8004df8:	5cd3      	ldrb	r3, [r2, r3]
 8004dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <HAL_RCC_ClockConfig+0x1c4>)
 8004e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e02:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_RCC_ClockConfig+0x1c8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fd fef0 	bl	8002bec <HAL_InitTick>

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40023c00 	.word	0x40023c00
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	0800b1cc 	.word	0x0800b1cc
 8004e24:	20000008 	.word	0x20000008
 8004e28:	2000000c 	.word	0x2000000c

08004e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e42:	4b63      	ldr	r3, [pc, #396]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 030c 	and.w	r3, r3, #12
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d007      	beq.n	8004e5e <HAL_RCC_GetSysClockFreq+0x32>
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d008      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x38>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f040 80b4 	bne.w	8004fc0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b5e      	ldr	r3, [pc, #376]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e5a:	60bb      	str	r3, [r7, #8]
       break;
 8004e5c:	e0b3      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e5e:	4b5e      	ldr	r3, [pc, #376]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004e60:	60bb      	str	r3, [r7, #8]
      break;
 8004e62:	e0b0      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e64:	4b5a      	ldr	r3, [pc, #360]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e6e:	4b58      	ldr	r3, [pc, #352]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d04a      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7a:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	f04f 0400 	mov.w	r4, #0
 8004e84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	ea03 0501 	and.w	r5, r3, r1
 8004e90:	ea04 0602 	and.w	r6, r4, r2
 8004e94:	4629      	mov	r1, r5
 8004e96:	4632      	mov	r2, r6
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	f04f 0400 	mov.w	r4, #0
 8004ea0:	0154      	lsls	r4, r2, #5
 8004ea2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ea6:	014b      	lsls	r3, r1, #5
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4622      	mov	r2, r4
 8004eac:	1b49      	subs	r1, r1, r5
 8004eae:	eb62 0206 	sbc.w	r2, r2, r6
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	f04f 0400 	mov.w	r4, #0
 8004eba:	0194      	lsls	r4, r2, #6
 8004ebc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ec0:	018b      	lsls	r3, r1, #6
 8004ec2:	1a5b      	subs	r3, r3, r1
 8004ec4:	eb64 0402 	sbc.w	r4, r4, r2
 8004ec8:	f04f 0100 	mov.w	r1, #0
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	00e2      	lsls	r2, r4, #3
 8004ed2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ed6:	00d9      	lsls	r1, r3, #3
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4614      	mov	r4, r2
 8004edc:	195b      	adds	r3, r3, r5
 8004ede:	eb44 0406 	adc.w	r4, r4, r6
 8004ee2:	f04f 0100 	mov.w	r1, #0
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	0262      	lsls	r2, r4, #9
 8004eec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ef0:	0259      	lsls	r1, r3, #9
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	4621      	mov	r1, r4
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f04f 0400 	mov.w	r4, #0
 8004f00:	461a      	mov	r2, r3
 8004f02:	4623      	mov	r3, r4
 8004f04:	f7fb fec0 	bl	8000c88 <__aeabi_uldivmod>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e049      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f10:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	099b      	lsrs	r3, r3, #6
 8004f16:	f04f 0400 	mov.w	r4, #0
 8004f1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	ea03 0501 	and.w	r5, r3, r1
 8004f26:	ea04 0602 	and.w	r6, r4, r2
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	f04f 0400 	mov.w	r4, #0
 8004f36:	0154      	lsls	r4, r2, #5
 8004f38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f3c:	014b      	lsls	r3, r1, #5
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4622      	mov	r2, r4
 8004f42:	1b49      	subs	r1, r1, r5
 8004f44:	eb62 0206 	sbc.w	r2, r2, r6
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	f04f 0400 	mov.w	r4, #0
 8004f50:	0194      	lsls	r4, r2, #6
 8004f52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f56:	018b      	lsls	r3, r1, #6
 8004f58:	1a5b      	subs	r3, r3, r1
 8004f5a:	eb64 0402 	sbc.w	r4, r4, r2
 8004f5e:	f04f 0100 	mov.w	r1, #0
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	00e2      	lsls	r2, r4, #3
 8004f68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f6c:	00d9      	lsls	r1, r3, #3
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4614      	mov	r4, r2
 8004f72:	195b      	adds	r3, r3, r5
 8004f74:	eb44 0406 	adc.w	r4, r4, r6
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	02a2      	lsls	r2, r4, #10
 8004f82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f86:	0299      	lsls	r1, r3, #10
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	4621      	mov	r1, r4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	461a      	mov	r2, r3
 8004f98:	4623      	mov	r3, r4
 8004f9a:	f7fb fe75 	bl	8000c88 <__aeabi_uldivmod>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	60bb      	str	r3, [r7, #8]
      break;
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004fc2:	60bb      	str	r3, [r7, #8]
      break;
 8004fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	00f42400 	.word	0x00f42400
 8004fd8:	007a1200 	.word	0x007a1200

08004fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000008 	.word	0x20000008

08004ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ff8:	f7ff fff0 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8004ffc:	4601      	mov	r1, r0
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	0a9b      	lsrs	r3, r3, #10
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4a03      	ldr	r2, [pc, #12]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800500a:	5cd3      	ldrb	r3, [r2, r3]
 800500c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40023800 	.word	0x40023800
 8005018:	0800b1dc 	.word	0x0800b1dc

0800501c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e01d      	b.n	800506a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fd fcd0 	bl	80029e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f000 fa40 	bl	80054e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b06      	cmp	r3, #6
 800509a:	d007      	beq.n	80050ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6a1a      	ldr	r2, [r3, #32]
 80050d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10f      	bne.n	8005102 <HAL_TIM_Base_Stop_IT+0x48>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a1a      	ldr	r2, [r3, #32]
 80050e8:	f240 4344 	movw	r3, #1092	; 0x444
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d107      	bne.n	8005102 <HAL_TIM_Base_Stop_IT+0x48>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0202 	mvn.w	r2, #2
 800513c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9a5 	bl	80054a2 <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f997 	bl	800548e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f9a8 	bl	80054b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b04      	cmp	r3, #4
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0204 	mvn.w	r2, #4
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f97b 	bl	80054a2 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f96d 	bl	800548e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f97e 	bl	80054b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0208 	mvn.w	r2, #8
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2204      	movs	r2, #4
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f951 	bl	80054a2 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f943 	bl	800548e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f954 	bl	80054b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b10      	cmp	r3, #16
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b10      	cmp	r3, #16
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0210 	mvn.w	r2, #16
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2208      	movs	r2, #8
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f927 	bl	80054a2 <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f919 	bl	800548e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f92a 	bl	80054b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0201 	mvn.w	r2, #1
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fc faf8 	bl	8001884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	2b80      	cmp	r3, #128	; 0x80
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fad0 	bl	8005860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d10e      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d107      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8ef 	bl	80054ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d10e      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b20      	cmp	r3, #32
 8005306:	d107      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0220 	mvn.w	r2, #32
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fa9a 	bl	800584c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_TIM_ConfigClockSource+0x18>
 8005334:	2302      	movs	r3, #2
 8005336:	e0a6      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x166>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005356:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d067      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x120>
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d80b      	bhi.n	800538c <HAL_TIM_ConfigClockSource+0x6c>
 8005374:	2b10      	cmp	r3, #16
 8005376:	d073      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0x140>
 8005378:	2b10      	cmp	r3, #16
 800537a:	d802      	bhi.n	8005382 <HAL_TIM_ConfigClockSource+0x62>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d06f      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005380:	e078      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005382:	2b20      	cmp	r3, #32
 8005384:	d06c      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0x140>
 8005386:	2b30      	cmp	r3, #48	; 0x30
 8005388:	d06a      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800538a:	e073      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800538c:	2b70      	cmp	r3, #112	; 0x70
 800538e:	d00d      	beq.n	80053ac <HAL_TIM_ConfigClockSource+0x8c>
 8005390:	2b70      	cmp	r3, #112	; 0x70
 8005392:	d804      	bhi.n	800539e <HAL_TIM_ConfigClockSource+0x7e>
 8005394:	2b50      	cmp	r3, #80	; 0x50
 8005396:	d033      	beq.n	8005400 <HAL_TIM_ConfigClockSource+0xe0>
 8005398:	2b60      	cmp	r3, #96	; 0x60
 800539a:	d041      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800539c:	e06a      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800539e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a2:	d066      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x152>
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d017      	beq.n	80053da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053aa:	e063      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	6899      	ldr	r1, [r3, #8]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f000 f9aa 	bl	8005714 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	609a      	str	r2, [r3, #8]
      break;
 80053d8:	e04c      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f000 f993 	bl	8005714 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fc:	609a      	str	r2, [r3, #8]
      break;
 80053fe:	e039      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6859      	ldr	r1, [r3, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	461a      	mov	r2, r3
 800540e:	f000 f907 	bl	8005620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2150      	movs	r1, #80	; 0x50
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f960 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 800541e:	e029      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	461a      	mov	r2, r3
 800542e:	f000 f926 	bl	800567e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2160      	movs	r1, #96	; 0x60
 8005438:	4618      	mov	r0, r3
 800543a:	f000 f950 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 800543e:	e019      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	461a      	mov	r2, r3
 800544e:	f000 f8e7 	bl	8005620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2140      	movs	r1, #64	; 0x40
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f940 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 800545e:	e009      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 f937 	bl	80056de <TIM_ITRx_SetConfig>
      break;
 8005470:	e000      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a40      	ldr	r2, [pc, #256]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fe:	d00f      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a3d      	ldr	r2, [pc, #244]	; (80055f8 <TIM_Base_SetConfig+0x118>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a3c      	ldr	r2, [pc, #240]	; (80055fc <TIM_Base_SetConfig+0x11c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a3b      	ldr	r2, [pc, #236]	; (8005600 <TIM_Base_SetConfig+0x120>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a3a      	ldr	r2, [pc, #232]	; (8005604 <TIM_Base_SetConfig+0x124>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d108      	bne.n	8005532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a2f      	ldr	r2, [pc, #188]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005540:	d027      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2c      	ldr	r2, [pc, #176]	; (80055f8 <TIM_Base_SetConfig+0x118>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d023      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2b      	ldr	r2, [pc, #172]	; (80055fc <TIM_Base_SetConfig+0x11c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01f      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <TIM_Base_SetConfig+0x120>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a29      	ldr	r2, [pc, #164]	; (8005604 <TIM_Base_SetConfig+0x124>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d017      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a28      	ldr	r2, [pc, #160]	; (8005608 <TIM_Base_SetConfig+0x128>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a27      	ldr	r2, [pc, #156]	; (800560c <TIM_Base_SetConfig+0x12c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00f      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a26      	ldr	r2, [pc, #152]	; (8005610 <TIM_Base_SetConfig+0x130>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00b      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a25      	ldr	r2, [pc, #148]	; (8005614 <TIM_Base_SetConfig+0x134>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d007      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a24      	ldr	r2, [pc, #144]	; (8005618 <TIM_Base_SetConfig+0x138>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a23      	ldr	r2, [pc, #140]	; (800561c <TIM_Base_SetConfig+0x13c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <TIM_Base_SetConfig+0x114>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d003      	beq.n	80055d8 <TIM_Base_SetConfig+0xf8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <TIM_Base_SetConfig+0x124>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d103      	bne.n	80055e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	615a      	str	r2, [r3, #20]
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40010400 	.word	0x40010400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800
 8005614:	40001800 	.word	0x40001800
 8005618:	40001c00 	.word	0x40001c00
 800561c:	40002000 	.word	0x40002000

08005620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f023 0201 	bic.w	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 030a 	bic.w	r3, r3, #10
 800565c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800567e:	b480      	push	{r7}
 8005680:	b087      	sub	sp, #28
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	f023 0210 	bic.w	r2, r3, #16
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	031b      	lsls	r3, r3, #12
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f043 0307 	orr.w	r3, r3, #7
 8005700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	bf00      	nop
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800572e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	021a      	lsls	r2, r3, #8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	431a      	orrs	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	609a      	str	r2, [r3, #8]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005768:	2302      	movs	r3, #2
 800576a:	e05a      	b.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a21      	ldr	r2, [pc, #132]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d022      	beq.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b8:	d01d      	beq.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d018      	beq.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1a      	ldr	r2, [pc, #104]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00e      	beq.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a18      	ldr	r2, [pc, #96]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d009      	beq.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a17      	ldr	r2, [pc, #92]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d004      	beq.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a15      	ldr	r2, [pc, #84]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d10c      	bne.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	4313      	orrs	r3, r2
 8005806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40010400 	.word	0x40010400
 8005844:	40014000 	.word	0x40014000
 8005848:	40001800 	.word	0x40001800

0800584c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <__errno>:
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <__errno+0x8>)
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000014 	.word	0x20000014

08005880 <__libc_init_array>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4e0d      	ldr	r6, [pc, #52]	; (80058b8 <__libc_init_array+0x38>)
 8005884:	4c0d      	ldr	r4, [pc, #52]	; (80058bc <__libc_init_array+0x3c>)
 8005886:	1ba4      	subs	r4, r4, r6
 8005888:	10a4      	asrs	r4, r4, #2
 800588a:	2500      	movs	r5, #0
 800588c:	42a5      	cmp	r5, r4
 800588e:	d109      	bne.n	80058a4 <__libc_init_array+0x24>
 8005890:	4e0b      	ldr	r6, [pc, #44]	; (80058c0 <__libc_init_array+0x40>)
 8005892:	4c0c      	ldr	r4, [pc, #48]	; (80058c4 <__libc_init_array+0x44>)
 8005894:	f004 fdae 	bl	800a3f4 <_init>
 8005898:	1ba4      	subs	r4, r4, r6
 800589a:	10a4      	asrs	r4, r4, #2
 800589c:	2500      	movs	r5, #0
 800589e:	42a5      	cmp	r5, r4
 80058a0:	d105      	bne.n	80058ae <__libc_init_array+0x2e>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058a8:	4798      	blx	r3
 80058aa:	3501      	adds	r5, #1
 80058ac:	e7ee      	b.n	800588c <__libc_init_array+0xc>
 80058ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058b2:	4798      	blx	r3
 80058b4:	3501      	adds	r5, #1
 80058b6:	e7f2      	b.n	800589e <__libc_init_array+0x1e>
 80058b8:	0800b4e8 	.word	0x0800b4e8
 80058bc:	0800b4e8 	.word	0x0800b4e8
 80058c0:	0800b4e8 	.word	0x0800b4e8
 80058c4:	0800b4ec 	.word	0x0800b4ec

080058c8 <memset>:
 80058c8:	4402      	add	r2, r0
 80058ca:	4603      	mov	r3, r0
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d100      	bne.n	80058d2 <memset+0xa>
 80058d0:	4770      	bx	lr
 80058d2:	f803 1b01 	strb.w	r1, [r3], #1
 80058d6:	e7f9      	b.n	80058cc <memset+0x4>

080058d8 <__cvt>:
 80058d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058dc:	ec55 4b10 	vmov	r4, r5, d0
 80058e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80058e2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	460e      	mov	r6, r1
 80058ea:	4691      	mov	r9, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	bfb8      	it	lt
 80058f0:	4622      	movlt	r2, r4
 80058f2:	462b      	mov	r3, r5
 80058f4:	f027 0720 	bic.w	r7, r7, #32
 80058f8:	bfbb      	ittet	lt
 80058fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058fe:	461d      	movlt	r5, r3
 8005900:	2300      	movge	r3, #0
 8005902:	232d      	movlt	r3, #45	; 0x2d
 8005904:	bfb8      	it	lt
 8005906:	4614      	movlt	r4, r2
 8005908:	2f46      	cmp	r7, #70	; 0x46
 800590a:	700b      	strb	r3, [r1, #0]
 800590c:	d004      	beq.n	8005918 <__cvt+0x40>
 800590e:	2f45      	cmp	r7, #69	; 0x45
 8005910:	d100      	bne.n	8005914 <__cvt+0x3c>
 8005912:	3601      	adds	r6, #1
 8005914:	2102      	movs	r1, #2
 8005916:	e000      	b.n	800591a <__cvt+0x42>
 8005918:	2103      	movs	r1, #3
 800591a:	ab03      	add	r3, sp, #12
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	ab02      	add	r3, sp, #8
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	4632      	mov	r2, r6
 8005924:	4653      	mov	r3, sl
 8005926:	ec45 4b10 	vmov	d0, r4, r5
 800592a:	f001 fd75 	bl	8007418 <_dtoa_r>
 800592e:	2f47      	cmp	r7, #71	; 0x47
 8005930:	4680      	mov	r8, r0
 8005932:	d102      	bne.n	800593a <__cvt+0x62>
 8005934:	f019 0f01 	tst.w	r9, #1
 8005938:	d026      	beq.n	8005988 <__cvt+0xb0>
 800593a:	2f46      	cmp	r7, #70	; 0x46
 800593c:	eb08 0906 	add.w	r9, r8, r6
 8005940:	d111      	bne.n	8005966 <__cvt+0x8e>
 8005942:	f898 3000 	ldrb.w	r3, [r8]
 8005946:	2b30      	cmp	r3, #48	; 0x30
 8005948:	d10a      	bne.n	8005960 <__cvt+0x88>
 800594a:	2200      	movs	r2, #0
 800594c:	2300      	movs	r3, #0
 800594e:	4620      	mov	r0, r4
 8005950:	4629      	mov	r1, r5
 8005952:	f7fb f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005956:	b918      	cbnz	r0, 8005960 <__cvt+0x88>
 8005958:	f1c6 0601 	rsb	r6, r6, #1
 800595c:	f8ca 6000 	str.w	r6, [sl]
 8005960:	f8da 3000 	ldr.w	r3, [sl]
 8005964:	4499      	add	r9, r3
 8005966:	2200      	movs	r2, #0
 8005968:	2300      	movs	r3, #0
 800596a:	4620      	mov	r0, r4
 800596c:	4629      	mov	r1, r5
 800596e:	f7fb f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005972:	b938      	cbnz	r0, 8005984 <__cvt+0xac>
 8005974:	2230      	movs	r2, #48	; 0x30
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	454b      	cmp	r3, r9
 800597a:	d205      	bcs.n	8005988 <__cvt+0xb0>
 800597c:	1c59      	adds	r1, r3, #1
 800597e:	9103      	str	r1, [sp, #12]
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e7f8      	b.n	8005976 <__cvt+0x9e>
 8005984:	f8cd 900c 	str.w	r9, [sp, #12]
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800598c:	eba3 0308 	sub.w	r3, r3, r8
 8005990:	4640      	mov	r0, r8
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	b004      	add	sp, #16
 8005996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800599a <__exponent>:
 800599a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800599c:	2900      	cmp	r1, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	bfba      	itte	lt
 80059a2:	4249      	neglt	r1, r1
 80059a4:	232d      	movlt	r3, #45	; 0x2d
 80059a6:	232b      	movge	r3, #43	; 0x2b
 80059a8:	2909      	cmp	r1, #9
 80059aa:	f804 2b02 	strb.w	r2, [r4], #2
 80059ae:	7043      	strb	r3, [r0, #1]
 80059b0:	dd20      	ble.n	80059f4 <__exponent+0x5a>
 80059b2:	f10d 0307 	add.w	r3, sp, #7
 80059b6:	461f      	mov	r7, r3
 80059b8:	260a      	movs	r6, #10
 80059ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80059be:	fb06 1115 	mls	r1, r6, r5, r1
 80059c2:	3130      	adds	r1, #48	; 0x30
 80059c4:	2d09      	cmp	r5, #9
 80059c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80059ca:	f103 32ff 	add.w	r2, r3, #4294967295
 80059ce:	4629      	mov	r1, r5
 80059d0:	dc09      	bgt.n	80059e6 <__exponent+0x4c>
 80059d2:	3130      	adds	r1, #48	; 0x30
 80059d4:	3b02      	subs	r3, #2
 80059d6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80059da:	42bb      	cmp	r3, r7
 80059dc:	4622      	mov	r2, r4
 80059de:	d304      	bcc.n	80059ea <__exponent+0x50>
 80059e0:	1a10      	subs	r0, r2, r0
 80059e2:	b003      	add	sp, #12
 80059e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e6:	4613      	mov	r3, r2
 80059e8:	e7e7      	b.n	80059ba <__exponent+0x20>
 80059ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059ee:	f804 2b01 	strb.w	r2, [r4], #1
 80059f2:	e7f2      	b.n	80059da <__exponent+0x40>
 80059f4:	2330      	movs	r3, #48	; 0x30
 80059f6:	4419      	add	r1, r3
 80059f8:	7083      	strb	r3, [r0, #2]
 80059fa:	1d02      	adds	r2, r0, #4
 80059fc:	70c1      	strb	r1, [r0, #3]
 80059fe:	e7ef      	b.n	80059e0 <__exponent+0x46>

08005a00 <_printf_float>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	b08d      	sub	sp, #52	; 0x34
 8005a06:	460c      	mov	r4, r1
 8005a08:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	461f      	mov	r7, r3
 8005a10:	4605      	mov	r5, r0
 8005a12:	f002 fde5 	bl	80085e0 <_localeconv_r>
 8005a16:	6803      	ldr	r3, [r0, #0]
 8005a18:	9304      	str	r3, [sp, #16]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fa fbd8 	bl	80001d0 <strlen>
 8005a20:	2300      	movs	r3, #0
 8005a22:	930a      	str	r3, [sp, #40]	; 0x28
 8005a24:	f8d8 3000 	ldr.w	r3, [r8]
 8005a28:	9005      	str	r0, [sp, #20]
 8005a2a:	3307      	adds	r3, #7
 8005a2c:	f023 0307 	bic.w	r3, r3, #7
 8005a30:	f103 0208 	add.w	r2, r3, #8
 8005a34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a38:	f8d4 b000 	ldr.w	fp, [r4]
 8005a3c:	f8c8 2000 	str.w	r2, [r8]
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a48:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a4c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a50:	9307      	str	r3, [sp, #28]
 8005a52:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	4ba7      	ldr	r3, [pc, #668]	; (8005cf8 <_printf_float+0x2f8>)
 8005a5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a60:	f7fb f864 	bl	8000b2c <__aeabi_dcmpun>
 8005a64:	bb70      	cbnz	r0, 8005ac4 <_printf_float+0xc4>
 8005a66:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6a:	4ba3      	ldr	r3, [pc, #652]	; (8005cf8 <_printf_float+0x2f8>)
 8005a6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a70:	f7fb f83e 	bl	8000af0 <__aeabi_dcmple>
 8005a74:	bb30      	cbnz	r0, 8005ac4 <_printf_float+0xc4>
 8005a76:	2200      	movs	r2, #0
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	f7fb f82d 	bl	8000adc <__aeabi_dcmplt>
 8005a82:	b110      	cbz	r0, 8005a8a <_printf_float+0x8a>
 8005a84:	232d      	movs	r3, #45	; 0x2d
 8005a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a8a:	4a9c      	ldr	r2, [pc, #624]	; (8005cfc <_printf_float+0x2fc>)
 8005a8c:	4b9c      	ldr	r3, [pc, #624]	; (8005d00 <_printf_float+0x300>)
 8005a8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005a92:	bf8c      	ite	hi
 8005a94:	4690      	movhi	r8, r2
 8005a96:	4698      	movls	r8, r3
 8005a98:	2303      	movs	r3, #3
 8005a9a:	f02b 0204 	bic.w	r2, fp, #4
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	6022      	str	r2, [r4, #0]
 8005aa2:	f04f 0900 	mov.w	r9, #0
 8005aa6:	9700      	str	r7, [sp, #0]
 8005aa8:	4633      	mov	r3, r6
 8005aaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8005aac:	4621      	mov	r1, r4
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 f9e6 	bl	8005e80 <_printf_common>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f040 808d 	bne.w	8005bd4 <_printf_float+0x1d4>
 8005aba:	f04f 30ff 	mov.w	r0, #4294967295
 8005abe:	b00d      	add	sp, #52	; 0x34
 8005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	4649      	mov	r1, r9
 8005acc:	f7fb f82e 	bl	8000b2c <__aeabi_dcmpun>
 8005ad0:	b110      	cbz	r0, 8005ad8 <_printf_float+0xd8>
 8005ad2:	4a8c      	ldr	r2, [pc, #560]	; (8005d04 <_printf_float+0x304>)
 8005ad4:	4b8c      	ldr	r3, [pc, #560]	; (8005d08 <_printf_float+0x308>)
 8005ad6:	e7da      	b.n	8005a8e <_printf_float+0x8e>
 8005ad8:	6861      	ldr	r1, [r4, #4]
 8005ada:	1c4b      	adds	r3, r1, #1
 8005adc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005ae0:	a80a      	add	r0, sp, #40	; 0x28
 8005ae2:	d13e      	bne.n	8005b62 <_printf_float+0x162>
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	6063      	str	r3, [r4, #4]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005aee:	ab09      	add	r3, sp, #36	; 0x24
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	ec49 8b10 	vmov	d0, r8, r9
 8005af6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005afa:	6022      	str	r2, [r4, #0]
 8005afc:	f8cd a004 	str.w	sl, [sp, #4]
 8005b00:	6861      	ldr	r1, [r4, #4]
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7ff fee8 	bl	80058d8 <__cvt>
 8005b08:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005b0c:	2b47      	cmp	r3, #71	; 0x47
 8005b0e:	4680      	mov	r8, r0
 8005b10:	d109      	bne.n	8005b26 <_printf_float+0x126>
 8005b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b14:	1cd8      	adds	r0, r3, #3
 8005b16:	db02      	blt.n	8005b1e <_printf_float+0x11e>
 8005b18:	6862      	ldr	r2, [r4, #4]
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	dd47      	ble.n	8005bae <_printf_float+0x1ae>
 8005b1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b22:	fa5f fa8a 	uxtb.w	sl, sl
 8005b26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b2c:	d824      	bhi.n	8005b78 <_printf_float+0x178>
 8005b2e:	3901      	subs	r1, #1
 8005b30:	4652      	mov	r2, sl
 8005b32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b36:	9109      	str	r1, [sp, #36]	; 0x24
 8005b38:	f7ff ff2f 	bl	800599a <__exponent>
 8005b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b3e:	1813      	adds	r3, r2, r0
 8005b40:	2a01      	cmp	r2, #1
 8005b42:	4681      	mov	r9, r0
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	dc02      	bgt.n	8005b4e <_printf_float+0x14e>
 8005b48:	6822      	ldr	r2, [r4, #0]
 8005b4a:	07d1      	lsls	r1, r2, #31
 8005b4c:	d501      	bpl.n	8005b52 <_printf_float+0x152>
 8005b4e:	3301      	adds	r3, #1
 8005b50:	6123      	str	r3, [r4, #16]
 8005b52:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0a5      	beq.n	8005aa6 <_printf_float+0xa6>
 8005b5a:	232d      	movs	r3, #45	; 0x2d
 8005b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b60:	e7a1      	b.n	8005aa6 <_printf_float+0xa6>
 8005b62:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005b66:	f000 8177 	beq.w	8005e58 <_printf_float+0x458>
 8005b6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005b6e:	d1bb      	bne.n	8005ae8 <_printf_float+0xe8>
 8005b70:	2900      	cmp	r1, #0
 8005b72:	d1b9      	bne.n	8005ae8 <_printf_float+0xe8>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e7b6      	b.n	8005ae6 <_printf_float+0xe6>
 8005b78:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005b7c:	d119      	bne.n	8005bb2 <_printf_float+0x1b2>
 8005b7e:	2900      	cmp	r1, #0
 8005b80:	6863      	ldr	r3, [r4, #4]
 8005b82:	dd0c      	ble.n	8005b9e <_printf_float+0x19e>
 8005b84:	6121      	str	r1, [r4, #16]
 8005b86:	b913      	cbnz	r3, 8005b8e <_printf_float+0x18e>
 8005b88:	6822      	ldr	r2, [r4, #0]
 8005b8a:	07d2      	lsls	r2, r2, #31
 8005b8c:	d502      	bpl.n	8005b94 <_printf_float+0x194>
 8005b8e:	3301      	adds	r3, #1
 8005b90:	440b      	add	r3, r1
 8005b92:	6123      	str	r3, [r4, #16]
 8005b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b96:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b98:	f04f 0900 	mov.w	r9, #0
 8005b9c:	e7d9      	b.n	8005b52 <_printf_float+0x152>
 8005b9e:	b913      	cbnz	r3, 8005ba6 <_printf_float+0x1a6>
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	07d0      	lsls	r0, r2, #31
 8005ba4:	d501      	bpl.n	8005baa <_printf_float+0x1aa>
 8005ba6:	3302      	adds	r3, #2
 8005ba8:	e7f3      	b.n	8005b92 <_printf_float+0x192>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e7f1      	b.n	8005b92 <_printf_float+0x192>
 8005bae:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005bb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	db05      	blt.n	8005bc6 <_printf_float+0x1c6>
 8005bba:	6822      	ldr	r2, [r4, #0]
 8005bbc:	6123      	str	r3, [r4, #16]
 8005bbe:	07d1      	lsls	r1, r2, #31
 8005bc0:	d5e8      	bpl.n	8005b94 <_printf_float+0x194>
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	e7e5      	b.n	8005b92 <_printf_float+0x192>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bfd4      	ite	le
 8005bca:	f1c3 0302 	rsble	r3, r3, #2
 8005bce:	2301      	movgt	r3, #1
 8005bd0:	4413      	add	r3, r2
 8005bd2:	e7de      	b.n	8005b92 <_printf_float+0x192>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	055a      	lsls	r2, r3, #21
 8005bd8:	d407      	bmi.n	8005bea <_printf_float+0x1ea>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	4642      	mov	r2, r8
 8005bde:	4631      	mov	r1, r6
 8005be0:	4628      	mov	r0, r5
 8005be2:	47b8      	blx	r7
 8005be4:	3001      	adds	r0, #1
 8005be6:	d12b      	bne.n	8005c40 <_printf_float+0x240>
 8005be8:	e767      	b.n	8005aba <_printf_float+0xba>
 8005bea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005bee:	f240 80dc 	bls.w	8005daa <_printf_float+0x3aa>
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bfa:	f7fa ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d033      	beq.n	8005c6a <_printf_float+0x26a>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4a41      	ldr	r2, [pc, #260]	; (8005d0c <_printf_float+0x30c>)
 8005c06:	4631      	mov	r1, r6
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b8      	blx	r7
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	f43f af54 	beq.w	8005aba <_printf_float+0xba>
 8005c12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c16:	429a      	cmp	r2, r3
 8005c18:	db02      	blt.n	8005c20 <_printf_float+0x220>
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	07d8      	lsls	r0, r3, #31
 8005c1e:	d50f      	bpl.n	8005c40 <_printf_float+0x240>
 8005c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	47b8      	blx	r7
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f43f af45 	beq.w	8005aba <_printf_float+0xba>
 8005c30:	f04f 0800 	mov.w	r8, #0
 8005c34:	f104 091a 	add.w	r9, r4, #26
 8005c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	4543      	cmp	r3, r8
 8005c3e:	dc09      	bgt.n	8005c54 <_printf_float+0x254>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	079b      	lsls	r3, r3, #30
 8005c44:	f100 8103 	bmi.w	8005e4e <_printf_float+0x44e>
 8005c48:	68e0      	ldr	r0, [r4, #12]
 8005c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c4c:	4298      	cmp	r0, r3
 8005c4e:	bfb8      	it	lt
 8005c50:	4618      	movlt	r0, r3
 8005c52:	e734      	b.n	8005abe <_printf_float+0xbe>
 8005c54:	2301      	movs	r3, #1
 8005c56:	464a      	mov	r2, r9
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f af2b 	beq.w	8005aba <_printf_float+0xba>
 8005c64:	f108 0801 	add.w	r8, r8, #1
 8005c68:	e7e6      	b.n	8005c38 <_printf_float+0x238>
 8005c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	dc2b      	bgt.n	8005cc8 <_printf_float+0x2c8>
 8005c70:	2301      	movs	r3, #1
 8005c72:	4a26      	ldr	r2, [pc, #152]	; (8005d0c <_printf_float+0x30c>)
 8005c74:	4631      	mov	r1, r6
 8005c76:	4628      	mov	r0, r5
 8005c78:	47b8      	blx	r7
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	f43f af1d 	beq.w	8005aba <_printf_float+0xba>
 8005c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c82:	b923      	cbnz	r3, 8005c8e <_printf_float+0x28e>
 8005c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c86:	b913      	cbnz	r3, 8005c8e <_printf_float+0x28e>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	07d9      	lsls	r1, r3, #31
 8005c8c:	d5d8      	bpl.n	8005c40 <_printf_float+0x240>
 8005c8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	f43f af0e 	beq.w	8005aba <_printf_float+0xba>
 8005c9e:	f04f 0900 	mov.w	r9, #0
 8005ca2:	f104 0a1a 	add.w	sl, r4, #26
 8005ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca8:	425b      	negs	r3, r3
 8005caa:	454b      	cmp	r3, r9
 8005cac:	dc01      	bgt.n	8005cb2 <_printf_float+0x2b2>
 8005cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb0:	e794      	b.n	8005bdc <_printf_float+0x1dc>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	4652      	mov	r2, sl
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b8      	blx	r7
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	f43f aefc 	beq.w	8005aba <_printf_float+0xba>
 8005cc2:	f109 0901 	add.w	r9, r9, #1
 8005cc6:	e7ee      	b.n	8005ca6 <_printf_float+0x2a6>
 8005cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	bfa8      	it	ge
 8005cd0:	461a      	movge	r2, r3
 8005cd2:	2a00      	cmp	r2, #0
 8005cd4:	4691      	mov	r9, r2
 8005cd6:	dd07      	ble.n	8005ce8 <_printf_float+0x2e8>
 8005cd8:	4613      	mov	r3, r2
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4642      	mov	r2, r8
 8005cde:	4628      	mov	r0, r5
 8005ce0:	47b8      	blx	r7
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	f43f aee9 	beq.w	8005aba <_printf_float+0xba>
 8005ce8:	f104 031a 	add.w	r3, r4, #26
 8005cec:	f04f 0b00 	mov.w	fp, #0
 8005cf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cf4:	9306      	str	r3, [sp, #24]
 8005cf6:	e015      	b.n	8005d24 <_printf_float+0x324>
 8005cf8:	7fefffff 	.word	0x7fefffff
 8005cfc:	0800b1e8 	.word	0x0800b1e8
 8005d00:	0800b1e4 	.word	0x0800b1e4
 8005d04:	0800b1f0 	.word	0x0800b1f0
 8005d08:	0800b1ec 	.word	0x0800b1ec
 8005d0c:	0800b1f4 	.word	0x0800b1f4
 8005d10:	2301      	movs	r3, #1
 8005d12:	9a06      	ldr	r2, [sp, #24]
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f aecd 	beq.w	8005aba <_printf_float+0xba>
 8005d20:	f10b 0b01 	add.w	fp, fp, #1
 8005d24:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d28:	ebaa 0309 	sub.w	r3, sl, r9
 8005d2c:	455b      	cmp	r3, fp
 8005d2e:	dcef      	bgt.n	8005d10 <_printf_float+0x310>
 8005d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d34:	429a      	cmp	r2, r3
 8005d36:	44d0      	add	r8, sl
 8005d38:	db15      	blt.n	8005d66 <_printf_float+0x366>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	07da      	lsls	r2, r3, #31
 8005d3e:	d412      	bmi.n	8005d66 <_printf_float+0x366>
 8005d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d44:	eba3 020a 	sub.w	r2, r3, sl
 8005d48:	eba3 0a01 	sub.w	sl, r3, r1
 8005d4c:	4592      	cmp	sl, r2
 8005d4e:	bfa8      	it	ge
 8005d50:	4692      	movge	sl, r2
 8005d52:	f1ba 0f00 	cmp.w	sl, #0
 8005d56:	dc0e      	bgt.n	8005d76 <_printf_float+0x376>
 8005d58:	f04f 0800 	mov.w	r8, #0
 8005d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d60:	f104 091a 	add.w	r9, r4, #26
 8005d64:	e019      	b.n	8005d9a <_printf_float+0x39a>
 8005d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	d1e5      	bne.n	8005d40 <_printf_float+0x340>
 8005d74:	e6a1      	b.n	8005aba <_printf_float+0xba>
 8005d76:	4653      	mov	r3, sl
 8005d78:	4642      	mov	r2, r8
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b8      	blx	r7
 8005d80:	3001      	adds	r0, #1
 8005d82:	d1e9      	bne.n	8005d58 <_printf_float+0x358>
 8005d84:	e699      	b.n	8005aba <_printf_float+0xba>
 8005d86:	2301      	movs	r3, #1
 8005d88:	464a      	mov	r2, r9
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f ae92 	beq.w	8005aba <_printf_float+0xba>
 8005d96:	f108 0801 	add.w	r8, r8, #1
 8005d9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	eba3 030a 	sub.w	r3, r3, sl
 8005da4:	4543      	cmp	r3, r8
 8005da6:	dcee      	bgt.n	8005d86 <_printf_float+0x386>
 8005da8:	e74a      	b.n	8005c40 <_printf_float+0x240>
 8005daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dac:	2a01      	cmp	r2, #1
 8005dae:	dc01      	bgt.n	8005db4 <_printf_float+0x3b4>
 8005db0:	07db      	lsls	r3, r3, #31
 8005db2:	d53a      	bpl.n	8005e2a <_printf_float+0x42a>
 8005db4:	2301      	movs	r3, #1
 8005db6:	4642      	mov	r2, r8
 8005db8:	4631      	mov	r1, r6
 8005dba:	4628      	mov	r0, r5
 8005dbc:	47b8      	blx	r7
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	f43f ae7b 	beq.w	8005aba <_printf_float+0xba>
 8005dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	f108 0801 	add.w	r8, r8, #1
 8005dd4:	f43f ae71 	beq.w	8005aba <_printf_float+0xba>
 8005dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f103 3aff 	add.w	sl, r3, #4294967295
 8005de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005de4:	2300      	movs	r3, #0
 8005de6:	f7fa fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dea:	b9c8      	cbnz	r0, 8005e20 <_printf_float+0x420>
 8005dec:	4653      	mov	r3, sl
 8005dee:	4642      	mov	r2, r8
 8005df0:	4631      	mov	r1, r6
 8005df2:	4628      	mov	r0, r5
 8005df4:	47b8      	blx	r7
 8005df6:	3001      	adds	r0, #1
 8005df8:	d10e      	bne.n	8005e18 <_printf_float+0x418>
 8005dfa:	e65e      	b.n	8005aba <_printf_float+0xba>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4652      	mov	r2, sl
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	f43f ae57 	beq.w	8005aba <_printf_float+0xba>
 8005e0c:	f108 0801 	add.w	r8, r8, #1
 8005e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e12:	3b01      	subs	r3, #1
 8005e14:	4543      	cmp	r3, r8
 8005e16:	dcf1      	bgt.n	8005dfc <_printf_float+0x3fc>
 8005e18:	464b      	mov	r3, r9
 8005e1a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e1e:	e6de      	b.n	8005bde <_printf_float+0x1de>
 8005e20:	f04f 0800 	mov.w	r8, #0
 8005e24:	f104 0a1a 	add.w	sl, r4, #26
 8005e28:	e7f2      	b.n	8005e10 <_printf_float+0x410>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e7df      	b.n	8005dee <_printf_float+0x3ee>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	464a      	mov	r2, r9
 8005e32:	4631      	mov	r1, r6
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	f43f ae3e 	beq.w	8005aba <_printf_float+0xba>
 8005e3e:	f108 0801 	add.w	r8, r8, #1
 8005e42:	68e3      	ldr	r3, [r4, #12]
 8005e44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	4543      	cmp	r3, r8
 8005e4a:	dcf0      	bgt.n	8005e2e <_printf_float+0x42e>
 8005e4c:	e6fc      	b.n	8005c48 <_printf_float+0x248>
 8005e4e:	f04f 0800 	mov.w	r8, #0
 8005e52:	f104 0919 	add.w	r9, r4, #25
 8005e56:	e7f4      	b.n	8005e42 <_printf_float+0x442>
 8005e58:	2900      	cmp	r1, #0
 8005e5a:	f43f ae8b 	beq.w	8005b74 <_printf_float+0x174>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005e64:	ab09      	add	r3, sp, #36	; 0x24
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	ec49 8b10 	vmov	d0, r8, r9
 8005e6c:	6022      	str	r2, [r4, #0]
 8005e6e:	f8cd a004 	str.w	sl, [sp, #4]
 8005e72:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e76:	4628      	mov	r0, r5
 8005e78:	f7ff fd2e 	bl	80058d8 <__cvt>
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	e648      	b.n	8005b12 <_printf_float+0x112>

08005e80 <_printf_common>:
 8005e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e84:	4691      	mov	r9, r2
 8005e86:	461f      	mov	r7, r3
 8005e88:	688a      	ldr	r2, [r1, #8]
 8005e8a:	690b      	ldr	r3, [r1, #16]
 8005e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	bfb8      	it	lt
 8005e94:	4613      	movlt	r3, r2
 8005e96:	f8c9 3000 	str.w	r3, [r9]
 8005e9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	b112      	cbz	r2, 8005eaa <_printf_common+0x2a>
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	f8c9 3000 	str.w	r3, [r9]
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	0699      	lsls	r1, r3, #26
 8005eae:	bf42      	ittt	mi
 8005eb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005eb4:	3302      	addmi	r3, #2
 8005eb6:	f8c9 3000 	strmi.w	r3, [r9]
 8005eba:	6825      	ldr	r5, [r4, #0]
 8005ebc:	f015 0506 	ands.w	r5, r5, #6
 8005ec0:	d107      	bne.n	8005ed2 <_printf_common+0x52>
 8005ec2:	f104 0a19 	add.w	sl, r4, #25
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8005ecc:	1a9b      	subs	r3, r3, r2
 8005ece:	42ab      	cmp	r3, r5
 8005ed0:	dc28      	bgt.n	8005f24 <_printf_common+0xa4>
 8005ed2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005ed6:	6822      	ldr	r2, [r4, #0]
 8005ed8:	3300      	adds	r3, #0
 8005eda:	bf18      	it	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	0692      	lsls	r2, r2, #26
 8005ee0:	d42d      	bmi.n	8005f3e <_printf_common+0xbe>
 8005ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ee6:	4639      	mov	r1, r7
 8005ee8:	4630      	mov	r0, r6
 8005eea:	47c0      	blx	r8
 8005eec:	3001      	adds	r0, #1
 8005eee:	d020      	beq.n	8005f32 <_printf_common+0xb2>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	68e5      	ldr	r5, [r4, #12]
 8005ef4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ef8:	f003 0306 	and.w	r3, r3, #6
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	bf08      	it	eq
 8005f00:	1aad      	subeq	r5, r5, r2
 8005f02:	68a3      	ldr	r3, [r4, #8]
 8005f04:	6922      	ldr	r2, [r4, #16]
 8005f06:	bf0c      	ite	eq
 8005f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f0c:	2500      	movne	r5, #0
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	bfc4      	itt	gt
 8005f12:	1a9b      	subgt	r3, r3, r2
 8005f14:	18ed      	addgt	r5, r5, r3
 8005f16:	f04f 0900 	mov.w	r9, #0
 8005f1a:	341a      	adds	r4, #26
 8005f1c:	454d      	cmp	r5, r9
 8005f1e:	d11a      	bne.n	8005f56 <_printf_common+0xd6>
 8005f20:	2000      	movs	r0, #0
 8005f22:	e008      	b.n	8005f36 <_printf_common+0xb6>
 8005f24:	2301      	movs	r3, #1
 8005f26:	4652      	mov	r2, sl
 8005f28:	4639      	mov	r1, r7
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	47c0      	blx	r8
 8005f2e:	3001      	adds	r0, #1
 8005f30:	d103      	bne.n	8005f3a <_printf_common+0xba>
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295
 8005f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3a:	3501      	adds	r5, #1
 8005f3c:	e7c3      	b.n	8005ec6 <_printf_common+0x46>
 8005f3e:	18e1      	adds	r1, r4, r3
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	2030      	movs	r0, #48	; 0x30
 8005f44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f48:	4422      	add	r2, r4
 8005f4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f52:	3302      	adds	r3, #2
 8005f54:	e7c5      	b.n	8005ee2 <_printf_common+0x62>
 8005f56:	2301      	movs	r3, #1
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	47c0      	blx	r8
 8005f60:	3001      	adds	r0, #1
 8005f62:	d0e6      	beq.n	8005f32 <_printf_common+0xb2>
 8005f64:	f109 0901 	add.w	r9, r9, #1
 8005f68:	e7d8      	b.n	8005f1c <_printf_common+0x9c>
	...

08005f6c <_printf_i>:
 8005f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005f74:	460c      	mov	r4, r1
 8005f76:	7e09      	ldrb	r1, [r1, #24]
 8005f78:	b085      	sub	sp, #20
 8005f7a:	296e      	cmp	r1, #110	; 0x6e
 8005f7c:	4617      	mov	r7, r2
 8005f7e:	4606      	mov	r6, r0
 8005f80:	4698      	mov	r8, r3
 8005f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f84:	f000 80b3 	beq.w	80060ee <_printf_i+0x182>
 8005f88:	d822      	bhi.n	8005fd0 <_printf_i+0x64>
 8005f8a:	2963      	cmp	r1, #99	; 0x63
 8005f8c:	d036      	beq.n	8005ffc <_printf_i+0x90>
 8005f8e:	d80a      	bhi.n	8005fa6 <_printf_i+0x3a>
 8005f90:	2900      	cmp	r1, #0
 8005f92:	f000 80b9 	beq.w	8006108 <_printf_i+0x19c>
 8005f96:	2958      	cmp	r1, #88	; 0x58
 8005f98:	f000 8083 	beq.w	80060a2 <_printf_i+0x136>
 8005f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005fa4:	e032      	b.n	800600c <_printf_i+0xa0>
 8005fa6:	2964      	cmp	r1, #100	; 0x64
 8005fa8:	d001      	beq.n	8005fae <_printf_i+0x42>
 8005faa:	2969      	cmp	r1, #105	; 0x69
 8005fac:	d1f6      	bne.n	8005f9c <_printf_i+0x30>
 8005fae:	6820      	ldr	r0, [r4, #0]
 8005fb0:	6813      	ldr	r3, [r2, #0]
 8005fb2:	0605      	lsls	r5, r0, #24
 8005fb4:	f103 0104 	add.w	r1, r3, #4
 8005fb8:	d52a      	bpl.n	8006010 <_printf_i+0xa4>
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6011      	str	r1, [r2, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	da03      	bge.n	8005fca <_printf_i+0x5e>
 8005fc2:	222d      	movs	r2, #45	; 0x2d
 8005fc4:	425b      	negs	r3, r3
 8005fc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005fca:	486f      	ldr	r0, [pc, #444]	; (8006188 <_printf_i+0x21c>)
 8005fcc:	220a      	movs	r2, #10
 8005fce:	e039      	b.n	8006044 <_printf_i+0xd8>
 8005fd0:	2973      	cmp	r1, #115	; 0x73
 8005fd2:	f000 809d 	beq.w	8006110 <_printf_i+0x1a4>
 8005fd6:	d808      	bhi.n	8005fea <_printf_i+0x7e>
 8005fd8:	296f      	cmp	r1, #111	; 0x6f
 8005fda:	d020      	beq.n	800601e <_printf_i+0xb2>
 8005fdc:	2970      	cmp	r1, #112	; 0x70
 8005fde:	d1dd      	bne.n	8005f9c <_printf_i+0x30>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	f043 0320 	orr.w	r3, r3, #32
 8005fe6:	6023      	str	r3, [r4, #0]
 8005fe8:	e003      	b.n	8005ff2 <_printf_i+0x86>
 8005fea:	2975      	cmp	r1, #117	; 0x75
 8005fec:	d017      	beq.n	800601e <_printf_i+0xb2>
 8005fee:	2978      	cmp	r1, #120	; 0x78
 8005ff0:	d1d4      	bne.n	8005f9c <_printf_i+0x30>
 8005ff2:	2378      	movs	r3, #120	; 0x78
 8005ff4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff8:	4864      	ldr	r0, [pc, #400]	; (800618c <_printf_i+0x220>)
 8005ffa:	e055      	b.n	80060a8 <_printf_i+0x13c>
 8005ffc:	6813      	ldr	r3, [r2, #0]
 8005ffe:	1d19      	adds	r1, r3, #4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6011      	str	r1, [r2, #0]
 8006004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800600c:	2301      	movs	r3, #1
 800600e:	e08c      	b.n	800612a <_printf_i+0x1be>
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6011      	str	r1, [r2, #0]
 8006014:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006018:	bf18      	it	ne
 800601a:	b21b      	sxthne	r3, r3
 800601c:	e7cf      	b.n	8005fbe <_printf_i+0x52>
 800601e:	6813      	ldr	r3, [r2, #0]
 8006020:	6825      	ldr	r5, [r4, #0]
 8006022:	1d18      	adds	r0, r3, #4
 8006024:	6010      	str	r0, [r2, #0]
 8006026:	0628      	lsls	r0, r5, #24
 8006028:	d501      	bpl.n	800602e <_printf_i+0xc2>
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	e002      	b.n	8006034 <_printf_i+0xc8>
 800602e:	0668      	lsls	r0, r5, #25
 8006030:	d5fb      	bpl.n	800602a <_printf_i+0xbe>
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	4854      	ldr	r0, [pc, #336]	; (8006188 <_printf_i+0x21c>)
 8006036:	296f      	cmp	r1, #111	; 0x6f
 8006038:	bf14      	ite	ne
 800603a:	220a      	movne	r2, #10
 800603c:	2208      	moveq	r2, #8
 800603e:	2100      	movs	r1, #0
 8006040:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006044:	6865      	ldr	r5, [r4, #4]
 8006046:	60a5      	str	r5, [r4, #8]
 8006048:	2d00      	cmp	r5, #0
 800604a:	f2c0 8095 	blt.w	8006178 <_printf_i+0x20c>
 800604e:	6821      	ldr	r1, [r4, #0]
 8006050:	f021 0104 	bic.w	r1, r1, #4
 8006054:	6021      	str	r1, [r4, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d13d      	bne.n	80060d6 <_printf_i+0x16a>
 800605a:	2d00      	cmp	r5, #0
 800605c:	f040 808e 	bne.w	800617c <_printf_i+0x210>
 8006060:	4665      	mov	r5, ip
 8006062:	2a08      	cmp	r2, #8
 8006064:	d10b      	bne.n	800607e <_printf_i+0x112>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	07db      	lsls	r3, r3, #31
 800606a:	d508      	bpl.n	800607e <_printf_i+0x112>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	6862      	ldr	r2, [r4, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	bfde      	ittt	le
 8006074:	2330      	movle	r3, #48	; 0x30
 8006076:	f805 3c01 	strble.w	r3, [r5, #-1]
 800607a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800607e:	ebac 0305 	sub.w	r3, ip, r5
 8006082:	6123      	str	r3, [r4, #16]
 8006084:	f8cd 8000 	str.w	r8, [sp]
 8006088:	463b      	mov	r3, r7
 800608a:	aa03      	add	r2, sp, #12
 800608c:	4621      	mov	r1, r4
 800608e:	4630      	mov	r0, r6
 8006090:	f7ff fef6 	bl	8005e80 <_printf_common>
 8006094:	3001      	adds	r0, #1
 8006096:	d14d      	bne.n	8006134 <_printf_i+0x1c8>
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	b005      	add	sp, #20
 800609e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060a2:	4839      	ldr	r0, [pc, #228]	; (8006188 <_printf_i+0x21c>)
 80060a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060a8:	6813      	ldr	r3, [r2, #0]
 80060aa:	6821      	ldr	r1, [r4, #0]
 80060ac:	1d1d      	adds	r5, r3, #4
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6015      	str	r5, [r2, #0]
 80060b2:	060a      	lsls	r2, r1, #24
 80060b4:	d50b      	bpl.n	80060ce <_printf_i+0x162>
 80060b6:	07ca      	lsls	r2, r1, #31
 80060b8:	bf44      	itt	mi
 80060ba:	f041 0120 	orrmi.w	r1, r1, #32
 80060be:	6021      	strmi	r1, [r4, #0]
 80060c0:	b91b      	cbnz	r3, 80060ca <_printf_i+0x15e>
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	f022 0220 	bic.w	r2, r2, #32
 80060c8:	6022      	str	r2, [r4, #0]
 80060ca:	2210      	movs	r2, #16
 80060cc:	e7b7      	b.n	800603e <_printf_i+0xd2>
 80060ce:	064d      	lsls	r5, r1, #25
 80060d0:	bf48      	it	mi
 80060d2:	b29b      	uxthmi	r3, r3
 80060d4:	e7ef      	b.n	80060b6 <_printf_i+0x14a>
 80060d6:	4665      	mov	r5, ip
 80060d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80060dc:	fb02 3311 	mls	r3, r2, r1, r3
 80060e0:	5cc3      	ldrb	r3, [r0, r3]
 80060e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80060e6:	460b      	mov	r3, r1
 80060e8:	2900      	cmp	r1, #0
 80060ea:	d1f5      	bne.n	80060d8 <_printf_i+0x16c>
 80060ec:	e7b9      	b.n	8006062 <_printf_i+0xf6>
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	6825      	ldr	r5, [r4, #0]
 80060f2:	6961      	ldr	r1, [r4, #20]
 80060f4:	1d18      	adds	r0, r3, #4
 80060f6:	6010      	str	r0, [r2, #0]
 80060f8:	0628      	lsls	r0, r5, #24
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	d501      	bpl.n	8006102 <_printf_i+0x196>
 80060fe:	6019      	str	r1, [r3, #0]
 8006100:	e002      	b.n	8006108 <_printf_i+0x19c>
 8006102:	066a      	lsls	r2, r5, #25
 8006104:	d5fb      	bpl.n	80060fe <_printf_i+0x192>
 8006106:	8019      	strh	r1, [r3, #0]
 8006108:	2300      	movs	r3, #0
 800610a:	6123      	str	r3, [r4, #16]
 800610c:	4665      	mov	r5, ip
 800610e:	e7b9      	b.n	8006084 <_printf_i+0x118>
 8006110:	6813      	ldr	r3, [r2, #0]
 8006112:	1d19      	adds	r1, r3, #4
 8006114:	6011      	str	r1, [r2, #0]
 8006116:	681d      	ldr	r5, [r3, #0]
 8006118:	6862      	ldr	r2, [r4, #4]
 800611a:	2100      	movs	r1, #0
 800611c:	4628      	mov	r0, r5
 800611e:	f7fa f85f 	bl	80001e0 <memchr>
 8006122:	b108      	cbz	r0, 8006128 <_printf_i+0x1bc>
 8006124:	1b40      	subs	r0, r0, r5
 8006126:	6060      	str	r0, [r4, #4]
 8006128:	6863      	ldr	r3, [r4, #4]
 800612a:	6123      	str	r3, [r4, #16]
 800612c:	2300      	movs	r3, #0
 800612e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006132:	e7a7      	b.n	8006084 <_printf_i+0x118>
 8006134:	6923      	ldr	r3, [r4, #16]
 8006136:	462a      	mov	r2, r5
 8006138:	4639      	mov	r1, r7
 800613a:	4630      	mov	r0, r6
 800613c:	47c0      	blx	r8
 800613e:	3001      	adds	r0, #1
 8006140:	d0aa      	beq.n	8006098 <_printf_i+0x12c>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	079b      	lsls	r3, r3, #30
 8006146:	d413      	bmi.n	8006170 <_printf_i+0x204>
 8006148:	68e0      	ldr	r0, [r4, #12]
 800614a:	9b03      	ldr	r3, [sp, #12]
 800614c:	4298      	cmp	r0, r3
 800614e:	bfb8      	it	lt
 8006150:	4618      	movlt	r0, r3
 8006152:	e7a3      	b.n	800609c <_printf_i+0x130>
 8006154:	2301      	movs	r3, #1
 8006156:	464a      	mov	r2, r9
 8006158:	4639      	mov	r1, r7
 800615a:	4630      	mov	r0, r6
 800615c:	47c0      	blx	r8
 800615e:	3001      	adds	r0, #1
 8006160:	d09a      	beq.n	8006098 <_printf_i+0x12c>
 8006162:	3501      	adds	r5, #1
 8006164:	68e3      	ldr	r3, [r4, #12]
 8006166:	9a03      	ldr	r2, [sp, #12]
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	42ab      	cmp	r3, r5
 800616c:	dcf2      	bgt.n	8006154 <_printf_i+0x1e8>
 800616e:	e7eb      	b.n	8006148 <_printf_i+0x1dc>
 8006170:	2500      	movs	r5, #0
 8006172:	f104 0919 	add.w	r9, r4, #25
 8006176:	e7f5      	b.n	8006164 <_printf_i+0x1f8>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1ac      	bne.n	80060d6 <_printf_i+0x16a>
 800617c:	7803      	ldrb	r3, [r0, #0]
 800617e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006182:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006186:	e76c      	b.n	8006062 <_printf_i+0xf6>
 8006188:	0800b1f6 	.word	0x0800b1f6
 800618c:	0800b207 	.word	0x0800b207

08006190 <_scanf_float>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	469a      	mov	sl, r3
 8006196:	688b      	ldr	r3, [r1, #8]
 8006198:	4616      	mov	r6, r2
 800619a:	1e5a      	subs	r2, r3, #1
 800619c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80061a0:	b087      	sub	sp, #28
 80061a2:	bf83      	ittte	hi
 80061a4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80061a8:	189b      	addhi	r3, r3, r2
 80061aa:	9301      	strhi	r3, [sp, #4]
 80061ac:	2300      	movls	r3, #0
 80061ae:	bf86      	itte	hi
 80061b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061b4:	608b      	strhi	r3, [r1, #8]
 80061b6:	9301      	strls	r3, [sp, #4]
 80061b8:	680b      	ldr	r3, [r1, #0]
 80061ba:	4688      	mov	r8, r1
 80061bc:	f04f 0b00 	mov.w	fp, #0
 80061c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80061c4:	f848 3b1c 	str.w	r3, [r8], #28
 80061c8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80061cc:	4607      	mov	r7, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	4645      	mov	r5, r8
 80061d2:	465a      	mov	r2, fp
 80061d4:	46d9      	mov	r9, fp
 80061d6:	f8cd b008 	str.w	fp, [sp, #8]
 80061da:	68a1      	ldr	r1, [r4, #8]
 80061dc:	b181      	cbz	r1, 8006200 <_scanf_float+0x70>
 80061de:	6833      	ldr	r3, [r6, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b49      	cmp	r3, #73	; 0x49
 80061e4:	d071      	beq.n	80062ca <_scanf_float+0x13a>
 80061e6:	d84d      	bhi.n	8006284 <_scanf_float+0xf4>
 80061e8:	2b39      	cmp	r3, #57	; 0x39
 80061ea:	d840      	bhi.n	800626e <_scanf_float+0xde>
 80061ec:	2b31      	cmp	r3, #49	; 0x31
 80061ee:	f080 8088 	bcs.w	8006302 <_scanf_float+0x172>
 80061f2:	2b2d      	cmp	r3, #45	; 0x2d
 80061f4:	f000 8090 	beq.w	8006318 <_scanf_float+0x188>
 80061f8:	d815      	bhi.n	8006226 <_scanf_float+0x96>
 80061fa:	2b2b      	cmp	r3, #43	; 0x2b
 80061fc:	f000 808c 	beq.w	8006318 <_scanf_float+0x188>
 8006200:	f1b9 0f00 	cmp.w	r9, #0
 8006204:	d003      	beq.n	800620e <_scanf_float+0x7e>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	3a01      	subs	r2, #1
 8006210:	2a01      	cmp	r2, #1
 8006212:	f200 80ea 	bhi.w	80063ea <_scanf_float+0x25a>
 8006216:	4545      	cmp	r5, r8
 8006218:	f200 80dc 	bhi.w	80063d4 <_scanf_float+0x244>
 800621c:	2601      	movs	r6, #1
 800621e:	4630      	mov	r0, r6
 8006220:	b007      	add	sp, #28
 8006222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006226:	2b2e      	cmp	r3, #46	; 0x2e
 8006228:	f000 809f 	beq.w	800636a <_scanf_float+0x1da>
 800622c:	2b30      	cmp	r3, #48	; 0x30
 800622e:	d1e7      	bne.n	8006200 <_scanf_float+0x70>
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006236:	d064      	beq.n	8006302 <_scanf_float+0x172>
 8006238:	9b01      	ldr	r3, [sp, #4]
 800623a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800623e:	6020      	str	r0, [r4, #0]
 8006240:	f109 0901 	add.w	r9, r9, #1
 8006244:	b11b      	cbz	r3, 800624e <_scanf_float+0xbe>
 8006246:	3b01      	subs	r3, #1
 8006248:	3101      	adds	r1, #1
 800624a:	9301      	str	r3, [sp, #4]
 800624c:	60a1      	str	r1, [r4, #8]
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	3b01      	subs	r3, #1
 8006252:	60a3      	str	r3, [r4, #8]
 8006254:	6923      	ldr	r3, [r4, #16]
 8006256:	3301      	adds	r3, #1
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	6873      	ldr	r3, [r6, #4]
 800625c:	3b01      	subs	r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	6073      	str	r3, [r6, #4]
 8006262:	f340 80ac 	ble.w	80063be <_scanf_float+0x22e>
 8006266:	6833      	ldr	r3, [r6, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	6033      	str	r3, [r6, #0]
 800626c:	e7b5      	b.n	80061da <_scanf_float+0x4a>
 800626e:	2b45      	cmp	r3, #69	; 0x45
 8006270:	f000 8085 	beq.w	800637e <_scanf_float+0x1ee>
 8006274:	2b46      	cmp	r3, #70	; 0x46
 8006276:	d06a      	beq.n	800634e <_scanf_float+0x1be>
 8006278:	2b41      	cmp	r3, #65	; 0x41
 800627a:	d1c1      	bne.n	8006200 <_scanf_float+0x70>
 800627c:	2a01      	cmp	r2, #1
 800627e:	d1bf      	bne.n	8006200 <_scanf_float+0x70>
 8006280:	2202      	movs	r2, #2
 8006282:	e046      	b.n	8006312 <_scanf_float+0x182>
 8006284:	2b65      	cmp	r3, #101	; 0x65
 8006286:	d07a      	beq.n	800637e <_scanf_float+0x1ee>
 8006288:	d818      	bhi.n	80062bc <_scanf_float+0x12c>
 800628a:	2b54      	cmp	r3, #84	; 0x54
 800628c:	d066      	beq.n	800635c <_scanf_float+0x1cc>
 800628e:	d811      	bhi.n	80062b4 <_scanf_float+0x124>
 8006290:	2b4e      	cmp	r3, #78	; 0x4e
 8006292:	d1b5      	bne.n	8006200 <_scanf_float+0x70>
 8006294:	2a00      	cmp	r2, #0
 8006296:	d146      	bne.n	8006326 <_scanf_float+0x196>
 8006298:	f1b9 0f00 	cmp.w	r9, #0
 800629c:	d145      	bne.n	800632a <_scanf_float+0x19a>
 800629e:	6821      	ldr	r1, [r4, #0]
 80062a0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80062a4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80062a8:	d13f      	bne.n	800632a <_scanf_float+0x19a>
 80062aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80062ae:	6021      	str	r1, [r4, #0]
 80062b0:	2201      	movs	r2, #1
 80062b2:	e02e      	b.n	8006312 <_scanf_float+0x182>
 80062b4:	2b59      	cmp	r3, #89	; 0x59
 80062b6:	d01e      	beq.n	80062f6 <_scanf_float+0x166>
 80062b8:	2b61      	cmp	r3, #97	; 0x61
 80062ba:	e7de      	b.n	800627a <_scanf_float+0xea>
 80062bc:	2b6e      	cmp	r3, #110	; 0x6e
 80062be:	d0e9      	beq.n	8006294 <_scanf_float+0x104>
 80062c0:	d815      	bhi.n	80062ee <_scanf_float+0x15e>
 80062c2:	2b66      	cmp	r3, #102	; 0x66
 80062c4:	d043      	beq.n	800634e <_scanf_float+0x1be>
 80062c6:	2b69      	cmp	r3, #105	; 0x69
 80062c8:	d19a      	bne.n	8006200 <_scanf_float+0x70>
 80062ca:	f1bb 0f00 	cmp.w	fp, #0
 80062ce:	d138      	bne.n	8006342 <_scanf_float+0x1b2>
 80062d0:	f1b9 0f00 	cmp.w	r9, #0
 80062d4:	d197      	bne.n	8006206 <_scanf_float+0x76>
 80062d6:	6821      	ldr	r1, [r4, #0]
 80062d8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80062dc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80062e0:	d195      	bne.n	800620e <_scanf_float+0x7e>
 80062e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80062e6:	6021      	str	r1, [r4, #0]
 80062e8:	f04f 0b01 	mov.w	fp, #1
 80062ec:	e011      	b.n	8006312 <_scanf_float+0x182>
 80062ee:	2b74      	cmp	r3, #116	; 0x74
 80062f0:	d034      	beq.n	800635c <_scanf_float+0x1cc>
 80062f2:	2b79      	cmp	r3, #121	; 0x79
 80062f4:	d184      	bne.n	8006200 <_scanf_float+0x70>
 80062f6:	f1bb 0f07 	cmp.w	fp, #7
 80062fa:	d181      	bne.n	8006200 <_scanf_float+0x70>
 80062fc:	f04f 0b08 	mov.w	fp, #8
 8006300:	e007      	b.n	8006312 <_scanf_float+0x182>
 8006302:	eb12 0f0b 	cmn.w	r2, fp
 8006306:	f47f af7b 	bne.w	8006200 <_scanf_float+0x70>
 800630a:	6821      	ldr	r1, [r4, #0]
 800630c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006310:	6021      	str	r1, [r4, #0]
 8006312:	702b      	strb	r3, [r5, #0]
 8006314:	3501      	adds	r5, #1
 8006316:	e79a      	b.n	800624e <_scanf_float+0xbe>
 8006318:	6821      	ldr	r1, [r4, #0]
 800631a:	0608      	lsls	r0, r1, #24
 800631c:	f57f af70 	bpl.w	8006200 <_scanf_float+0x70>
 8006320:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006324:	e7f4      	b.n	8006310 <_scanf_float+0x180>
 8006326:	2a02      	cmp	r2, #2
 8006328:	d047      	beq.n	80063ba <_scanf_float+0x22a>
 800632a:	f1bb 0f01 	cmp.w	fp, #1
 800632e:	d003      	beq.n	8006338 <_scanf_float+0x1a8>
 8006330:	f1bb 0f04 	cmp.w	fp, #4
 8006334:	f47f af64 	bne.w	8006200 <_scanf_float+0x70>
 8006338:	f10b 0b01 	add.w	fp, fp, #1
 800633c:	fa5f fb8b 	uxtb.w	fp, fp
 8006340:	e7e7      	b.n	8006312 <_scanf_float+0x182>
 8006342:	f1bb 0f03 	cmp.w	fp, #3
 8006346:	d0f7      	beq.n	8006338 <_scanf_float+0x1a8>
 8006348:	f1bb 0f05 	cmp.w	fp, #5
 800634c:	e7f2      	b.n	8006334 <_scanf_float+0x1a4>
 800634e:	f1bb 0f02 	cmp.w	fp, #2
 8006352:	f47f af55 	bne.w	8006200 <_scanf_float+0x70>
 8006356:	f04f 0b03 	mov.w	fp, #3
 800635a:	e7da      	b.n	8006312 <_scanf_float+0x182>
 800635c:	f1bb 0f06 	cmp.w	fp, #6
 8006360:	f47f af4e 	bne.w	8006200 <_scanf_float+0x70>
 8006364:	f04f 0b07 	mov.w	fp, #7
 8006368:	e7d3      	b.n	8006312 <_scanf_float+0x182>
 800636a:	6821      	ldr	r1, [r4, #0]
 800636c:	0588      	lsls	r0, r1, #22
 800636e:	f57f af47 	bpl.w	8006200 <_scanf_float+0x70>
 8006372:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006376:	6021      	str	r1, [r4, #0]
 8006378:	f8cd 9008 	str.w	r9, [sp, #8]
 800637c:	e7c9      	b.n	8006312 <_scanf_float+0x182>
 800637e:	6821      	ldr	r1, [r4, #0]
 8006380:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006384:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006388:	d006      	beq.n	8006398 <_scanf_float+0x208>
 800638a:	0548      	lsls	r0, r1, #21
 800638c:	f57f af38 	bpl.w	8006200 <_scanf_float+0x70>
 8006390:	f1b9 0f00 	cmp.w	r9, #0
 8006394:	f43f af3b 	beq.w	800620e <_scanf_float+0x7e>
 8006398:	0588      	lsls	r0, r1, #22
 800639a:	bf58      	it	pl
 800639c:	9802      	ldrpl	r0, [sp, #8]
 800639e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80063a2:	bf58      	it	pl
 80063a4:	eba9 0000 	subpl.w	r0, r9, r0
 80063a8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80063ac:	bf58      	it	pl
 80063ae:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80063b2:	6021      	str	r1, [r4, #0]
 80063b4:	f04f 0900 	mov.w	r9, #0
 80063b8:	e7ab      	b.n	8006312 <_scanf_float+0x182>
 80063ba:	2203      	movs	r2, #3
 80063bc:	e7a9      	b.n	8006312 <_scanf_float+0x182>
 80063be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063c2:	9205      	str	r2, [sp, #20]
 80063c4:	4631      	mov	r1, r6
 80063c6:	4638      	mov	r0, r7
 80063c8:	4798      	blx	r3
 80063ca:	9a05      	ldr	r2, [sp, #20]
 80063cc:	2800      	cmp	r0, #0
 80063ce:	f43f af04 	beq.w	80061da <_scanf_float+0x4a>
 80063d2:	e715      	b.n	8006200 <_scanf_float+0x70>
 80063d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80063dc:	4632      	mov	r2, r6
 80063de:	4638      	mov	r0, r7
 80063e0:	4798      	blx	r3
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	6123      	str	r3, [r4, #16]
 80063e8:	e715      	b.n	8006216 <_scanf_float+0x86>
 80063ea:	f10b 33ff 	add.w	r3, fp, #4294967295
 80063ee:	2b06      	cmp	r3, #6
 80063f0:	d80a      	bhi.n	8006408 <_scanf_float+0x278>
 80063f2:	f1bb 0f02 	cmp.w	fp, #2
 80063f6:	d968      	bls.n	80064ca <_scanf_float+0x33a>
 80063f8:	f1ab 0b03 	sub.w	fp, fp, #3
 80063fc:	fa5f fb8b 	uxtb.w	fp, fp
 8006400:	eba5 0b0b 	sub.w	fp, r5, fp
 8006404:	455d      	cmp	r5, fp
 8006406:	d14b      	bne.n	80064a0 <_scanf_float+0x310>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	05da      	lsls	r2, r3, #23
 800640c:	d51f      	bpl.n	800644e <_scanf_float+0x2be>
 800640e:	055b      	lsls	r3, r3, #21
 8006410:	d468      	bmi.n	80064e4 <_scanf_float+0x354>
 8006412:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006416:	6923      	ldr	r3, [r4, #16]
 8006418:	2965      	cmp	r1, #101	; 0x65
 800641a:	f103 33ff 	add.w	r3, r3, #4294967295
 800641e:	f105 3bff 	add.w	fp, r5, #4294967295
 8006422:	6123      	str	r3, [r4, #16]
 8006424:	d00d      	beq.n	8006442 <_scanf_float+0x2b2>
 8006426:	2945      	cmp	r1, #69	; 0x45
 8006428:	d00b      	beq.n	8006442 <_scanf_float+0x2b2>
 800642a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800642e:	4632      	mov	r2, r6
 8006430:	4638      	mov	r0, r7
 8006432:	4798      	blx	r3
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800643a:	3b01      	subs	r3, #1
 800643c:	f1a5 0b02 	sub.w	fp, r5, #2
 8006440:	6123      	str	r3, [r4, #16]
 8006442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006446:	4632      	mov	r2, r6
 8006448:	4638      	mov	r0, r7
 800644a:	4798      	blx	r3
 800644c:	465d      	mov	r5, fp
 800644e:	6826      	ldr	r6, [r4, #0]
 8006450:	f016 0610 	ands.w	r6, r6, #16
 8006454:	d17a      	bne.n	800654c <_scanf_float+0x3bc>
 8006456:	702e      	strb	r6, [r5, #0]
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800645e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006462:	d142      	bne.n	80064ea <_scanf_float+0x35a>
 8006464:	9b02      	ldr	r3, [sp, #8]
 8006466:	eba9 0303 	sub.w	r3, r9, r3
 800646a:	425a      	negs	r2, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d149      	bne.n	8006504 <_scanf_float+0x374>
 8006470:	2200      	movs	r2, #0
 8006472:	4641      	mov	r1, r8
 8006474:	4638      	mov	r0, r7
 8006476:	f000 fea3 	bl	80071c0 <_strtod_r>
 800647a:	6825      	ldr	r5, [r4, #0]
 800647c:	f8da 3000 	ldr.w	r3, [sl]
 8006480:	f015 0f02 	tst.w	r5, #2
 8006484:	f103 0204 	add.w	r2, r3, #4
 8006488:	ec59 8b10 	vmov	r8, r9, d0
 800648c:	f8ca 2000 	str.w	r2, [sl]
 8006490:	d043      	beq.n	800651a <_scanf_float+0x38a>
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	e9c3 8900 	strd	r8, r9, [r3]
 8006498:	68e3      	ldr	r3, [r4, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60e3      	str	r3, [r4, #12]
 800649e:	e6be      	b.n	800621e <_scanf_float+0x8e>
 80064a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80064a8:	4632      	mov	r2, r6
 80064aa:	4638      	mov	r0, r7
 80064ac:	4798      	blx	r3
 80064ae:	6923      	ldr	r3, [r4, #16]
 80064b0:	3b01      	subs	r3, #1
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	e7a6      	b.n	8006404 <_scanf_float+0x274>
 80064b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064ba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80064be:	4632      	mov	r2, r6
 80064c0:	4638      	mov	r0, r7
 80064c2:	4798      	blx	r3
 80064c4:	6923      	ldr	r3, [r4, #16]
 80064c6:	3b01      	subs	r3, #1
 80064c8:	6123      	str	r3, [r4, #16]
 80064ca:	4545      	cmp	r5, r8
 80064cc:	d8f3      	bhi.n	80064b6 <_scanf_float+0x326>
 80064ce:	e6a5      	b.n	800621c <_scanf_float+0x8c>
 80064d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80064d8:	4632      	mov	r2, r6
 80064da:	4638      	mov	r0, r7
 80064dc:	4798      	blx	r3
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	6123      	str	r3, [r4, #16]
 80064e4:	4545      	cmp	r5, r8
 80064e6:	d8f3      	bhi.n	80064d0 <_scanf_float+0x340>
 80064e8:	e698      	b.n	800621c <_scanf_float+0x8c>
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d0bf      	beq.n	8006470 <_scanf_float+0x2e0>
 80064f0:	9904      	ldr	r1, [sp, #16]
 80064f2:	230a      	movs	r3, #10
 80064f4:	4632      	mov	r2, r6
 80064f6:	3101      	adds	r1, #1
 80064f8:	4638      	mov	r0, r7
 80064fa:	f000 feed 	bl	80072d8 <_strtol_r>
 80064fe:	9b03      	ldr	r3, [sp, #12]
 8006500:	9d04      	ldr	r5, [sp, #16]
 8006502:	1ac2      	subs	r2, r0, r3
 8006504:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006508:	429d      	cmp	r5, r3
 800650a:	bf28      	it	cs
 800650c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006510:	490f      	ldr	r1, [pc, #60]	; (8006550 <_scanf_float+0x3c0>)
 8006512:	4628      	mov	r0, r5
 8006514:	f000 f824 	bl	8006560 <siprintf>
 8006518:	e7aa      	b.n	8006470 <_scanf_float+0x2e0>
 800651a:	f015 0504 	ands.w	r5, r5, #4
 800651e:	d1b8      	bne.n	8006492 <_scanf_float+0x302>
 8006520:	681f      	ldr	r7, [r3, #0]
 8006522:	ee10 2a10 	vmov	r2, s0
 8006526:	464b      	mov	r3, r9
 8006528:	ee10 0a10 	vmov	r0, s0
 800652c:	4649      	mov	r1, r9
 800652e:	f7fa fafd 	bl	8000b2c <__aeabi_dcmpun>
 8006532:	b128      	cbz	r0, 8006540 <_scanf_float+0x3b0>
 8006534:	4628      	mov	r0, r5
 8006536:	f000 f80d 	bl	8006554 <nanf>
 800653a:	ed87 0a00 	vstr	s0, [r7]
 800653e:	e7ab      	b.n	8006498 <_scanf_float+0x308>
 8006540:	4640      	mov	r0, r8
 8006542:	4649      	mov	r1, r9
 8006544:	f7fa fb50 	bl	8000be8 <__aeabi_d2f>
 8006548:	6038      	str	r0, [r7, #0]
 800654a:	e7a5      	b.n	8006498 <_scanf_float+0x308>
 800654c:	2600      	movs	r6, #0
 800654e:	e666      	b.n	800621e <_scanf_float+0x8e>
 8006550:	0800b218 	.word	0x0800b218

08006554 <nanf>:
 8006554:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800655c <nanf+0x8>
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	7fc00000 	.word	0x7fc00000

08006560 <siprintf>:
 8006560:	b40e      	push	{r1, r2, r3}
 8006562:	b500      	push	{lr}
 8006564:	b09c      	sub	sp, #112	; 0x70
 8006566:	ab1d      	add	r3, sp, #116	; 0x74
 8006568:	9002      	str	r0, [sp, #8]
 800656a:	9006      	str	r0, [sp, #24]
 800656c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006570:	4809      	ldr	r0, [pc, #36]	; (8006598 <siprintf+0x38>)
 8006572:	9107      	str	r1, [sp, #28]
 8006574:	9104      	str	r1, [sp, #16]
 8006576:	4909      	ldr	r1, [pc, #36]	; (800659c <siprintf+0x3c>)
 8006578:	f853 2b04 	ldr.w	r2, [r3], #4
 800657c:	9105      	str	r1, [sp, #20]
 800657e:	6800      	ldr	r0, [r0, #0]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	a902      	add	r1, sp, #8
 8006584:	f002 fd6e 	bl	8009064 <_svfiprintf_r>
 8006588:	9b02      	ldr	r3, [sp, #8]
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	b01c      	add	sp, #112	; 0x70
 8006590:	f85d eb04 	ldr.w	lr, [sp], #4
 8006594:	b003      	add	sp, #12
 8006596:	4770      	bx	lr
 8006598:	20000014 	.word	0x20000014
 800659c:	ffff0208 	.word	0xffff0208

080065a0 <sulp>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	4604      	mov	r4, r0
 80065a4:	460d      	mov	r5, r1
 80065a6:	ec45 4b10 	vmov	d0, r4, r5
 80065aa:	4616      	mov	r6, r2
 80065ac:	f002 fb16 	bl	8008bdc <__ulp>
 80065b0:	ec51 0b10 	vmov	r0, r1, d0
 80065b4:	b17e      	cbz	r6, 80065d6 <sulp+0x36>
 80065b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80065ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dd09      	ble.n	80065d6 <sulp+0x36>
 80065c2:	051b      	lsls	r3, r3, #20
 80065c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80065c8:	2400      	movs	r4, #0
 80065ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80065ce:	4622      	mov	r2, r4
 80065d0:	462b      	mov	r3, r5
 80065d2:	f7fa f811 	bl	80005f8 <__aeabi_dmul>
 80065d6:	bd70      	pop	{r4, r5, r6, pc}

080065d8 <_strtod_l>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	461f      	mov	r7, r3
 80065de:	b0a1      	sub	sp, #132	; 0x84
 80065e0:	2300      	movs	r3, #0
 80065e2:	4681      	mov	r9, r0
 80065e4:	4638      	mov	r0, r7
 80065e6:	460e      	mov	r6, r1
 80065e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80065ea:	931c      	str	r3, [sp, #112]	; 0x70
 80065ec:	f001 fff5 	bl	80085da <__localeconv_l>
 80065f0:	4680      	mov	r8, r0
 80065f2:	6800      	ldr	r0, [r0, #0]
 80065f4:	f7f9 fdec 	bl	80001d0 <strlen>
 80065f8:	f04f 0a00 	mov.w	sl, #0
 80065fc:	4604      	mov	r4, r0
 80065fe:	f04f 0b00 	mov.w	fp, #0
 8006602:	961b      	str	r6, [sp, #108]	; 0x6c
 8006604:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006606:	781a      	ldrb	r2, [r3, #0]
 8006608:	2a0d      	cmp	r2, #13
 800660a:	d832      	bhi.n	8006672 <_strtod_l+0x9a>
 800660c:	2a09      	cmp	r2, #9
 800660e:	d236      	bcs.n	800667e <_strtod_l+0xa6>
 8006610:	2a00      	cmp	r2, #0
 8006612:	d03e      	beq.n	8006692 <_strtod_l+0xba>
 8006614:	2300      	movs	r3, #0
 8006616:	930d      	str	r3, [sp, #52]	; 0x34
 8006618:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800661a:	782b      	ldrb	r3, [r5, #0]
 800661c:	2b30      	cmp	r3, #48	; 0x30
 800661e:	f040 80ac 	bne.w	800677a <_strtod_l+0x1a2>
 8006622:	786b      	ldrb	r3, [r5, #1]
 8006624:	2b58      	cmp	r3, #88	; 0x58
 8006626:	d001      	beq.n	800662c <_strtod_l+0x54>
 8006628:	2b78      	cmp	r3, #120	; 0x78
 800662a:	d167      	bne.n	80066fc <_strtod_l+0x124>
 800662c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800662e:	9301      	str	r3, [sp, #4]
 8006630:	ab1c      	add	r3, sp, #112	; 0x70
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	9702      	str	r7, [sp, #8]
 8006636:	ab1d      	add	r3, sp, #116	; 0x74
 8006638:	4a88      	ldr	r2, [pc, #544]	; (800685c <_strtod_l+0x284>)
 800663a:	a91b      	add	r1, sp, #108	; 0x6c
 800663c:	4648      	mov	r0, r9
 800663e:	f001 fcf2 	bl	8008026 <__gethex>
 8006642:	f010 0407 	ands.w	r4, r0, #7
 8006646:	4606      	mov	r6, r0
 8006648:	d005      	beq.n	8006656 <_strtod_l+0x7e>
 800664a:	2c06      	cmp	r4, #6
 800664c:	d12b      	bne.n	80066a6 <_strtod_l+0xce>
 800664e:	3501      	adds	r5, #1
 8006650:	2300      	movs	r3, #0
 8006652:	951b      	str	r5, [sp, #108]	; 0x6c
 8006654:	930d      	str	r3, [sp, #52]	; 0x34
 8006656:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006658:	2b00      	cmp	r3, #0
 800665a:	f040 859a 	bne.w	8007192 <_strtod_l+0xbba>
 800665e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006660:	b1e3      	cbz	r3, 800669c <_strtod_l+0xc4>
 8006662:	4652      	mov	r2, sl
 8006664:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006668:	ec43 2b10 	vmov	d0, r2, r3
 800666c:	b021      	add	sp, #132	; 0x84
 800666e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006672:	2a2b      	cmp	r2, #43	; 0x2b
 8006674:	d015      	beq.n	80066a2 <_strtod_l+0xca>
 8006676:	2a2d      	cmp	r2, #45	; 0x2d
 8006678:	d004      	beq.n	8006684 <_strtod_l+0xac>
 800667a:	2a20      	cmp	r2, #32
 800667c:	d1ca      	bne.n	8006614 <_strtod_l+0x3c>
 800667e:	3301      	adds	r3, #1
 8006680:	931b      	str	r3, [sp, #108]	; 0x6c
 8006682:	e7bf      	b.n	8006604 <_strtod_l+0x2c>
 8006684:	2201      	movs	r2, #1
 8006686:	920d      	str	r2, [sp, #52]	; 0x34
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	921b      	str	r2, [sp, #108]	; 0x6c
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1c2      	bne.n	8006618 <_strtod_l+0x40>
 8006692:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006694:	961b      	str	r6, [sp, #108]	; 0x6c
 8006696:	2b00      	cmp	r3, #0
 8006698:	f040 8579 	bne.w	800718e <_strtod_l+0xbb6>
 800669c:	4652      	mov	r2, sl
 800669e:	465b      	mov	r3, fp
 80066a0:	e7e2      	b.n	8006668 <_strtod_l+0x90>
 80066a2:	2200      	movs	r2, #0
 80066a4:	e7ef      	b.n	8006686 <_strtod_l+0xae>
 80066a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80066a8:	b13a      	cbz	r2, 80066ba <_strtod_l+0xe2>
 80066aa:	2135      	movs	r1, #53	; 0x35
 80066ac:	a81e      	add	r0, sp, #120	; 0x78
 80066ae:	f002 fb8d 	bl	8008dcc <__copybits>
 80066b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80066b4:	4648      	mov	r0, r9
 80066b6:	f001 fffa 	bl	80086ae <_Bfree>
 80066ba:	3c01      	subs	r4, #1
 80066bc:	2c04      	cmp	r4, #4
 80066be:	d806      	bhi.n	80066ce <_strtod_l+0xf6>
 80066c0:	e8df f004 	tbb	[pc, r4]
 80066c4:	1714030a 	.word	0x1714030a
 80066c8:	0a          	.byte	0x0a
 80066c9:	00          	.byte	0x00
 80066ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80066ce:	0730      	lsls	r0, r6, #28
 80066d0:	d5c1      	bpl.n	8006656 <_strtod_l+0x7e>
 80066d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80066d6:	e7be      	b.n	8006656 <_strtod_l+0x7e>
 80066d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80066dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80066de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80066ea:	e7f0      	b.n	80066ce <_strtod_l+0xf6>
 80066ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006860 <_strtod_l+0x288>
 80066f0:	e7ed      	b.n	80066ce <_strtod_l+0xf6>
 80066f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80066f6:	f04f 3aff 	mov.w	sl, #4294967295
 80066fa:	e7e8      	b.n	80066ce <_strtod_l+0xf6>
 80066fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	921b      	str	r2, [sp, #108]	; 0x6c
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b30      	cmp	r3, #48	; 0x30
 8006706:	d0f9      	beq.n	80066fc <_strtod_l+0x124>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0a4      	beq.n	8006656 <_strtod_l+0x7e>
 800670c:	2301      	movs	r3, #1
 800670e:	2500      	movs	r5, #0
 8006710:	9306      	str	r3, [sp, #24]
 8006712:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006714:	9308      	str	r3, [sp, #32]
 8006716:	9507      	str	r5, [sp, #28]
 8006718:	9505      	str	r5, [sp, #20]
 800671a:	220a      	movs	r2, #10
 800671c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800671e:	7807      	ldrb	r7, [r0, #0]
 8006720:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006724:	b2d9      	uxtb	r1, r3
 8006726:	2909      	cmp	r1, #9
 8006728:	d929      	bls.n	800677e <_strtod_l+0x1a6>
 800672a:	4622      	mov	r2, r4
 800672c:	f8d8 1000 	ldr.w	r1, [r8]
 8006730:	f002 fda0 	bl	8009274 <strncmp>
 8006734:	2800      	cmp	r0, #0
 8006736:	d031      	beq.n	800679c <_strtod_l+0x1c4>
 8006738:	2000      	movs	r0, #0
 800673a:	9c05      	ldr	r4, [sp, #20]
 800673c:	9004      	str	r0, [sp, #16]
 800673e:	463b      	mov	r3, r7
 8006740:	4602      	mov	r2, r0
 8006742:	2b65      	cmp	r3, #101	; 0x65
 8006744:	d001      	beq.n	800674a <_strtod_l+0x172>
 8006746:	2b45      	cmp	r3, #69	; 0x45
 8006748:	d114      	bne.n	8006774 <_strtod_l+0x19c>
 800674a:	b924      	cbnz	r4, 8006756 <_strtod_l+0x17e>
 800674c:	b910      	cbnz	r0, 8006754 <_strtod_l+0x17c>
 800674e:	9b06      	ldr	r3, [sp, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d09e      	beq.n	8006692 <_strtod_l+0xba>
 8006754:	2400      	movs	r4, #0
 8006756:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006758:	1c73      	adds	r3, r6, #1
 800675a:	931b      	str	r3, [sp, #108]	; 0x6c
 800675c:	7873      	ldrb	r3, [r6, #1]
 800675e:	2b2b      	cmp	r3, #43	; 0x2b
 8006760:	d078      	beq.n	8006854 <_strtod_l+0x27c>
 8006762:	2b2d      	cmp	r3, #45	; 0x2d
 8006764:	d070      	beq.n	8006848 <_strtod_l+0x270>
 8006766:	f04f 0c00 	mov.w	ip, #0
 800676a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800676e:	2f09      	cmp	r7, #9
 8006770:	d97c      	bls.n	800686c <_strtod_l+0x294>
 8006772:	961b      	str	r6, [sp, #108]	; 0x6c
 8006774:	f04f 0e00 	mov.w	lr, #0
 8006778:	e09a      	b.n	80068b0 <_strtod_l+0x2d8>
 800677a:	2300      	movs	r3, #0
 800677c:	e7c7      	b.n	800670e <_strtod_l+0x136>
 800677e:	9905      	ldr	r1, [sp, #20]
 8006780:	2908      	cmp	r1, #8
 8006782:	bfdd      	ittte	le
 8006784:	9907      	ldrle	r1, [sp, #28]
 8006786:	fb02 3301 	mlale	r3, r2, r1, r3
 800678a:	9307      	strle	r3, [sp, #28]
 800678c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006790:	9b05      	ldr	r3, [sp, #20]
 8006792:	3001      	adds	r0, #1
 8006794:	3301      	adds	r3, #1
 8006796:	9305      	str	r3, [sp, #20]
 8006798:	901b      	str	r0, [sp, #108]	; 0x6c
 800679a:	e7bf      	b.n	800671c <_strtod_l+0x144>
 800679c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800679e:	191a      	adds	r2, r3, r4
 80067a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80067a2:	9a05      	ldr	r2, [sp, #20]
 80067a4:	5d1b      	ldrb	r3, [r3, r4]
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	d037      	beq.n	800681a <_strtod_l+0x242>
 80067aa:	9c05      	ldr	r4, [sp, #20]
 80067ac:	4602      	mov	r2, r0
 80067ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80067b2:	2909      	cmp	r1, #9
 80067b4:	d913      	bls.n	80067de <_strtod_l+0x206>
 80067b6:	2101      	movs	r1, #1
 80067b8:	9104      	str	r1, [sp, #16]
 80067ba:	e7c2      	b.n	8006742 <_strtod_l+0x16a>
 80067bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	3001      	adds	r0, #1
 80067c6:	2b30      	cmp	r3, #48	; 0x30
 80067c8:	d0f8      	beq.n	80067bc <_strtod_l+0x1e4>
 80067ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80067ce:	2a08      	cmp	r2, #8
 80067d0:	f200 84e4 	bhi.w	800719c <_strtod_l+0xbc4>
 80067d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80067d6:	9208      	str	r2, [sp, #32]
 80067d8:	4602      	mov	r2, r0
 80067da:	2000      	movs	r0, #0
 80067dc:	4604      	mov	r4, r0
 80067de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80067e2:	f100 0101 	add.w	r1, r0, #1
 80067e6:	d012      	beq.n	800680e <_strtod_l+0x236>
 80067e8:	440a      	add	r2, r1
 80067ea:	eb00 0c04 	add.w	ip, r0, r4
 80067ee:	4621      	mov	r1, r4
 80067f0:	270a      	movs	r7, #10
 80067f2:	458c      	cmp	ip, r1
 80067f4:	d113      	bne.n	800681e <_strtod_l+0x246>
 80067f6:	1821      	adds	r1, r4, r0
 80067f8:	2908      	cmp	r1, #8
 80067fa:	f104 0401 	add.w	r4, r4, #1
 80067fe:	4404      	add	r4, r0
 8006800:	dc19      	bgt.n	8006836 <_strtod_l+0x25e>
 8006802:	9b07      	ldr	r3, [sp, #28]
 8006804:	210a      	movs	r1, #10
 8006806:	fb01 e303 	mla	r3, r1, r3, lr
 800680a:	9307      	str	r3, [sp, #28]
 800680c:	2100      	movs	r1, #0
 800680e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006810:	1c58      	adds	r0, r3, #1
 8006812:	901b      	str	r0, [sp, #108]	; 0x6c
 8006814:	785b      	ldrb	r3, [r3, #1]
 8006816:	4608      	mov	r0, r1
 8006818:	e7c9      	b.n	80067ae <_strtod_l+0x1d6>
 800681a:	9805      	ldr	r0, [sp, #20]
 800681c:	e7d3      	b.n	80067c6 <_strtod_l+0x1ee>
 800681e:	2908      	cmp	r1, #8
 8006820:	f101 0101 	add.w	r1, r1, #1
 8006824:	dc03      	bgt.n	800682e <_strtod_l+0x256>
 8006826:	9b07      	ldr	r3, [sp, #28]
 8006828:	437b      	muls	r3, r7
 800682a:	9307      	str	r3, [sp, #28]
 800682c:	e7e1      	b.n	80067f2 <_strtod_l+0x21a>
 800682e:	2910      	cmp	r1, #16
 8006830:	bfd8      	it	le
 8006832:	437d      	mulle	r5, r7
 8006834:	e7dd      	b.n	80067f2 <_strtod_l+0x21a>
 8006836:	2c10      	cmp	r4, #16
 8006838:	bfdc      	itt	le
 800683a:	210a      	movle	r1, #10
 800683c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006840:	e7e4      	b.n	800680c <_strtod_l+0x234>
 8006842:	2301      	movs	r3, #1
 8006844:	9304      	str	r3, [sp, #16]
 8006846:	e781      	b.n	800674c <_strtod_l+0x174>
 8006848:	f04f 0c01 	mov.w	ip, #1
 800684c:	1cb3      	adds	r3, r6, #2
 800684e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006850:	78b3      	ldrb	r3, [r6, #2]
 8006852:	e78a      	b.n	800676a <_strtod_l+0x192>
 8006854:	f04f 0c00 	mov.w	ip, #0
 8006858:	e7f8      	b.n	800684c <_strtod_l+0x274>
 800685a:	bf00      	nop
 800685c:	0800b220 	.word	0x0800b220
 8006860:	7ff00000 	.word	0x7ff00000
 8006864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006866:	1c5f      	adds	r7, r3, #1
 8006868:	971b      	str	r7, [sp, #108]	; 0x6c
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b30      	cmp	r3, #48	; 0x30
 800686e:	d0f9      	beq.n	8006864 <_strtod_l+0x28c>
 8006870:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006874:	2f08      	cmp	r7, #8
 8006876:	f63f af7d 	bhi.w	8006774 <_strtod_l+0x19c>
 800687a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800687e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006880:	930a      	str	r3, [sp, #40]	; 0x28
 8006882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006884:	1c5f      	adds	r7, r3, #1
 8006886:	971b      	str	r7, [sp, #108]	; 0x6c
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800688e:	f1b8 0f09 	cmp.w	r8, #9
 8006892:	d937      	bls.n	8006904 <_strtod_l+0x32c>
 8006894:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006896:	1a7f      	subs	r7, r7, r1
 8006898:	2f08      	cmp	r7, #8
 800689a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800689e:	dc37      	bgt.n	8006910 <_strtod_l+0x338>
 80068a0:	45be      	cmp	lr, r7
 80068a2:	bfa8      	it	ge
 80068a4:	46be      	movge	lr, r7
 80068a6:	f1bc 0f00 	cmp.w	ip, #0
 80068aa:	d001      	beq.n	80068b0 <_strtod_l+0x2d8>
 80068ac:	f1ce 0e00 	rsb	lr, lr, #0
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	d151      	bne.n	8006958 <_strtod_l+0x380>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f47f aece 	bne.w	8006656 <_strtod_l+0x7e>
 80068ba:	9a06      	ldr	r2, [sp, #24]
 80068bc:	2a00      	cmp	r2, #0
 80068be:	f47f aeca 	bne.w	8006656 <_strtod_l+0x7e>
 80068c2:	9a04      	ldr	r2, [sp, #16]
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	f47f aee4 	bne.w	8006692 <_strtod_l+0xba>
 80068ca:	2b4e      	cmp	r3, #78	; 0x4e
 80068cc:	d027      	beq.n	800691e <_strtod_l+0x346>
 80068ce:	dc21      	bgt.n	8006914 <_strtod_l+0x33c>
 80068d0:	2b49      	cmp	r3, #73	; 0x49
 80068d2:	f47f aede 	bne.w	8006692 <_strtod_l+0xba>
 80068d6:	49a0      	ldr	r1, [pc, #640]	; (8006b58 <_strtod_l+0x580>)
 80068d8:	a81b      	add	r0, sp, #108	; 0x6c
 80068da:	f001 fdd7 	bl	800848c <__match>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f43f aed7 	beq.w	8006692 <_strtod_l+0xba>
 80068e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068e6:	499d      	ldr	r1, [pc, #628]	; (8006b5c <_strtod_l+0x584>)
 80068e8:	3b01      	subs	r3, #1
 80068ea:	a81b      	add	r0, sp, #108	; 0x6c
 80068ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80068ee:	f001 fdcd 	bl	800848c <__match>
 80068f2:	b910      	cbnz	r0, 80068fa <_strtod_l+0x322>
 80068f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068f6:	3301      	adds	r3, #1
 80068f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80068fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006b70 <_strtod_l+0x598>
 80068fe:	f04f 0a00 	mov.w	sl, #0
 8006902:	e6a8      	b.n	8006656 <_strtod_l+0x7e>
 8006904:	210a      	movs	r1, #10
 8006906:	fb01 3e0e 	mla	lr, r1, lr, r3
 800690a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800690e:	e7b8      	b.n	8006882 <_strtod_l+0x2aa>
 8006910:	46be      	mov	lr, r7
 8006912:	e7c8      	b.n	80068a6 <_strtod_l+0x2ce>
 8006914:	2b69      	cmp	r3, #105	; 0x69
 8006916:	d0de      	beq.n	80068d6 <_strtod_l+0x2fe>
 8006918:	2b6e      	cmp	r3, #110	; 0x6e
 800691a:	f47f aeba 	bne.w	8006692 <_strtod_l+0xba>
 800691e:	4990      	ldr	r1, [pc, #576]	; (8006b60 <_strtod_l+0x588>)
 8006920:	a81b      	add	r0, sp, #108	; 0x6c
 8006922:	f001 fdb3 	bl	800848c <__match>
 8006926:	2800      	cmp	r0, #0
 8006928:	f43f aeb3 	beq.w	8006692 <_strtod_l+0xba>
 800692c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b28      	cmp	r3, #40	; 0x28
 8006932:	d10e      	bne.n	8006952 <_strtod_l+0x37a>
 8006934:	aa1e      	add	r2, sp, #120	; 0x78
 8006936:	498b      	ldr	r1, [pc, #556]	; (8006b64 <_strtod_l+0x58c>)
 8006938:	a81b      	add	r0, sp, #108	; 0x6c
 800693a:	f001 fdbb 	bl	80084b4 <__hexnan>
 800693e:	2805      	cmp	r0, #5
 8006940:	d107      	bne.n	8006952 <_strtod_l+0x37a>
 8006942:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006944:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006948:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800694c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006950:	e681      	b.n	8006656 <_strtod_l+0x7e>
 8006952:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006b78 <_strtod_l+0x5a0>
 8006956:	e7d2      	b.n	80068fe <_strtod_l+0x326>
 8006958:	ebae 0302 	sub.w	r3, lr, r2
 800695c:	9306      	str	r3, [sp, #24]
 800695e:	9b05      	ldr	r3, [sp, #20]
 8006960:	9807      	ldr	r0, [sp, #28]
 8006962:	2b00      	cmp	r3, #0
 8006964:	bf08      	it	eq
 8006966:	4623      	moveq	r3, r4
 8006968:	2c10      	cmp	r4, #16
 800696a:	9305      	str	r3, [sp, #20]
 800696c:	46a0      	mov	r8, r4
 800696e:	bfa8      	it	ge
 8006970:	f04f 0810 	movge.w	r8, #16
 8006974:	f7f9 fdc6 	bl	8000504 <__aeabi_ui2d>
 8006978:	2c09      	cmp	r4, #9
 800697a:	4682      	mov	sl, r0
 800697c:	468b      	mov	fp, r1
 800697e:	dc13      	bgt.n	80069a8 <_strtod_l+0x3d0>
 8006980:	9b06      	ldr	r3, [sp, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f43f ae67 	beq.w	8006656 <_strtod_l+0x7e>
 8006988:	9b06      	ldr	r3, [sp, #24]
 800698a:	dd7a      	ble.n	8006a82 <_strtod_l+0x4aa>
 800698c:	2b16      	cmp	r3, #22
 800698e:	dc61      	bgt.n	8006a54 <_strtod_l+0x47c>
 8006990:	4a75      	ldr	r2, [pc, #468]	; (8006b68 <_strtod_l+0x590>)
 8006992:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006996:	e9de 0100 	ldrd	r0, r1, [lr]
 800699a:	4652      	mov	r2, sl
 800699c:	465b      	mov	r3, fp
 800699e:	f7f9 fe2b 	bl	80005f8 <__aeabi_dmul>
 80069a2:	4682      	mov	sl, r0
 80069a4:	468b      	mov	fp, r1
 80069a6:	e656      	b.n	8006656 <_strtod_l+0x7e>
 80069a8:	4b6f      	ldr	r3, [pc, #444]	; (8006b68 <_strtod_l+0x590>)
 80069aa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80069ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80069b2:	f7f9 fe21 	bl	80005f8 <__aeabi_dmul>
 80069b6:	4606      	mov	r6, r0
 80069b8:	4628      	mov	r0, r5
 80069ba:	460f      	mov	r7, r1
 80069bc:	f7f9 fda2 	bl	8000504 <__aeabi_ui2d>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fc60 	bl	800028c <__adddf3>
 80069cc:	2c0f      	cmp	r4, #15
 80069ce:	4682      	mov	sl, r0
 80069d0:	468b      	mov	fp, r1
 80069d2:	ddd5      	ble.n	8006980 <_strtod_l+0x3a8>
 80069d4:	9b06      	ldr	r3, [sp, #24]
 80069d6:	eba4 0808 	sub.w	r8, r4, r8
 80069da:	4498      	add	r8, r3
 80069dc:	f1b8 0f00 	cmp.w	r8, #0
 80069e0:	f340 8096 	ble.w	8006b10 <_strtod_l+0x538>
 80069e4:	f018 030f 	ands.w	r3, r8, #15
 80069e8:	d00a      	beq.n	8006a00 <_strtod_l+0x428>
 80069ea:	495f      	ldr	r1, [pc, #380]	; (8006b68 <_strtod_l+0x590>)
 80069ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069f0:	4652      	mov	r2, sl
 80069f2:	465b      	mov	r3, fp
 80069f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069f8:	f7f9 fdfe 	bl	80005f8 <__aeabi_dmul>
 80069fc:	4682      	mov	sl, r0
 80069fe:	468b      	mov	fp, r1
 8006a00:	f038 080f 	bics.w	r8, r8, #15
 8006a04:	d073      	beq.n	8006aee <_strtod_l+0x516>
 8006a06:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006a0a:	dd47      	ble.n	8006a9c <_strtod_l+0x4c4>
 8006a0c:	2400      	movs	r4, #0
 8006a0e:	46a0      	mov	r8, r4
 8006a10:	9407      	str	r4, [sp, #28]
 8006a12:	9405      	str	r4, [sp, #20]
 8006a14:	2322      	movs	r3, #34	; 0x22
 8006a16:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006b70 <_strtod_l+0x598>
 8006a1a:	f8c9 3000 	str.w	r3, [r9]
 8006a1e:	f04f 0a00 	mov.w	sl, #0
 8006a22:	9b07      	ldr	r3, [sp, #28]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f43f ae16 	beq.w	8006656 <_strtod_l+0x7e>
 8006a2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a2c:	4648      	mov	r0, r9
 8006a2e:	f001 fe3e 	bl	80086ae <_Bfree>
 8006a32:	9905      	ldr	r1, [sp, #20]
 8006a34:	4648      	mov	r0, r9
 8006a36:	f001 fe3a 	bl	80086ae <_Bfree>
 8006a3a:	4641      	mov	r1, r8
 8006a3c:	4648      	mov	r0, r9
 8006a3e:	f001 fe36 	bl	80086ae <_Bfree>
 8006a42:	9907      	ldr	r1, [sp, #28]
 8006a44:	4648      	mov	r0, r9
 8006a46:	f001 fe32 	bl	80086ae <_Bfree>
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4648      	mov	r0, r9
 8006a4e:	f001 fe2e 	bl	80086ae <_Bfree>
 8006a52:	e600      	b.n	8006656 <_strtod_l+0x7e>
 8006a54:	9a06      	ldr	r2, [sp, #24]
 8006a56:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	dbba      	blt.n	80069d4 <_strtod_l+0x3fc>
 8006a5e:	4d42      	ldr	r5, [pc, #264]	; (8006b68 <_strtod_l+0x590>)
 8006a60:	f1c4 040f 	rsb	r4, r4, #15
 8006a64:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006a68:	4652      	mov	r2, sl
 8006a6a:	465b      	mov	r3, fp
 8006a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a70:	f7f9 fdc2 	bl	80005f8 <__aeabi_dmul>
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	1b1c      	subs	r4, r3, r4
 8006a78:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006a7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a80:	e78d      	b.n	800699e <_strtod_l+0x3c6>
 8006a82:	f113 0f16 	cmn.w	r3, #22
 8006a86:	dba5      	blt.n	80069d4 <_strtod_l+0x3fc>
 8006a88:	4a37      	ldr	r2, [pc, #220]	; (8006b68 <_strtod_l+0x590>)
 8006a8a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006a8e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006a92:	4650      	mov	r0, sl
 8006a94:	4659      	mov	r1, fp
 8006a96:	f7f9 fed9 	bl	800084c <__aeabi_ddiv>
 8006a9a:	e782      	b.n	80069a2 <_strtod_l+0x3ca>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4e33      	ldr	r6, [pc, #204]	; (8006b6c <_strtod_l+0x594>)
 8006aa0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006aa4:	4650      	mov	r0, sl
 8006aa6:	4659      	mov	r1, fp
 8006aa8:	461d      	mov	r5, r3
 8006aaa:	f1b8 0f01 	cmp.w	r8, #1
 8006aae:	dc21      	bgt.n	8006af4 <_strtod_l+0x51c>
 8006ab0:	b10b      	cbz	r3, 8006ab6 <_strtod_l+0x4de>
 8006ab2:	4682      	mov	sl, r0
 8006ab4:	468b      	mov	fp, r1
 8006ab6:	4b2d      	ldr	r3, [pc, #180]	; (8006b6c <_strtod_l+0x594>)
 8006ab8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006abc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	465b      	mov	r3, fp
 8006ac4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006ac8:	f7f9 fd96 	bl	80005f8 <__aeabi_dmul>
 8006acc:	4b28      	ldr	r3, [pc, #160]	; (8006b70 <_strtod_l+0x598>)
 8006ace:	460a      	mov	r2, r1
 8006ad0:	400b      	ands	r3, r1
 8006ad2:	4928      	ldr	r1, [pc, #160]	; (8006b74 <_strtod_l+0x59c>)
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	4682      	mov	sl, r0
 8006ad8:	d898      	bhi.n	8006a0c <_strtod_l+0x434>
 8006ada:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ade:	428b      	cmp	r3, r1
 8006ae0:	bf86      	itte	hi
 8006ae2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006b7c <_strtod_l+0x5a4>
 8006ae6:	f04f 3aff 	movhi.w	sl, #4294967295
 8006aea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006aee:	2300      	movs	r3, #0
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	e077      	b.n	8006be4 <_strtod_l+0x60c>
 8006af4:	f018 0f01 	tst.w	r8, #1
 8006af8:	d006      	beq.n	8006b08 <_strtod_l+0x530>
 8006afa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	f7f9 fd79 	bl	80005f8 <__aeabi_dmul>
 8006b06:	2301      	movs	r3, #1
 8006b08:	3501      	adds	r5, #1
 8006b0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006b0e:	e7cc      	b.n	8006aaa <_strtod_l+0x4d2>
 8006b10:	d0ed      	beq.n	8006aee <_strtod_l+0x516>
 8006b12:	f1c8 0800 	rsb	r8, r8, #0
 8006b16:	f018 020f 	ands.w	r2, r8, #15
 8006b1a:	d00a      	beq.n	8006b32 <_strtod_l+0x55a>
 8006b1c:	4b12      	ldr	r3, [pc, #72]	; (8006b68 <_strtod_l+0x590>)
 8006b1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b22:	4650      	mov	r0, sl
 8006b24:	4659      	mov	r1, fp
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f7f9 fe8f 	bl	800084c <__aeabi_ddiv>
 8006b2e:	4682      	mov	sl, r0
 8006b30:	468b      	mov	fp, r1
 8006b32:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006b36:	d0da      	beq.n	8006aee <_strtod_l+0x516>
 8006b38:	f1b8 0f1f 	cmp.w	r8, #31
 8006b3c:	dd20      	ble.n	8006b80 <_strtod_l+0x5a8>
 8006b3e:	2400      	movs	r4, #0
 8006b40:	46a0      	mov	r8, r4
 8006b42:	9407      	str	r4, [sp, #28]
 8006b44:	9405      	str	r4, [sp, #20]
 8006b46:	2322      	movs	r3, #34	; 0x22
 8006b48:	f04f 0a00 	mov.w	sl, #0
 8006b4c:	f04f 0b00 	mov.w	fp, #0
 8006b50:	f8c9 3000 	str.w	r3, [r9]
 8006b54:	e765      	b.n	8006a22 <_strtod_l+0x44a>
 8006b56:	bf00      	nop
 8006b58:	0800b1e9 	.word	0x0800b1e9
 8006b5c:	0800b273 	.word	0x0800b273
 8006b60:	0800b1f1 	.word	0x0800b1f1
 8006b64:	0800b234 	.word	0x0800b234
 8006b68:	0800b2b0 	.word	0x0800b2b0
 8006b6c:	0800b288 	.word	0x0800b288
 8006b70:	7ff00000 	.word	0x7ff00000
 8006b74:	7ca00000 	.word	0x7ca00000
 8006b78:	fff80000 	.word	0xfff80000
 8006b7c:	7fefffff 	.word	0x7fefffff
 8006b80:	f018 0310 	ands.w	r3, r8, #16
 8006b84:	bf18      	it	ne
 8006b86:	236a      	movne	r3, #106	; 0x6a
 8006b88:	4da0      	ldr	r5, [pc, #640]	; (8006e0c <_strtod_l+0x834>)
 8006b8a:	9304      	str	r3, [sp, #16]
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	4659      	mov	r1, fp
 8006b90:	2300      	movs	r3, #0
 8006b92:	f1b8 0f00 	cmp.w	r8, #0
 8006b96:	f300 810a 	bgt.w	8006dae <_strtod_l+0x7d6>
 8006b9a:	b10b      	cbz	r3, 8006ba0 <_strtod_l+0x5c8>
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	468b      	mov	fp, r1
 8006ba0:	9b04      	ldr	r3, [sp, #16]
 8006ba2:	b1bb      	cbz	r3, 8006bd4 <_strtod_l+0x5fc>
 8006ba4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006ba8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	4659      	mov	r1, fp
 8006bb0:	dd10      	ble.n	8006bd4 <_strtod_l+0x5fc>
 8006bb2:	2b1f      	cmp	r3, #31
 8006bb4:	f340 8107 	ble.w	8006dc6 <_strtod_l+0x7ee>
 8006bb8:	2b34      	cmp	r3, #52	; 0x34
 8006bba:	bfde      	ittt	le
 8006bbc:	3b20      	suble	r3, #32
 8006bbe:	f04f 32ff 	movle.w	r2, #4294967295
 8006bc2:	fa02 f303 	lslle.w	r3, r2, r3
 8006bc6:	f04f 0a00 	mov.w	sl, #0
 8006bca:	bfcc      	ite	gt
 8006bcc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006bd0:	ea03 0b01 	andle.w	fp, r3, r1
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4650      	mov	r0, sl
 8006bda:	4659      	mov	r1, fp
 8006bdc:	f7f9 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d1ac      	bne.n	8006b3e <_strtod_l+0x566>
 8006be4:	9b07      	ldr	r3, [sp, #28]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	9a05      	ldr	r2, [sp, #20]
 8006bea:	9908      	ldr	r1, [sp, #32]
 8006bec:	4623      	mov	r3, r4
 8006bee:	4648      	mov	r0, r9
 8006bf0:	f001 fdaf 	bl	8008752 <__s2b>
 8006bf4:	9007      	str	r0, [sp, #28]
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f43f af08 	beq.w	8006a0c <_strtod_l+0x434>
 8006bfc:	9a06      	ldr	r2, [sp, #24]
 8006bfe:	9b06      	ldr	r3, [sp, #24]
 8006c00:	2a00      	cmp	r2, #0
 8006c02:	f1c3 0300 	rsb	r3, r3, #0
 8006c06:	bfa8      	it	ge
 8006c08:	2300      	movge	r3, #0
 8006c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8006c0c:	2400      	movs	r4, #0
 8006c0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006c12:	9316      	str	r3, [sp, #88]	; 0x58
 8006c14:	46a0      	mov	r8, r4
 8006c16:	9b07      	ldr	r3, [sp, #28]
 8006c18:	4648      	mov	r0, r9
 8006c1a:	6859      	ldr	r1, [r3, #4]
 8006c1c:	f001 fd13 	bl	8008646 <_Balloc>
 8006c20:	9005      	str	r0, [sp, #20]
 8006c22:	2800      	cmp	r0, #0
 8006c24:	f43f aef6 	beq.w	8006a14 <_strtod_l+0x43c>
 8006c28:	9b07      	ldr	r3, [sp, #28]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	3202      	adds	r2, #2
 8006c2e:	f103 010c 	add.w	r1, r3, #12
 8006c32:	0092      	lsls	r2, r2, #2
 8006c34:	300c      	adds	r0, #12
 8006c36:	f001 fcfb 	bl	8008630 <memcpy>
 8006c3a:	aa1e      	add	r2, sp, #120	; 0x78
 8006c3c:	a91d      	add	r1, sp, #116	; 0x74
 8006c3e:	ec4b ab10 	vmov	d0, sl, fp
 8006c42:	4648      	mov	r0, r9
 8006c44:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006c48:	f002 f83e 	bl	8008cc8 <__d2b>
 8006c4c:	901c      	str	r0, [sp, #112]	; 0x70
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f43f aee0 	beq.w	8006a14 <_strtod_l+0x43c>
 8006c54:	2101      	movs	r1, #1
 8006c56:	4648      	mov	r0, r9
 8006c58:	f001 fe07 	bl	800886a <__i2b>
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	f43f aed8 	beq.w	8006a14 <_strtod_l+0x43c>
 8006c64:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006c66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	bfab      	itete	ge
 8006c6c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006c6e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006c70:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006c72:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006c74:	bfac      	ite	ge
 8006c76:	18f7      	addge	r7, r6, r3
 8006c78:	1b9d      	sublt	r5, r3, r6
 8006c7a:	9b04      	ldr	r3, [sp, #16]
 8006c7c:	1af6      	subs	r6, r6, r3
 8006c7e:	4416      	add	r6, r2
 8006c80:	4b63      	ldr	r3, [pc, #396]	; (8006e10 <_strtod_l+0x838>)
 8006c82:	3e01      	subs	r6, #1
 8006c84:	429e      	cmp	r6, r3
 8006c86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c8a:	f280 80af 	bge.w	8006dec <_strtod_l+0x814>
 8006c8e:	1b9b      	subs	r3, r3, r6
 8006c90:	2b1f      	cmp	r3, #31
 8006c92:	eba2 0203 	sub.w	r2, r2, r3
 8006c96:	f04f 0101 	mov.w	r1, #1
 8006c9a:	f300 809b 	bgt.w	8006dd4 <_strtod_l+0x7fc>
 8006c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ca8:	18be      	adds	r6, r7, r2
 8006caa:	9b04      	ldr	r3, [sp, #16]
 8006cac:	42b7      	cmp	r7, r6
 8006cae:	4415      	add	r5, r2
 8006cb0:	441d      	add	r5, r3
 8006cb2:	463b      	mov	r3, r7
 8006cb4:	bfa8      	it	ge
 8006cb6:	4633      	movge	r3, r6
 8006cb8:	42ab      	cmp	r3, r5
 8006cba:	bfa8      	it	ge
 8006cbc:	462b      	movge	r3, r5
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bfc2      	ittt	gt
 8006cc2:	1af6      	subgt	r6, r6, r3
 8006cc4:	1aed      	subgt	r5, r5, r3
 8006cc6:	1aff      	subgt	r7, r7, r3
 8006cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cca:	b1bb      	cbz	r3, 8006cfc <_strtod_l+0x724>
 8006ccc:	4641      	mov	r1, r8
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4648      	mov	r0, r9
 8006cd2:	f001 fe69 	bl	80089a8 <__pow5mult>
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	f43f ae9b 	beq.w	8006a14 <_strtod_l+0x43c>
 8006cde:	4601      	mov	r1, r0
 8006ce0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ce2:	4648      	mov	r0, r9
 8006ce4:	f001 fdca 	bl	800887c <__multiply>
 8006ce8:	900c      	str	r0, [sp, #48]	; 0x30
 8006cea:	2800      	cmp	r0, #0
 8006cec:	f43f ae92 	beq.w	8006a14 <_strtod_l+0x43c>
 8006cf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006cf2:	4648      	mov	r0, r9
 8006cf4:	f001 fcdb 	bl	80086ae <_Bfree>
 8006cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cfa:	931c      	str	r3, [sp, #112]	; 0x70
 8006cfc:	2e00      	cmp	r6, #0
 8006cfe:	dc7a      	bgt.n	8006df6 <_strtod_l+0x81e>
 8006d00:	9b06      	ldr	r3, [sp, #24]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	dd08      	ble.n	8006d18 <_strtod_l+0x740>
 8006d06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d08:	9905      	ldr	r1, [sp, #20]
 8006d0a:	4648      	mov	r0, r9
 8006d0c:	f001 fe4c 	bl	80089a8 <__pow5mult>
 8006d10:	9005      	str	r0, [sp, #20]
 8006d12:	2800      	cmp	r0, #0
 8006d14:	f43f ae7e 	beq.w	8006a14 <_strtod_l+0x43c>
 8006d18:	2d00      	cmp	r5, #0
 8006d1a:	dd08      	ble.n	8006d2e <_strtod_l+0x756>
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	9905      	ldr	r1, [sp, #20]
 8006d20:	4648      	mov	r0, r9
 8006d22:	f001 fe8f 	bl	8008a44 <__lshift>
 8006d26:	9005      	str	r0, [sp, #20]
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f43f ae73 	beq.w	8006a14 <_strtod_l+0x43c>
 8006d2e:	2f00      	cmp	r7, #0
 8006d30:	dd08      	ble.n	8006d44 <_strtod_l+0x76c>
 8006d32:	4641      	mov	r1, r8
 8006d34:	463a      	mov	r2, r7
 8006d36:	4648      	mov	r0, r9
 8006d38:	f001 fe84 	bl	8008a44 <__lshift>
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f ae68 	beq.w	8006a14 <_strtod_l+0x43c>
 8006d44:	9a05      	ldr	r2, [sp, #20]
 8006d46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d48:	4648      	mov	r0, r9
 8006d4a:	f001 fee9 	bl	8008b20 <__mdiff>
 8006d4e:	4604      	mov	r4, r0
 8006d50:	2800      	cmp	r0, #0
 8006d52:	f43f ae5f 	beq.w	8006a14 <_strtod_l+0x43c>
 8006d56:	68c3      	ldr	r3, [r0, #12]
 8006d58:	930c      	str	r3, [sp, #48]	; 0x30
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60c3      	str	r3, [r0, #12]
 8006d5e:	4641      	mov	r1, r8
 8006d60:	f001 fec4 	bl	8008aec <__mcmp>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	da55      	bge.n	8006e14 <_strtod_l+0x83c>
 8006d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d6a:	b9e3      	cbnz	r3, 8006da6 <_strtod_l+0x7ce>
 8006d6c:	f1ba 0f00 	cmp.w	sl, #0
 8006d70:	d119      	bne.n	8006da6 <_strtod_l+0x7ce>
 8006d72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d76:	b9b3      	cbnz	r3, 8006da6 <_strtod_l+0x7ce>
 8006d78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d7c:	0d1b      	lsrs	r3, r3, #20
 8006d7e:	051b      	lsls	r3, r3, #20
 8006d80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d84:	d90f      	bls.n	8006da6 <_strtod_l+0x7ce>
 8006d86:	6963      	ldr	r3, [r4, #20]
 8006d88:	b913      	cbnz	r3, 8006d90 <_strtod_l+0x7b8>
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	dd0a      	ble.n	8006da6 <_strtod_l+0x7ce>
 8006d90:	4621      	mov	r1, r4
 8006d92:	2201      	movs	r2, #1
 8006d94:	4648      	mov	r0, r9
 8006d96:	f001 fe55 	bl	8008a44 <__lshift>
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	f001 fea5 	bl	8008aec <__mcmp>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	dc67      	bgt.n	8006e76 <_strtod_l+0x89e>
 8006da6:	9b04      	ldr	r3, [sp, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d171      	bne.n	8006e90 <_strtod_l+0x8b8>
 8006dac:	e63d      	b.n	8006a2a <_strtod_l+0x452>
 8006dae:	f018 0f01 	tst.w	r8, #1
 8006db2:	d004      	beq.n	8006dbe <_strtod_l+0x7e6>
 8006db4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006db8:	f7f9 fc1e 	bl	80005f8 <__aeabi_dmul>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006dc2:	3508      	adds	r5, #8
 8006dc4:	e6e5      	b.n	8006b92 <_strtod_l+0x5ba>
 8006dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	ea03 0a0a 	and.w	sl, r3, sl
 8006dd2:	e6ff      	b.n	8006bd4 <_strtod_l+0x5fc>
 8006dd4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006dd8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006ddc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006de0:	36e2      	adds	r6, #226	; 0xe2
 8006de2:	fa01 f306 	lsl.w	r3, r1, r6
 8006de6:	930a      	str	r3, [sp, #40]	; 0x28
 8006de8:	910f      	str	r1, [sp, #60]	; 0x3c
 8006dea:	e75d      	b.n	8006ca8 <_strtod_l+0x6d0>
 8006dec:	2300      	movs	r3, #0
 8006dee:	930a      	str	r3, [sp, #40]	; 0x28
 8006df0:	2301      	movs	r3, #1
 8006df2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006df4:	e758      	b.n	8006ca8 <_strtod_l+0x6d0>
 8006df6:	4632      	mov	r2, r6
 8006df8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006dfa:	4648      	mov	r0, r9
 8006dfc:	f001 fe22 	bl	8008a44 <__lshift>
 8006e00:	901c      	str	r0, [sp, #112]	; 0x70
 8006e02:	2800      	cmp	r0, #0
 8006e04:	f47f af7c 	bne.w	8006d00 <_strtod_l+0x728>
 8006e08:	e604      	b.n	8006a14 <_strtod_l+0x43c>
 8006e0a:	bf00      	nop
 8006e0c:	0800b248 	.word	0x0800b248
 8006e10:	fffffc02 	.word	0xfffffc02
 8006e14:	465d      	mov	r5, fp
 8006e16:	f040 8086 	bne.w	8006f26 <_strtod_l+0x94e>
 8006e1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e20:	b32a      	cbz	r2, 8006e6e <_strtod_l+0x896>
 8006e22:	4aaf      	ldr	r2, [pc, #700]	; (80070e0 <_strtod_l+0xb08>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d153      	bne.n	8006ed0 <_strtod_l+0x8f8>
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	b1d3      	cbz	r3, 8006e64 <_strtod_l+0x88c>
 8006e2e:	4aad      	ldr	r2, [pc, #692]	; (80070e4 <_strtod_l+0xb0c>)
 8006e30:	402a      	ands	r2, r5
 8006e32:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006e36:	f04f 31ff 	mov.w	r1, #4294967295
 8006e3a:	d816      	bhi.n	8006e6a <_strtod_l+0x892>
 8006e3c:	0d12      	lsrs	r2, r2, #20
 8006e3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	4298      	cmp	r0, r3
 8006e48:	d142      	bne.n	8006ed0 <_strtod_l+0x8f8>
 8006e4a:	4ba7      	ldr	r3, [pc, #668]	; (80070e8 <_strtod_l+0xb10>)
 8006e4c:	429d      	cmp	r5, r3
 8006e4e:	d102      	bne.n	8006e56 <_strtod_l+0x87e>
 8006e50:	3001      	adds	r0, #1
 8006e52:	f43f addf 	beq.w	8006a14 <_strtod_l+0x43c>
 8006e56:	4ba3      	ldr	r3, [pc, #652]	; (80070e4 <_strtod_l+0xb0c>)
 8006e58:	402b      	ands	r3, r5
 8006e5a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006e5e:	f04f 0a00 	mov.w	sl, #0
 8006e62:	e7a0      	b.n	8006da6 <_strtod_l+0x7ce>
 8006e64:	f04f 33ff 	mov.w	r3, #4294967295
 8006e68:	e7ed      	b.n	8006e46 <_strtod_l+0x86e>
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	e7eb      	b.n	8006e46 <_strtod_l+0x86e>
 8006e6e:	bb7b      	cbnz	r3, 8006ed0 <_strtod_l+0x8f8>
 8006e70:	f1ba 0f00 	cmp.w	sl, #0
 8006e74:	d12c      	bne.n	8006ed0 <_strtod_l+0x8f8>
 8006e76:	9904      	ldr	r1, [sp, #16]
 8006e78:	4a9a      	ldr	r2, [pc, #616]	; (80070e4 <_strtod_l+0xb0c>)
 8006e7a:	465b      	mov	r3, fp
 8006e7c:	b1f1      	cbz	r1, 8006ebc <_strtod_l+0x8e4>
 8006e7e:	ea02 010b 	and.w	r1, r2, fp
 8006e82:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e86:	dc19      	bgt.n	8006ebc <_strtod_l+0x8e4>
 8006e88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e8c:	f77f ae5b 	ble.w	8006b46 <_strtod_l+0x56e>
 8006e90:	4a96      	ldr	r2, [pc, #600]	; (80070ec <_strtod_l+0xb14>)
 8006e92:	2300      	movs	r3, #0
 8006e94:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006e98:	4650      	mov	r0, sl
 8006e9a:	4659      	mov	r1, fp
 8006e9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ea0:	f7f9 fbaa 	bl	80005f8 <__aeabi_dmul>
 8006ea4:	4682      	mov	sl, r0
 8006ea6:	468b      	mov	fp, r1
 8006ea8:	2900      	cmp	r1, #0
 8006eaa:	f47f adbe 	bne.w	8006a2a <_strtod_l+0x452>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f47f adbb 	bne.w	8006a2a <_strtod_l+0x452>
 8006eb4:	2322      	movs	r3, #34	; 0x22
 8006eb6:	f8c9 3000 	str.w	r3, [r9]
 8006eba:	e5b6      	b.n	8006a2a <_strtod_l+0x452>
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006ec2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006ec6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006eca:	f04f 3aff 	mov.w	sl, #4294967295
 8006ece:	e76a      	b.n	8006da6 <_strtod_l+0x7ce>
 8006ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed2:	b193      	cbz	r3, 8006efa <_strtod_l+0x922>
 8006ed4:	422b      	tst	r3, r5
 8006ed6:	f43f af66 	beq.w	8006da6 <_strtod_l+0x7ce>
 8006eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006edc:	9a04      	ldr	r2, [sp, #16]
 8006ede:	4650      	mov	r0, sl
 8006ee0:	4659      	mov	r1, fp
 8006ee2:	b173      	cbz	r3, 8006f02 <_strtod_l+0x92a>
 8006ee4:	f7ff fb5c 	bl	80065a0 <sulp>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ef0:	f7f9 f9cc 	bl	800028c <__adddf3>
 8006ef4:	4682      	mov	sl, r0
 8006ef6:	468b      	mov	fp, r1
 8006ef8:	e755      	b.n	8006da6 <_strtod_l+0x7ce>
 8006efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006efc:	ea13 0f0a 	tst.w	r3, sl
 8006f00:	e7e9      	b.n	8006ed6 <_strtod_l+0x8fe>
 8006f02:	f7ff fb4d 	bl	80065a0 <sulp>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006f0e:	f7f9 f9bb 	bl	8000288 <__aeabi_dsub>
 8006f12:	2200      	movs	r2, #0
 8006f14:	2300      	movs	r3, #0
 8006f16:	4682      	mov	sl, r0
 8006f18:	468b      	mov	fp, r1
 8006f1a:	f7f9 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f47f ae11 	bne.w	8006b46 <_strtod_l+0x56e>
 8006f24:	e73f      	b.n	8006da6 <_strtod_l+0x7ce>
 8006f26:	4641      	mov	r1, r8
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f001 ff1c 	bl	8008d66 <__ratio>
 8006f2e:	ec57 6b10 	vmov	r6, r7, d0
 8006f32:	2200      	movs	r2, #0
 8006f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f38:	ee10 0a10 	vmov	r0, s0
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	f7f9 fdd7 	bl	8000af0 <__aeabi_dcmple>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d077      	beq.n	8007036 <_strtod_l+0xa5e>
 8006f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d04a      	beq.n	8006fe2 <_strtod_l+0xa0a>
 8006f4c:	4b68      	ldr	r3, [pc, #416]	; (80070f0 <_strtod_l+0xb18>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006f54:	4f66      	ldr	r7, [pc, #408]	; (80070f0 <_strtod_l+0xb18>)
 8006f56:	2600      	movs	r6, #0
 8006f58:	4b62      	ldr	r3, [pc, #392]	; (80070e4 <_strtod_l+0xb0c>)
 8006f5a:	402b      	ands	r3, r5
 8006f5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f60:	4b64      	ldr	r3, [pc, #400]	; (80070f4 <_strtod_l+0xb1c>)
 8006f62:	429a      	cmp	r2, r3
 8006f64:	f040 80ce 	bne.w	8007104 <_strtod_l+0xb2c>
 8006f68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f70:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8006f74:	ec4b ab10 	vmov	d0, sl, fp
 8006f78:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006f7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f80:	f001 fe2c 	bl	8008bdc <__ulp>
 8006f84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f88:	ec53 2b10 	vmov	r2, r3, d0
 8006f8c:	f7f9 fb34 	bl	80005f8 <__aeabi_dmul>
 8006f90:	4652      	mov	r2, sl
 8006f92:	465b      	mov	r3, fp
 8006f94:	f7f9 f97a 	bl	800028c <__adddf3>
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4952      	ldr	r1, [pc, #328]	; (80070e4 <_strtod_l+0xb0c>)
 8006f9c:	4a56      	ldr	r2, [pc, #344]	; (80070f8 <_strtod_l+0xb20>)
 8006f9e:	4019      	ands	r1, r3
 8006fa0:	4291      	cmp	r1, r2
 8006fa2:	4682      	mov	sl, r0
 8006fa4:	d95b      	bls.n	800705e <_strtod_l+0xa86>
 8006fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d103      	bne.n	8006fb8 <_strtod_l+0x9e0>
 8006fb0:	9b08      	ldr	r3, [sp, #32]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	f43f ad2e 	beq.w	8006a14 <_strtod_l+0x43c>
 8006fb8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80070e8 <_strtod_l+0xb10>
 8006fbc:	f04f 3aff 	mov.w	sl, #4294967295
 8006fc0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fc2:	4648      	mov	r0, r9
 8006fc4:	f001 fb73 	bl	80086ae <_Bfree>
 8006fc8:	9905      	ldr	r1, [sp, #20]
 8006fca:	4648      	mov	r0, r9
 8006fcc:	f001 fb6f 	bl	80086ae <_Bfree>
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	4648      	mov	r0, r9
 8006fd4:	f001 fb6b 	bl	80086ae <_Bfree>
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4648      	mov	r0, r9
 8006fdc:	f001 fb67 	bl	80086ae <_Bfree>
 8006fe0:	e619      	b.n	8006c16 <_strtod_l+0x63e>
 8006fe2:	f1ba 0f00 	cmp.w	sl, #0
 8006fe6:	d11a      	bne.n	800701e <_strtod_l+0xa46>
 8006fe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fec:	b9eb      	cbnz	r3, 800702a <_strtod_l+0xa52>
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4b3f      	ldr	r3, [pc, #252]	; (80070f0 <_strtod_l+0xb18>)
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	f7f9 fd71 	bl	8000adc <__aeabi_dcmplt>
 8006ffa:	b9c8      	cbnz	r0, 8007030 <_strtod_l+0xa58>
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	2200      	movs	r2, #0
 8007002:	4b3e      	ldr	r3, [pc, #248]	; (80070fc <_strtod_l+0xb24>)
 8007004:	f7f9 faf8 	bl	80005f8 <__aeabi_dmul>
 8007008:	4606      	mov	r6, r0
 800700a:	460f      	mov	r7, r1
 800700c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007010:	9618      	str	r6, [sp, #96]	; 0x60
 8007012:	9319      	str	r3, [sp, #100]	; 0x64
 8007014:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007018:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800701c:	e79c      	b.n	8006f58 <_strtod_l+0x980>
 800701e:	f1ba 0f01 	cmp.w	sl, #1
 8007022:	d102      	bne.n	800702a <_strtod_l+0xa52>
 8007024:	2d00      	cmp	r5, #0
 8007026:	f43f ad8e 	beq.w	8006b46 <_strtod_l+0x56e>
 800702a:	2200      	movs	r2, #0
 800702c:	4b34      	ldr	r3, [pc, #208]	; (8007100 <_strtod_l+0xb28>)
 800702e:	e78f      	b.n	8006f50 <_strtod_l+0x978>
 8007030:	2600      	movs	r6, #0
 8007032:	4f32      	ldr	r7, [pc, #200]	; (80070fc <_strtod_l+0xb24>)
 8007034:	e7ea      	b.n	800700c <_strtod_l+0xa34>
 8007036:	4b31      	ldr	r3, [pc, #196]	; (80070fc <_strtod_l+0xb24>)
 8007038:	4630      	mov	r0, r6
 800703a:	4639      	mov	r1, r7
 800703c:	2200      	movs	r2, #0
 800703e:	f7f9 fadb 	bl	80005f8 <__aeabi_dmul>
 8007042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007044:	4606      	mov	r6, r0
 8007046:	460f      	mov	r7, r1
 8007048:	b933      	cbnz	r3, 8007058 <_strtod_l+0xa80>
 800704a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800704e:	9010      	str	r0, [sp, #64]	; 0x40
 8007050:	9311      	str	r3, [sp, #68]	; 0x44
 8007052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007056:	e7df      	b.n	8007018 <_strtod_l+0xa40>
 8007058:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800705c:	e7f9      	b.n	8007052 <_strtod_l+0xa7a>
 800705e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007062:	9b04      	ldr	r3, [sp, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1ab      	bne.n	8006fc0 <_strtod_l+0x9e8>
 8007068:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800706c:	0d1b      	lsrs	r3, r3, #20
 800706e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007070:	051b      	lsls	r3, r3, #20
 8007072:	429a      	cmp	r2, r3
 8007074:	465d      	mov	r5, fp
 8007076:	d1a3      	bne.n	8006fc0 <_strtod_l+0x9e8>
 8007078:	4639      	mov	r1, r7
 800707a:	4630      	mov	r0, r6
 800707c:	f7f9 fd6c 	bl	8000b58 <__aeabi_d2iz>
 8007080:	f7f9 fa50 	bl	8000524 <__aeabi_i2d>
 8007084:	460b      	mov	r3, r1
 8007086:	4602      	mov	r2, r0
 8007088:	4639      	mov	r1, r7
 800708a:	4630      	mov	r0, r6
 800708c:	f7f9 f8fc 	bl	8000288 <__aeabi_dsub>
 8007090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007092:	4606      	mov	r6, r0
 8007094:	460f      	mov	r7, r1
 8007096:	b933      	cbnz	r3, 80070a6 <_strtod_l+0xace>
 8007098:	f1ba 0f00 	cmp.w	sl, #0
 800709c:	d103      	bne.n	80070a6 <_strtod_l+0xace>
 800709e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80070a2:	2d00      	cmp	r5, #0
 80070a4:	d06d      	beq.n	8007182 <_strtod_l+0xbaa>
 80070a6:	a30a      	add	r3, pc, #40	; (adr r3, 80070d0 <_strtod_l+0xaf8>)
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	4630      	mov	r0, r6
 80070ae:	4639      	mov	r1, r7
 80070b0:	f7f9 fd14 	bl	8000adc <__aeabi_dcmplt>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	f47f acb8 	bne.w	8006a2a <_strtod_l+0x452>
 80070ba:	a307      	add	r3, pc, #28	; (adr r3, 80070d8 <_strtod_l+0xb00>)
 80070bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	f7f9 fd28 	bl	8000b18 <__aeabi_dcmpgt>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	f43f af79 	beq.w	8006fc0 <_strtod_l+0x9e8>
 80070ce:	e4ac      	b.n	8006a2a <_strtod_l+0x452>
 80070d0:	94a03595 	.word	0x94a03595
 80070d4:	3fdfffff 	.word	0x3fdfffff
 80070d8:	35afe535 	.word	0x35afe535
 80070dc:	3fe00000 	.word	0x3fe00000
 80070e0:	000fffff 	.word	0x000fffff
 80070e4:	7ff00000 	.word	0x7ff00000
 80070e8:	7fefffff 	.word	0x7fefffff
 80070ec:	39500000 	.word	0x39500000
 80070f0:	3ff00000 	.word	0x3ff00000
 80070f4:	7fe00000 	.word	0x7fe00000
 80070f8:	7c9fffff 	.word	0x7c9fffff
 80070fc:	3fe00000 	.word	0x3fe00000
 8007100:	bff00000 	.word	0xbff00000
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	b333      	cbz	r3, 8007156 <_strtod_l+0xb7e>
 8007108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800710a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800710e:	d822      	bhi.n	8007156 <_strtod_l+0xb7e>
 8007110:	a327      	add	r3, pc, #156	; (adr r3, 80071b0 <_strtod_l+0xbd8>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	4630      	mov	r0, r6
 8007118:	4639      	mov	r1, r7
 800711a:	f7f9 fce9 	bl	8000af0 <__aeabi_dcmple>
 800711e:	b1a0      	cbz	r0, 800714a <_strtod_l+0xb72>
 8007120:	4639      	mov	r1, r7
 8007122:	4630      	mov	r0, r6
 8007124:	f7f9 fd40 	bl	8000ba8 <__aeabi_d2uiz>
 8007128:	2800      	cmp	r0, #0
 800712a:	bf08      	it	eq
 800712c:	2001      	moveq	r0, #1
 800712e:	f7f9 f9e9 	bl	8000504 <__aeabi_ui2d>
 8007132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007134:	4606      	mov	r6, r0
 8007136:	460f      	mov	r7, r1
 8007138:	bb03      	cbnz	r3, 800717c <_strtod_l+0xba4>
 800713a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800713e:	9012      	str	r0, [sp, #72]	; 0x48
 8007140:	9313      	str	r3, [sp, #76]	; 0x4c
 8007142:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007146:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800714a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800714c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800714e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	930b      	str	r3, [sp, #44]	; 0x2c
 8007156:	ed9d 0b08 	vldr	d0, [sp, #32]
 800715a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800715e:	f001 fd3d 	bl	8008bdc <__ulp>
 8007162:	4650      	mov	r0, sl
 8007164:	ec53 2b10 	vmov	r2, r3, d0
 8007168:	4659      	mov	r1, fp
 800716a:	f7f9 fa45 	bl	80005f8 <__aeabi_dmul>
 800716e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007172:	f7f9 f88b 	bl	800028c <__adddf3>
 8007176:	4682      	mov	sl, r0
 8007178:	468b      	mov	fp, r1
 800717a:	e772      	b.n	8007062 <_strtod_l+0xa8a>
 800717c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007180:	e7df      	b.n	8007142 <_strtod_l+0xb6a>
 8007182:	a30d      	add	r3, pc, #52	; (adr r3, 80071b8 <_strtod_l+0xbe0>)
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f7f9 fca8 	bl	8000adc <__aeabi_dcmplt>
 800718c:	e79c      	b.n	80070c8 <_strtod_l+0xaf0>
 800718e:	2300      	movs	r3, #0
 8007190:	930d      	str	r3, [sp, #52]	; 0x34
 8007192:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	f7ff ba61 	b.w	800665e <_strtod_l+0x86>
 800719c:	2b65      	cmp	r3, #101	; 0x65
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f43f ab4e 	beq.w	8006842 <_strtod_l+0x26a>
 80071a6:	2101      	movs	r1, #1
 80071a8:	4614      	mov	r4, r2
 80071aa:	9104      	str	r1, [sp, #16]
 80071ac:	f7ff bacb 	b.w	8006746 <_strtod_l+0x16e>
 80071b0:	ffc00000 	.word	0xffc00000
 80071b4:	41dfffff 	.word	0x41dfffff
 80071b8:	94a03595 	.word	0x94a03595
 80071bc:	3fcfffff 	.word	0x3fcfffff

080071c0 <_strtod_r>:
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <_strtod_r+0x18>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	b410      	push	{r4}
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	4c04      	ldr	r4, [pc, #16]	; (80071dc <_strtod_r+0x1c>)
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bf08      	it	eq
 80071ce:	4623      	moveq	r3, r4
 80071d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d4:	f7ff ba00 	b.w	80065d8 <_strtod_l>
 80071d8:	20000014 	.word	0x20000014
 80071dc:	20000078 	.word	0x20000078

080071e0 <_strtol_l.isra.0>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	4680      	mov	r8, r0
 80071e6:	4689      	mov	r9, r1
 80071e8:	4692      	mov	sl, r2
 80071ea:	461e      	mov	r6, r3
 80071ec:	460f      	mov	r7, r1
 80071ee:	463d      	mov	r5, r7
 80071f0:	9808      	ldr	r0, [sp, #32]
 80071f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071f6:	f001 f9ed 	bl	80085d4 <__locale_ctype_ptr_l>
 80071fa:	4420      	add	r0, r4
 80071fc:	7843      	ldrb	r3, [r0, #1]
 80071fe:	f013 0308 	ands.w	r3, r3, #8
 8007202:	d132      	bne.n	800726a <_strtol_l.isra.0+0x8a>
 8007204:	2c2d      	cmp	r4, #45	; 0x2d
 8007206:	d132      	bne.n	800726e <_strtol_l.isra.0+0x8e>
 8007208:	787c      	ldrb	r4, [r7, #1]
 800720a:	1cbd      	adds	r5, r7, #2
 800720c:	2201      	movs	r2, #1
 800720e:	2e00      	cmp	r6, #0
 8007210:	d05d      	beq.n	80072ce <_strtol_l.isra.0+0xee>
 8007212:	2e10      	cmp	r6, #16
 8007214:	d109      	bne.n	800722a <_strtol_l.isra.0+0x4a>
 8007216:	2c30      	cmp	r4, #48	; 0x30
 8007218:	d107      	bne.n	800722a <_strtol_l.isra.0+0x4a>
 800721a:	782b      	ldrb	r3, [r5, #0]
 800721c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007220:	2b58      	cmp	r3, #88	; 0x58
 8007222:	d14f      	bne.n	80072c4 <_strtol_l.isra.0+0xe4>
 8007224:	786c      	ldrb	r4, [r5, #1]
 8007226:	2610      	movs	r6, #16
 8007228:	3502      	adds	r5, #2
 800722a:	2a00      	cmp	r2, #0
 800722c:	bf14      	ite	ne
 800722e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007232:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007236:	2700      	movs	r7, #0
 8007238:	fbb1 fcf6 	udiv	ip, r1, r6
 800723c:	4638      	mov	r0, r7
 800723e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007242:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007246:	2b09      	cmp	r3, #9
 8007248:	d817      	bhi.n	800727a <_strtol_l.isra.0+0x9a>
 800724a:	461c      	mov	r4, r3
 800724c:	42a6      	cmp	r6, r4
 800724e:	dd23      	ble.n	8007298 <_strtol_l.isra.0+0xb8>
 8007250:	1c7b      	adds	r3, r7, #1
 8007252:	d007      	beq.n	8007264 <_strtol_l.isra.0+0x84>
 8007254:	4584      	cmp	ip, r0
 8007256:	d31c      	bcc.n	8007292 <_strtol_l.isra.0+0xb2>
 8007258:	d101      	bne.n	800725e <_strtol_l.isra.0+0x7e>
 800725a:	45a6      	cmp	lr, r4
 800725c:	db19      	blt.n	8007292 <_strtol_l.isra.0+0xb2>
 800725e:	fb00 4006 	mla	r0, r0, r6, r4
 8007262:	2701      	movs	r7, #1
 8007264:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007268:	e7eb      	b.n	8007242 <_strtol_l.isra.0+0x62>
 800726a:	462f      	mov	r7, r5
 800726c:	e7bf      	b.n	80071ee <_strtol_l.isra.0+0xe>
 800726e:	2c2b      	cmp	r4, #43	; 0x2b
 8007270:	bf04      	itt	eq
 8007272:	1cbd      	addeq	r5, r7, #2
 8007274:	787c      	ldrbeq	r4, [r7, #1]
 8007276:	461a      	mov	r2, r3
 8007278:	e7c9      	b.n	800720e <_strtol_l.isra.0+0x2e>
 800727a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800727e:	2b19      	cmp	r3, #25
 8007280:	d801      	bhi.n	8007286 <_strtol_l.isra.0+0xa6>
 8007282:	3c37      	subs	r4, #55	; 0x37
 8007284:	e7e2      	b.n	800724c <_strtol_l.isra.0+0x6c>
 8007286:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800728a:	2b19      	cmp	r3, #25
 800728c:	d804      	bhi.n	8007298 <_strtol_l.isra.0+0xb8>
 800728e:	3c57      	subs	r4, #87	; 0x57
 8007290:	e7dc      	b.n	800724c <_strtol_l.isra.0+0x6c>
 8007292:	f04f 37ff 	mov.w	r7, #4294967295
 8007296:	e7e5      	b.n	8007264 <_strtol_l.isra.0+0x84>
 8007298:	1c7b      	adds	r3, r7, #1
 800729a:	d108      	bne.n	80072ae <_strtol_l.isra.0+0xce>
 800729c:	2322      	movs	r3, #34	; 0x22
 800729e:	f8c8 3000 	str.w	r3, [r8]
 80072a2:	4608      	mov	r0, r1
 80072a4:	f1ba 0f00 	cmp.w	sl, #0
 80072a8:	d107      	bne.n	80072ba <_strtol_l.isra.0+0xda>
 80072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ae:	b102      	cbz	r2, 80072b2 <_strtol_l.isra.0+0xd2>
 80072b0:	4240      	negs	r0, r0
 80072b2:	f1ba 0f00 	cmp.w	sl, #0
 80072b6:	d0f8      	beq.n	80072aa <_strtol_l.isra.0+0xca>
 80072b8:	b10f      	cbz	r7, 80072be <_strtol_l.isra.0+0xde>
 80072ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80072be:	f8ca 9000 	str.w	r9, [sl]
 80072c2:	e7f2      	b.n	80072aa <_strtol_l.isra.0+0xca>
 80072c4:	2430      	movs	r4, #48	; 0x30
 80072c6:	2e00      	cmp	r6, #0
 80072c8:	d1af      	bne.n	800722a <_strtol_l.isra.0+0x4a>
 80072ca:	2608      	movs	r6, #8
 80072cc:	e7ad      	b.n	800722a <_strtol_l.isra.0+0x4a>
 80072ce:	2c30      	cmp	r4, #48	; 0x30
 80072d0:	d0a3      	beq.n	800721a <_strtol_l.isra.0+0x3a>
 80072d2:	260a      	movs	r6, #10
 80072d4:	e7a9      	b.n	800722a <_strtol_l.isra.0+0x4a>
	...

080072d8 <_strtol_r>:
 80072d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072da:	4c06      	ldr	r4, [pc, #24]	; (80072f4 <_strtol_r+0x1c>)
 80072dc:	4d06      	ldr	r5, [pc, #24]	; (80072f8 <_strtol_r+0x20>)
 80072de:	6824      	ldr	r4, [r4, #0]
 80072e0:	6a24      	ldr	r4, [r4, #32]
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	bf08      	it	eq
 80072e6:	462c      	moveq	r4, r5
 80072e8:	9400      	str	r4, [sp, #0]
 80072ea:	f7ff ff79 	bl	80071e0 <_strtol_l.isra.0>
 80072ee:	b003      	add	sp, #12
 80072f0:	bd30      	pop	{r4, r5, pc}
 80072f2:	bf00      	nop
 80072f4:	20000014 	.word	0x20000014
 80072f8:	20000078 	.word	0x20000078

080072fc <quorem>:
 80072fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007300:	6903      	ldr	r3, [r0, #16]
 8007302:	690c      	ldr	r4, [r1, #16]
 8007304:	42a3      	cmp	r3, r4
 8007306:	4680      	mov	r8, r0
 8007308:	f2c0 8082 	blt.w	8007410 <quorem+0x114>
 800730c:	3c01      	subs	r4, #1
 800730e:	f101 0714 	add.w	r7, r1, #20
 8007312:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007316:	f100 0614 	add.w	r6, r0, #20
 800731a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800731e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007322:	eb06 030c 	add.w	r3, r6, ip
 8007326:	3501      	adds	r5, #1
 8007328:	eb07 090c 	add.w	r9, r7, ip
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007332:	b395      	cbz	r5, 800739a <quorem+0x9e>
 8007334:	f04f 0a00 	mov.w	sl, #0
 8007338:	4638      	mov	r0, r7
 800733a:	46b6      	mov	lr, r6
 800733c:	46d3      	mov	fp, sl
 800733e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007342:	b293      	uxth	r3, r2
 8007344:	fb05 a303 	mla	r3, r5, r3, sl
 8007348:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800734c:	b29b      	uxth	r3, r3
 800734e:	ebab 0303 	sub.w	r3, fp, r3
 8007352:	0c12      	lsrs	r2, r2, #16
 8007354:	f8de b000 	ldr.w	fp, [lr]
 8007358:	fb05 a202 	mla	r2, r5, r2, sl
 800735c:	fa13 f38b 	uxtah	r3, r3, fp
 8007360:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007364:	fa1f fb82 	uxth.w	fp, r2
 8007368:	f8de 2000 	ldr.w	r2, [lr]
 800736c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007370:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007374:	b29b      	uxth	r3, r3
 8007376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800737a:	4581      	cmp	r9, r0
 800737c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007380:	f84e 3b04 	str.w	r3, [lr], #4
 8007384:	d2db      	bcs.n	800733e <quorem+0x42>
 8007386:	f856 300c 	ldr.w	r3, [r6, ip]
 800738a:	b933      	cbnz	r3, 800739a <quorem+0x9e>
 800738c:	9b01      	ldr	r3, [sp, #4]
 800738e:	3b04      	subs	r3, #4
 8007390:	429e      	cmp	r6, r3
 8007392:	461a      	mov	r2, r3
 8007394:	d330      	bcc.n	80073f8 <quorem+0xfc>
 8007396:	f8c8 4010 	str.w	r4, [r8, #16]
 800739a:	4640      	mov	r0, r8
 800739c:	f001 fba6 	bl	8008aec <__mcmp>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	db25      	blt.n	80073f0 <quorem+0xf4>
 80073a4:	3501      	adds	r5, #1
 80073a6:	4630      	mov	r0, r6
 80073a8:	f04f 0c00 	mov.w	ip, #0
 80073ac:	f857 2b04 	ldr.w	r2, [r7], #4
 80073b0:	f8d0 e000 	ldr.w	lr, [r0]
 80073b4:	b293      	uxth	r3, r2
 80073b6:	ebac 0303 	sub.w	r3, ip, r3
 80073ba:	0c12      	lsrs	r2, r2, #16
 80073bc:	fa13 f38e 	uxtah	r3, r3, lr
 80073c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ce:	45b9      	cmp	r9, r7
 80073d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073d4:	f840 3b04 	str.w	r3, [r0], #4
 80073d8:	d2e8      	bcs.n	80073ac <quorem+0xb0>
 80073da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80073de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80073e2:	b92a      	cbnz	r2, 80073f0 <quorem+0xf4>
 80073e4:	3b04      	subs	r3, #4
 80073e6:	429e      	cmp	r6, r3
 80073e8:	461a      	mov	r2, r3
 80073ea:	d30b      	bcc.n	8007404 <quorem+0x108>
 80073ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80073f0:	4628      	mov	r0, r5
 80073f2:	b003      	add	sp, #12
 80073f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f8:	6812      	ldr	r2, [r2, #0]
 80073fa:	3b04      	subs	r3, #4
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	d1ca      	bne.n	8007396 <quorem+0x9a>
 8007400:	3c01      	subs	r4, #1
 8007402:	e7c5      	b.n	8007390 <quorem+0x94>
 8007404:	6812      	ldr	r2, [r2, #0]
 8007406:	3b04      	subs	r3, #4
 8007408:	2a00      	cmp	r2, #0
 800740a:	d1ef      	bne.n	80073ec <quorem+0xf0>
 800740c:	3c01      	subs	r4, #1
 800740e:	e7ea      	b.n	80073e6 <quorem+0xea>
 8007410:	2000      	movs	r0, #0
 8007412:	e7ee      	b.n	80073f2 <quorem+0xf6>
 8007414:	0000      	movs	r0, r0
	...

08007418 <_dtoa_r>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	ec57 6b10 	vmov	r6, r7, d0
 8007420:	b097      	sub	sp, #92	; 0x5c
 8007422:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007424:	9106      	str	r1, [sp, #24]
 8007426:	4604      	mov	r4, r0
 8007428:	920b      	str	r2, [sp, #44]	; 0x2c
 800742a:	9312      	str	r3, [sp, #72]	; 0x48
 800742c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007430:	e9cd 6700 	strd	r6, r7, [sp]
 8007434:	b93d      	cbnz	r5, 8007446 <_dtoa_r+0x2e>
 8007436:	2010      	movs	r0, #16
 8007438:	f001 f8e0 	bl	80085fc <malloc>
 800743c:	6260      	str	r0, [r4, #36]	; 0x24
 800743e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007442:	6005      	str	r5, [r0, #0]
 8007444:	60c5      	str	r5, [r0, #12]
 8007446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007448:	6819      	ldr	r1, [r3, #0]
 800744a:	b151      	cbz	r1, 8007462 <_dtoa_r+0x4a>
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	604a      	str	r2, [r1, #4]
 8007450:	2301      	movs	r3, #1
 8007452:	4093      	lsls	r3, r2
 8007454:	608b      	str	r3, [r1, #8]
 8007456:	4620      	mov	r0, r4
 8007458:	f001 f929 	bl	80086ae <_Bfree>
 800745c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	1e3b      	subs	r3, r7, #0
 8007464:	bfbb      	ittet	lt
 8007466:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800746a:	9301      	strlt	r3, [sp, #4]
 800746c:	2300      	movge	r3, #0
 800746e:	2201      	movlt	r2, #1
 8007470:	bfac      	ite	ge
 8007472:	f8c8 3000 	strge.w	r3, [r8]
 8007476:	f8c8 2000 	strlt.w	r2, [r8]
 800747a:	4baf      	ldr	r3, [pc, #700]	; (8007738 <_dtoa_r+0x320>)
 800747c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007480:	ea33 0308 	bics.w	r3, r3, r8
 8007484:	d114      	bne.n	80074b0 <_dtoa_r+0x98>
 8007486:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007488:	f242 730f 	movw	r3, #9999	; 0x270f
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	9b00      	ldr	r3, [sp, #0]
 8007490:	b923      	cbnz	r3, 800749c <_dtoa_r+0x84>
 8007492:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007496:	2800      	cmp	r0, #0
 8007498:	f000 8542 	beq.w	8007f20 <_dtoa_r+0xb08>
 800749c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800749e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800774c <_dtoa_r+0x334>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8544 	beq.w	8007f30 <_dtoa_r+0xb18>
 80074a8:	f10b 0303 	add.w	r3, fp, #3
 80074ac:	f000 bd3e 	b.w	8007f2c <_dtoa_r+0xb14>
 80074b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80074b4:	2200      	movs	r2, #0
 80074b6:	2300      	movs	r3, #0
 80074b8:	4630      	mov	r0, r6
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7f9 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80074c0:	4681      	mov	r9, r0
 80074c2:	b168      	cbz	r0, 80074e0 <_dtoa_r+0xc8>
 80074c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074c6:	2301      	movs	r3, #1
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8524 	beq.w	8007f1a <_dtoa_r+0xb02>
 80074d2:	4b9a      	ldr	r3, [pc, #616]	; (800773c <_dtoa_r+0x324>)
 80074d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074d6:	f103 3bff 	add.w	fp, r3, #4294967295
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	f000 bd28 	b.w	8007f30 <_dtoa_r+0xb18>
 80074e0:	aa14      	add	r2, sp, #80	; 0x50
 80074e2:	a915      	add	r1, sp, #84	; 0x54
 80074e4:	ec47 6b10 	vmov	d0, r6, r7
 80074e8:	4620      	mov	r0, r4
 80074ea:	f001 fbed 	bl	8008cc8 <__d2b>
 80074ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80074f2:	9004      	str	r0, [sp, #16]
 80074f4:	2d00      	cmp	r5, #0
 80074f6:	d07c      	beq.n	80075f2 <_dtoa_r+0x1da>
 80074f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007500:	46b2      	mov	sl, r6
 8007502:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800750a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800750e:	2200      	movs	r2, #0
 8007510:	4b8b      	ldr	r3, [pc, #556]	; (8007740 <_dtoa_r+0x328>)
 8007512:	4650      	mov	r0, sl
 8007514:	4659      	mov	r1, fp
 8007516:	f7f8 feb7 	bl	8000288 <__aeabi_dsub>
 800751a:	a381      	add	r3, pc, #516	; (adr r3, 8007720 <_dtoa_r+0x308>)
 800751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007520:	f7f9 f86a 	bl	80005f8 <__aeabi_dmul>
 8007524:	a380      	add	r3, pc, #512	; (adr r3, 8007728 <_dtoa_r+0x310>)
 8007526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752a:	f7f8 feaf 	bl	800028c <__adddf3>
 800752e:	4606      	mov	r6, r0
 8007530:	4628      	mov	r0, r5
 8007532:	460f      	mov	r7, r1
 8007534:	f7f8 fff6 	bl	8000524 <__aeabi_i2d>
 8007538:	a37d      	add	r3, pc, #500	; (adr r3, 8007730 <_dtoa_r+0x318>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 f85b 	bl	80005f8 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	f7f8 fe9f 	bl	800028c <__adddf3>
 800754e:	4606      	mov	r6, r0
 8007550:	460f      	mov	r7, r1
 8007552:	f7f9 fb01 	bl	8000b58 <__aeabi_d2iz>
 8007556:	2200      	movs	r2, #0
 8007558:	4682      	mov	sl, r0
 800755a:	2300      	movs	r3, #0
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7f9 fabc 	bl	8000adc <__aeabi_dcmplt>
 8007564:	b148      	cbz	r0, 800757a <_dtoa_r+0x162>
 8007566:	4650      	mov	r0, sl
 8007568:	f7f8 ffdc 	bl	8000524 <__aeabi_i2d>
 800756c:	4632      	mov	r2, r6
 800756e:	463b      	mov	r3, r7
 8007570:	f7f9 faaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007574:	b908      	cbnz	r0, 800757a <_dtoa_r+0x162>
 8007576:	f10a 3aff 	add.w	sl, sl, #4294967295
 800757a:	f1ba 0f16 	cmp.w	sl, #22
 800757e:	d859      	bhi.n	8007634 <_dtoa_r+0x21c>
 8007580:	4970      	ldr	r1, [pc, #448]	; (8007744 <_dtoa_r+0x32c>)
 8007582:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800758a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800758e:	f7f9 fac3 	bl	8000b18 <__aeabi_dcmpgt>
 8007592:	2800      	cmp	r0, #0
 8007594:	d050      	beq.n	8007638 <_dtoa_r+0x220>
 8007596:	f10a 3aff 	add.w	sl, sl, #4294967295
 800759a:	2300      	movs	r3, #0
 800759c:	930f      	str	r3, [sp, #60]	; 0x3c
 800759e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075a0:	1b5d      	subs	r5, r3, r5
 80075a2:	f1b5 0801 	subs.w	r8, r5, #1
 80075a6:	bf49      	itett	mi
 80075a8:	f1c5 0301 	rsbmi	r3, r5, #1
 80075ac:	2300      	movpl	r3, #0
 80075ae:	9305      	strmi	r3, [sp, #20]
 80075b0:	f04f 0800 	movmi.w	r8, #0
 80075b4:	bf58      	it	pl
 80075b6:	9305      	strpl	r3, [sp, #20]
 80075b8:	f1ba 0f00 	cmp.w	sl, #0
 80075bc:	db3e      	blt.n	800763c <_dtoa_r+0x224>
 80075be:	2300      	movs	r3, #0
 80075c0:	44d0      	add	r8, sl
 80075c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80075c6:	9307      	str	r3, [sp, #28]
 80075c8:	9b06      	ldr	r3, [sp, #24]
 80075ca:	2b09      	cmp	r3, #9
 80075cc:	f200 8090 	bhi.w	80076f0 <_dtoa_r+0x2d8>
 80075d0:	2b05      	cmp	r3, #5
 80075d2:	bfc4      	itt	gt
 80075d4:	3b04      	subgt	r3, #4
 80075d6:	9306      	strgt	r3, [sp, #24]
 80075d8:	9b06      	ldr	r3, [sp, #24]
 80075da:	f1a3 0302 	sub.w	r3, r3, #2
 80075de:	bfcc      	ite	gt
 80075e0:	2500      	movgt	r5, #0
 80075e2:	2501      	movle	r5, #1
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	f200 808f 	bhi.w	8007708 <_dtoa_r+0x2f0>
 80075ea:	e8df f003 	tbb	[pc, r3]
 80075ee:	7f7d      	.short	0x7f7d
 80075f0:	7131      	.short	0x7131
 80075f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80075f6:	441d      	add	r5, r3
 80075f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80075fc:	2820      	cmp	r0, #32
 80075fe:	dd13      	ble.n	8007628 <_dtoa_r+0x210>
 8007600:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	fa08 f800 	lsl.w	r8, r8, r0
 800760a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800760e:	fa23 f000 	lsr.w	r0, r3, r0
 8007612:	ea48 0000 	orr.w	r0, r8, r0
 8007616:	f7f8 ff75 	bl	8000504 <__aeabi_ui2d>
 800761a:	2301      	movs	r3, #1
 800761c:	4682      	mov	sl, r0
 800761e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007622:	3d01      	subs	r5, #1
 8007624:	9313      	str	r3, [sp, #76]	; 0x4c
 8007626:	e772      	b.n	800750e <_dtoa_r+0xf6>
 8007628:	9b00      	ldr	r3, [sp, #0]
 800762a:	f1c0 0020 	rsb	r0, r0, #32
 800762e:	fa03 f000 	lsl.w	r0, r3, r0
 8007632:	e7f0      	b.n	8007616 <_dtoa_r+0x1fe>
 8007634:	2301      	movs	r3, #1
 8007636:	e7b1      	b.n	800759c <_dtoa_r+0x184>
 8007638:	900f      	str	r0, [sp, #60]	; 0x3c
 800763a:	e7b0      	b.n	800759e <_dtoa_r+0x186>
 800763c:	9b05      	ldr	r3, [sp, #20]
 800763e:	eba3 030a 	sub.w	r3, r3, sl
 8007642:	9305      	str	r3, [sp, #20]
 8007644:	f1ca 0300 	rsb	r3, sl, #0
 8007648:	9307      	str	r3, [sp, #28]
 800764a:	2300      	movs	r3, #0
 800764c:	930e      	str	r3, [sp, #56]	; 0x38
 800764e:	e7bb      	b.n	80075c8 <_dtoa_r+0x1b0>
 8007650:	2301      	movs	r3, #1
 8007652:	930a      	str	r3, [sp, #40]	; 0x28
 8007654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007656:	2b00      	cmp	r3, #0
 8007658:	dd59      	ble.n	800770e <_dtoa_r+0x2f6>
 800765a:	9302      	str	r3, [sp, #8]
 800765c:	4699      	mov	r9, r3
 800765e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007660:	2200      	movs	r2, #0
 8007662:	6072      	str	r2, [r6, #4]
 8007664:	2204      	movs	r2, #4
 8007666:	f102 0014 	add.w	r0, r2, #20
 800766a:	4298      	cmp	r0, r3
 800766c:	6871      	ldr	r1, [r6, #4]
 800766e:	d953      	bls.n	8007718 <_dtoa_r+0x300>
 8007670:	4620      	mov	r0, r4
 8007672:	f000 ffe8 	bl	8008646 <_Balloc>
 8007676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007678:	6030      	str	r0, [r6, #0]
 800767a:	f1b9 0f0e 	cmp.w	r9, #14
 800767e:	f8d3 b000 	ldr.w	fp, [r3]
 8007682:	f200 80e6 	bhi.w	8007852 <_dtoa_r+0x43a>
 8007686:	2d00      	cmp	r5, #0
 8007688:	f000 80e3 	beq.w	8007852 <_dtoa_r+0x43a>
 800768c:	ed9d 7b00 	vldr	d7, [sp]
 8007690:	f1ba 0f00 	cmp.w	sl, #0
 8007694:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007698:	dd74      	ble.n	8007784 <_dtoa_r+0x36c>
 800769a:	4a2a      	ldr	r2, [pc, #168]	; (8007744 <_dtoa_r+0x32c>)
 800769c:	f00a 030f 	and.w	r3, sl, #15
 80076a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076a4:	ed93 7b00 	vldr	d7, [r3]
 80076a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80076ac:	06f0      	lsls	r0, r6, #27
 80076ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 80076b2:	d565      	bpl.n	8007780 <_dtoa_r+0x368>
 80076b4:	4b24      	ldr	r3, [pc, #144]	; (8007748 <_dtoa_r+0x330>)
 80076b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80076ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076be:	f7f9 f8c5 	bl	800084c <__aeabi_ddiv>
 80076c2:	e9cd 0100 	strd	r0, r1, [sp]
 80076c6:	f006 060f 	and.w	r6, r6, #15
 80076ca:	2503      	movs	r5, #3
 80076cc:	4f1e      	ldr	r7, [pc, #120]	; (8007748 <_dtoa_r+0x330>)
 80076ce:	e04c      	b.n	800776a <_dtoa_r+0x352>
 80076d0:	2301      	movs	r3, #1
 80076d2:	930a      	str	r3, [sp, #40]	; 0x28
 80076d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d6:	4453      	add	r3, sl
 80076d8:	f103 0901 	add.w	r9, r3, #1
 80076dc:	9302      	str	r3, [sp, #8]
 80076de:	464b      	mov	r3, r9
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	bfb8      	it	lt
 80076e4:	2301      	movlt	r3, #1
 80076e6:	e7ba      	b.n	800765e <_dtoa_r+0x246>
 80076e8:	2300      	movs	r3, #0
 80076ea:	e7b2      	b.n	8007652 <_dtoa_r+0x23a>
 80076ec:	2300      	movs	r3, #0
 80076ee:	e7f0      	b.n	80076d2 <_dtoa_r+0x2ba>
 80076f0:	2501      	movs	r5, #1
 80076f2:	2300      	movs	r3, #0
 80076f4:	9306      	str	r3, [sp, #24]
 80076f6:	950a      	str	r5, [sp, #40]	; 0x28
 80076f8:	f04f 33ff 	mov.w	r3, #4294967295
 80076fc:	9302      	str	r3, [sp, #8]
 80076fe:	4699      	mov	r9, r3
 8007700:	2200      	movs	r2, #0
 8007702:	2312      	movs	r3, #18
 8007704:	920b      	str	r2, [sp, #44]	; 0x2c
 8007706:	e7aa      	b.n	800765e <_dtoa_r+0x246>
 8007708:	2301      	movs	r3, #1
 800770a:	930a      	str	r3, [sp, #40]	; 0x28
 800770c:	e7f4      	b.n	80076f8 <_dtoa_r+0x2e0>
 800770e:	2301      	movs	r3, #1
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	4699      	mov	r9, r3
 8007714:	461a      	mov	r2, r3
 8007716:	e7f5      	b.n	8007704 <_dtoa_r+0x2ec>
 8007718:	3101      	adds	r1, #1
 800771a:	6071      	str	r1, [r6, #4]
 800771c:	0052      	lsls	r2, r2, #1
 800771e:	e7a2      	b.n	8007666 <_dtoa_r+0x24e>
 8007720:	636f4361 	.word	0x636f4361
 8007724:	3fd287a7 	.word	0x3fd287a7
 8007728:	8b60c8b3 	.word	0x8b60c8b3
 800772c:	3fc68a28 	.word	0x3fc68a28
 8007730:	509f79fb 	.word	0x509f79fb
 8007734:	3fd34413 	.word	0x3fd34413
 8007738:	7ff00000 	.word	0x7ff00000
 800773c:	0800b1f5 	.word	0x0800b1f5
 8007740:	3ff80000 	.word	0x3ff80000
 8007744:	0800b2b0 	.word	0x0800b2b0
 8007748:	0800b288 	.word	0x0800b288
 800774c:	0800b279 	.word	0x0800b279
 8007750:	07f1      	lsls	r1, r6, #31
 8007752:	d508      	bpl.n	8007766 <_dtoa_r+0x34e>
 8007754:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800775c:	f7f8 ff4c 	bl	80005f8 <__aeabi_dmul>
 8007760:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007764:	3501      	adds	r5, #1
 8007766:	1076      	asrs	r6, r6, #1
 8007768:	3708      	adds	r7, #8
 800776a:	2e00      	cmp	r6, #0
 800776c:	d1f0      	bne.n	8007750 <_dtoa_r+0x338>
 800776e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007772:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007776:	f7f9 f869 	bl	800084c <__aeabi_ddiv>
 800777a:	e9cd 0100 	strd	r0, r1, [sp]
 800777e:	e01a      	b.n	80077b6 <_dtoa_r+0x39e>
 8007780:	2502      	movs	r5, #2
 8007782:	e7a3      	b.n	80076cc <_dtoa_r+0x2b4>
 8007784:	f000 80a0 	beq.w	80078c8 <_dtoa_r+0x4b0>
 8007788:	f1ca 0600 	rsb	r6, sl, #0
 800778c:	4b9f      	ldr	r3, [pc, #636]	; (8007a0c <_dtoa_r+0x5f4>)
 800778e:	4fa0      	ldr	r7, [pc, #640]	; (8007a10 <_dtoa_r+0x5f8>)
 8007790:	f006 020f 	and.w	r2, r6, #15
 8007794:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077a0:	f7f8 ff2a 	bl	80005f8 <__aeabi_dmul>
 80077a4:	e9cd 0100 	strd	r0, r1, [sp]
 80077a8:	1136      	asrs	r6, r6, #4
 80077aa:	2300      	movs	r3, #0
 80077ac:	2502      	movs	r5, #2
 80077ae:	2e00      	cmp	r6, #0
 80077b0:	d17f      	bne.n	80078b2 <_dtoa_r+0x49a>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e1      	bne.n	800777a <_dtoa_r+0x362>
 80077b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8087 	beq.w	80078cc <_dtoa_r+0x4b4>
 80077be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80077c2:	2200      	movs	r2, #0
 80077c4:	4b93      	ldr	r3, [pc, #588]	; (8007a14 <_dtoa_r+0x5fc>)
 80077c6:	4630      	mov	r0, r6
 80077c8:	4639      	mov	r1, r7
 80077ca:	f7f9 f987 	bl	8000adc <__aeabi_dcmplt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d07c      	beq.n	80078cc <_dtoa_r+0x4b4>
 80077d2:	f1b9 0f00 	cmp.w	r9, #0
 80077d6:	d079      	beq.n	80078cc <_dtoa_r+0x4b4>
 80077d8:	9b02      	ldr	r3, [sp, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	dd35      	ble.n	800784a <_dtoa_r+0x432>
 80077de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80077e2:	9308      	str	r3, [sp, #32]
 80077e4:	4639      	mov	r1, r7
 80077e6:	2200      	movs	r2, #0
 80077e8:	4b8b      	ldr	r3, [pc, #556]	; (8007a18 <_dtoa_r+0x600>)
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7f8 ff04 	bl	80005f8 <__aeabi_dmul>
 80077f0:	e9cd 0100 	strd	r0, r1, [sp]
 80077f4:	9f02      	ldr	r7, [sp, #8]
 80077f6:	3501      	adds	r5, #1
 80077f8:	4628      	mov	r0, r5
 80077fa:	f7f8 fe93 	bl	8000524 <__aeabi_i2d>
 80077fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007802:	f7f8 fef9 	bl	80005f8 <__aeabi_dmul>
 8007806:	2200      	movs	r2, #0
 8007808:	4b84      	ldr	r3, [pc, #528]	; (8007a1c <_dtoa_r+0x604>)
 800780a:	f7f8 fd3f 	bl	800028c <__adddf3>
 800780e:	4605      	mov	r5, r0
 8007810:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007814:	2f00      	cmp	r7, #0
 8007816:	d15d      	bne.n	80078d4 <_dtoa_r+0x4bc>
 8007818:	2200      	movs	r2, #0
 800781a:	4b81      	ldr	r3, [pc, #516]	; (8007a20 <_dtoa_r+0x608>)
 800781c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007820:	f7f8 fd32 	bl	8000288 <__aeabi_dsub>
 8007824:	462a      	mov	r2, r5
 8007826:	4633      	mov	r3, r6
 8007828:	e9cd 0100 	strd	r0, r1, [sp]
 800782c:	f7f9 f974 	bl	8000b18 <__aeabi_dcmpgt>
 8007830:	2800      	cmp	r0, #0
 8007832:	f040 8288 	bne.w	8007d46 <_dtoa_r+0x92e>
 8007836:	462a      	mov	r2, r5
 8007838:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800783c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007840:	f7f9 f94c 	bl	8000adc <__aeabi_dcmplt>
 8007844:	2800      	cmp	r0, #0
 8007846:	f040 827c 	bne.w	8007d42 <_dtoa_r+0x92a>
 800784a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800784e:	e9cd 2300 	strd	r2, r3, [sp]
 8007852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007854:	2b00      	cmp	r3, #0
 8007856:	f2c0 8150 	blt.w	8007afa <_dtoa_r+0x6e2>
 800785a:	f1ba 0f0e 	cmp.w	sl, #14
 800785e:	f300 814c 	bgt.w	8007afa <_dtoa_r+0x6e2>
 8007862:	4b6a      	ldr	r3, [pc, #424]	; (8007a0c <_dtoa_r+0x5f4>)
 8007864:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007868:	ed93 7b00 	vldr	d7, [r3]
 800786c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800786e:	2b00      	cmp	r3, #0
 8007870:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007874:	f280 80d8 	bge.w	8007a28 <_dtoa_r+0x610>
 8007878:	f1b9 0f00 	cmp.w	r9, #0
 800787c:	f300 80d4 	bgt.w	8007a28 <_dtoa_r+0x610>
 8007880:	f040 825e 	bne.w	8007d40 <_dtoa_r+0x928>
 8007884:	2200      	movs	r2, #0
 8007886:	4b66      	ldr	r3, [pc, #408]	; (8007a20 <_dtoa_r+0x608>)
 8007888:	ec51 0b17 	vmov	r0, r1, d7
 800788c:	f7f8 feb4 	bl	80005f8 <__aeabi_dmul>
 8007890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007894:	f7f9 f936 	bl	8000b04 <__aeabi_dcmpge>
 8007898:	464f      	mov	r7, r9
 800789a:	464e      	mov	r6, r9
 800789c:	2800      	cmp	r0, #0
 800789e:	f040 8234 	bne.w	8007d0a <_dtoa_r+0x8f2>
 80078a2:	2331      	movs	r3, #49	; 0x31
 80078a4:	f10b 0501 	add.w	r5, fp, #1
 80078a8:	f88b 3000 	strb.w	r3, [fp]
 80078ac:	f10a 0a01 	add.w	sl, sl, #1
 80078b0:	e22f      	b.n	8007d12 <_dtoa_r+0x8fa>
 80078b2:	07f2      	lsls	r2, r6, #31
 80078b4:	d505      	bpl.n	80078c2 <_dtoa_r+0x4aa>
 80078b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ba:	f7f8 fe9d 	bl	80005f8 <__aeabi_dmul>
 80078be:	3501      	adds	r5, #1
 80078c0:	2301      	movs	r3, #1
 80078c2:	1076      	asrs	r6, r6, #1
 80078c4:	3708      	adds	r7, #8
 80078c6:	e772      	b.n	80077ae <_dtoa_r+0x396>
 80078c8:	2502      	movs	r5, #2
 80078ca:	e774      	b.n	80077b6 <_dtoa_r+0x39e>
 80078cc:	f8cd a020 	str.w	sl, [sp, #32]
 80078d0:	464f      	mov	r7, r9
 80078d2:	e791      	b.n	80077f8 <_dtoa_r+0x3e0>
 80078d4:	4b4d      	ldr	r3, [pc, #308]	; (8007a0c <_dtoa_r+0x5f4>)
 80078d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80078de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d047      	beq.n	8007974 <_dtoa_r+0x55c>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	2000      	movs	r0, #0
 80078ea:	494e      	ldr	r1, [pc, #312]	; (8007a24 <_dtoa_r+0x60c>)
 80078ec:	f7f8 ffae 	bl	800084c <__aeabi_ddiv>
 80078f0:	462a      	mov	r2, r5
 80078f2:	4633      	mov	r3, r6
 80078f4:	f7f8 fcc8 	bl	8000288 <__aeabi_dsub>
 80078f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078fc:	465d      	mov	r5, fp
 80078fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007902:	f7f9 f929 	bl	8000b58 <__aeabi_d2iz>
 8007906:	4606      	mov	r6, r0
 8007908:	f7f8 fe0c 	bl	8000524 <__aeabi_i2d>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007914:	f7f8 fcb8 	bl	8000288 <__aeabi_dsub>
 8007918:	3630      	adds	r6, #48	; 0x30
 800791a:	f805 6b01 	strb.w	r6, [r5], #1
 800791e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007922:	e9cd 0100 	strd	r0, r1, [sp]
 8007926:	f7f9 f8d9 	bl	8000adc <__aeabi_dcmplt>
 800792a:	2800      	cmp	r0, #0
 800792c:	d163      	bne.n	80079f6 <_dtoa_r+0x5de>
 800792e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007932:	2000      	movs	r0, #0
 8007934:	4937      	ldr	r1, [pc, #220]	; (8007a14 <_dtoa_r+0x5fc>)
 8007936:	f7f8 fca7 	bl	8000288 <__aeabi_dsub>
 800793a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800793e:	f7f9 f8cd 	bl	8000adc <__aeabi_dcmplt>
 8007942:	2800      	cmp	r0, #0
 8007944:	f040 80b7 	bne.w	8007ab6 <_dtoa_r+0x69e>
 8007948:	eba5 030b 	sub.w	r3, r5, fp
 800794c:	429f      	cmp	r7, r3
 800794e:	f77f af7c 	ble.w	800784a <_dtoa_r+0x432>
 8007952:	2200      	movs	r2, #0
 8007954:	4b30      	ldr	r3, [pc, #192]	; (8007a18 <_dtoa_r+0x600>)
 8007956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800795a:	f7f8 fe4d 	bl	80005f8 <__aeabi_dmul>
 800795e:	2200      	movs	r2, #0
 8007960:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007964:	4b2c      	ldr	r3, [pc, #176]	; (8007a18 <_dtoa_r+0x600>)
 8007966:	e9dd 0100 	ldrd	r0, r1, [sp]
 800796a:	f7f8 fe45 	bl	80005f8 <__aeabi_dmul>
 800796e:	e9cd 0100 	strd	r0, r1, [sp]
 8007972:	e7c4      	b.n	80078fe <_dtoa_r+0x4e6>
 8007974:	462a      	mov	r2, r5
 8007976:	4633      	mov	r3, r6
 8007978:	f7f8 fe3e 	bl	80005f8 <__aeabi_dmul>
 800797c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007980:	eb0b 0507 	add.w	r5, fp, r7
 8007984:	465e      	mov	r6, fp
 8007986:	e9dd 0100 	ldrd	r0, r1, [sp]
 800798a:	f7f9 f8e5 	bl	8000b58 <__aeabi_d2iz>
 800798e:	4607      	mov	r7, r0
 8007990:	f7f8 fdc8 	bl	8000524 <__aeabi_i2d>
 8007994:	3730      	adds	r7, #48	; 0x30
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800799e:	f7f8 fc73 	bl	8000288 <__aeabi_dsub>
 80079a2:	f806 7b01 	strb.w	r7, [r6], #1
 80079a6:	42ae      	cmp	r6, r5
 80079a8:	e9cd 0100 	strd	r0, r1, [sp]
 80079ac:	f04f 0200 	mov.w	r2, #0
 80079b0:	d126      	bne.n	8007a00 <_dtoa_r+0x5e8>
 80079b2:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <_dtoa_r+0x60c>)
 80079b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80079b8:	f7f8 fc68 	bl	800028c <__adddf3>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c4:	f7f9 f8a8 	bl	8000b18 <__aeabi_dcmpgt>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d174      	bne.n	8007ab6 <_dtoa_r+0x69e>
 80079cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079d0:	2000      	movs	r0, #0
 80079d2:	4914      	ldr	r1, [pc, #80]	; (8007a24 <_dtoa_r+0x60c>)
 80079d4:	f7f8 fc58 	bl	8000288 <__aeabi_dsub>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079e0:	f7f9 f87c 	bl	8000adc <__aeabi_dcmplt>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	f43f af30 	beq.w	800784a <_dtoa_r+0x432>
 80079ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079ee:	2b30      	cmp	r3, #48	; 0x30
 80079f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80079f4:	d002      	beq.n	80079fc <_dtoa_r+0x5e4>
 80079f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80079fa:	e04a      	b.n	8007a92 <_dtoa_r+0x67a>
 80079fc:	4615      	mov	r5, r2
 80079fe:	e7f4      	b.n	80079ea <_dtoa_r+0x5d2>
 8007a00:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <_dtoa_r+0x600>)
 8007a02:	f7f8 fdf9 	bl	80005f8 <__aeabi_dmul>
 8007a06:	e9cd 0100 	strd	r0, r1, [sp]
 8007a0a:	e7bc      	b.n	8007986 <_dtoa_r+0x56e>
 8007a0c:	0800b2b0 	.word	0x0800b2b0
 8007a10:	0800b288 	.word	0x0800b288
 8007a14:	3ff00000 	.word	0x3ff00000
 8007a18:	40240000 	.word	0x40240000
 8007a1c:	401c0000 	.word	0x401c0000
 8007a20:	40140000 	.word	0x40140000
 8007a24:	3fe00000 	.word	0x3fe00000
 8007a28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a2c:	465d      	mov	r5, fp
 8007a2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a32:	4630      	mov	r0, r6
 8007a34:	4639      	mov	r1, r7
 8007a36:	f7f8 ff09 	bl	800084c <__aeabi_ddiv>
 8007a3a:	f7f9 f88d 	bl	8000b58 <__aeabi_d2iz>
 8007a3e:	4680      	mov	r8, r0
 8007a40:	f7f8 fd70 	bl	8000524 <__aeabi_i2d>
 8007a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a48:	f7f8 fdd6 	bl	80005f8 <__aeabi_dmul>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007a58:	f7f8 fc16 	bl	8000288 <__aeabi_dsub>
 8007a5c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a60:	eba5 060b 	sub.w	r6, r5, fp
 8007a64:	45b1      	cmp	r9, r6
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	d139      	bne.n	8007ae0 <_dtoa_r+0x6c8>
 8007a6c:	f7f8 fc0e 	bl	800028c <__adddf3>
 8007a70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a74:	4606      	mov	r6, r0
 8007a76:	460f      	mov	r7, r1
 8007a78:	f7f9 f84e 	bl	8000b18 <__aeabi_dcmpgt>
 8007a7c:	b9c8      	cbnz	r0, 8007ab2 <_dtoa_r+0x69a>
 8007a7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a82:	4630      	mov	r0, r6
 8007a84:	4639      	mov	r1, r7
 8007a86:	f7f9 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a8a:	b110      	cbz	r0, 8007a92 <_dtoa_r+0x67a>
 8007a8c:	f018 0f01 	tst.w	r8, #1
 8007a90:	d10f      	bne.n	8007ab2 <_dtoa_r+0x69a>
 8007a92:	9904      	ldr	r1, [sp, #16]
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 fe0a 	bl	80086ae <_Bfree>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a9e:	702b      	strb	r3, [r5, #0]
 8007aa0:	f10a 0301 	add.w	r3, sl, #1
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8241 	beq.w	8007f30 <_dtoa_r+0xb18>
 8007aae:	601d      	str	r5, [r3, #0]
 8007ab0:	e23e      	b.n	8007f30 <_dtoa_r+0xb18>
 8007ab2:	f8cd a020 	str.w	sl, [sp, #32]
 8007ab6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007aba:	2a39      	cmp	r2, #57	; 0x39
 8007abc:	f105 33ff 	add.w	r3, r5, #4294967295
 8007ac0:	d108      	bne.n	8007ad4 <_dtoa_r+0x6bc>
 8007ac2:	459b      	cmp	fp, r3
 8007ac4:	d10a      	bne.n	8007adc <_dtoa_r+0x6c4>
 8007ac6:	9b08      	ldr	r3, [sp, #32]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	9308      	str	r3, [sp, #32]
 8007acc:	2330      	movs	r3, #48	; 0x30
 8007ace:	f88b 3000 	strb.w	r3, [fp]
 8007ad2:	465b      	mov	r3, fp
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	3201      	adds	r2, #1
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e78c      	b.n	80079f6 <_dtoa_r+0x5de>
 8007adc:	461d      	mov	r5, r3
 8007ade:	e7ea      	b.n	8007ab6 <_dtoa_r+0x69e>
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4b9b      	ldr	r3, [pc, #620]	; (8007d50 <_dtoa_r+0x938>)
 8007ae4:	f7f8 fd88 	bl	80005f8 <__aeabi_dmul>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2300      	movs	r3, #0
 8007aec:	4606      	mov	r6, r0
 8007aee:	460f      	mov	r7, r1
 8007af0:	f7f8 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d09a      	beq.n	8007a2e <_dtoa_r+0x616>
 8007af8:	e7cb      	b.n	8007a92 <_dtoa_r+0x67a>
 8007afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007afc:	2a00      	cmp	r2, #0
 8007afe:	f000 808b 	beq.w	8007c18 <_dtoa_r+0x800>
 8007b02:	9a06      	ldr	r2, [sp, #24]
 8007b04:	2a01      	cmp	r2, #1
 8007b06:	dc6e      	bgt.n	8007be6 <_dtoa_r+0x7ce>
 8007b08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	d067      	beq.n	8007bde <_dtoa_r+0x7c6>
 8007b0e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b12:	9f07      	ldr	r7, [sp, #28]
 8007b14:	9d05      	ldr	r5, [sp, #20]
 8007b16:	9a05      	ldr	r2, [sp, #20]
 8007b18:	2101      	movs	r1, #1
 8007b1a:	441a      	add	r2, r3
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	9205      	str	r2, [sp, #20]
 8007b20:	4498      	add	r8, r3
 8007b22:	f000 fea2 	bl	800886a <__i2b>
 8007b26:	4606      	mov	r6, r0
 8007b28:	2d00      	cmp	r5, #0
 8007b2a:	dd0c      	ble.n	8007b46 <_dtoa_r+0x72e>
 8007b2c:	f1b8 0f00 	cmp.w	r8, #0
 8007b30:	dd09      	ble.n	8007b46 <_dtoa_r+0x72e>
 8007b32:	4545      	cmp	r5, r8
 8007b34:	9a05      	ldr	r2, [sp, #20]
 8007b36:	462b      	mov	r3, r5
 8007b38:	bfa8      	it	ge
 8007b3a:	4643      	movge	r3, r8
 8007b3c:	1ad2      	subs	r2, r2, r3
 8007b3e:	9205      	str	r2, [sp, #20]
 8007b40:	1aed      	subs	r5, r5, r3
 8007b42:	eba8 0803 	sub.w	r8, r8, r3
 8007b46:	9b07      	ldr	r3, [sp, #28]
 8007b48:	b1eb      	cbz	r3, 8007b86 <_dtoa_r+0x76e>
 8007b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d067      	beq.n	8007c20 <_dtoa_r+0x808>
 8007b50:	b18f      	cbz	r7, 8007b76 <_dtoa_r+0x75e>
 8007b52:	4631      	mov	r1, r6
 8007b54:	463a      	mov	r2, r7
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 ff26 	bl	80089a8 <__pow5mult>
 8007b5c:	9a04      	ldr	r2, [sp, #16]
 8007b5e:	4601      	mov	r1, r0
 8007b60:	4606      	mov	r6, r0
 8007b62:	4620      	mov	r0, r4
 8007b64:	f000 fe8a 	bl	800887c <__multiply>
 8007b68:	9904      	ldr	r1, [sp, #16]
 8007b6a:	9008      	str	r0, [sp, #32]
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 fd9e 	bl	80086ae <_Bfree>
 8007b72:	9b08      	ldr	r3, [sp, #32]
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	9b07      	ldr	r3, [sp, #28]
 8007b78:	1bda      	subs	r2, r3, r7
 8007b7a:	d004      	beq.n	8007b86 <_dtoa_r+0x76e>
 8007b7c:	9904      	ldr	r1, [sp, #16]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 ff12 	bl	80089a8 <__pow5mult>
 8007b84:	9004      	str	r0, [sp, #16]
 8007b86:	2101      	movs	r1, #1
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f000 fe6e 	bl	800886a <__i2b>
 8007b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b90:	4607      	mov	r7, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f000 81d0 	beq.w	8007f38 <_dtoa_r+0xb20>
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f000 ff03 	bl	80089a8 <__pow5mult>
 8007ba2:	9b06      	ldr	r3, [sp, #24]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	dc40      	bgt.n	8007c2c <_dtoa_r+0x814>
 8007baa:	9b00      	ldr	r3, [sp, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d139      	bne.n	8007c24 <_dtoa_r+0x80c>
 8007bb0:	9b01      	ldr	r3, [sp, #4]
 8007bb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d136      	bne.n	8007c28 <_dtoa_r+0x810>
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bc0:	0d1b      	lsrs	r3, r3, #20
 8007bc2:	051b      	lsls	r3, r3, #20
 8007bc4:	b12b      	cbz	r3, 8007bd2 <_dtoa_r+0x7ba>
 8007bc6:	9b05      	ldr	r3, [sp, #20]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	9305      	str	r3, [sp, #20]
 8007bcc:	f108 0801 	add.w	r8, r8, #1
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	9307      	str	r3, [sp, #28]
 8007bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d12a      	bne.n	8007c30 <_dtoa_r+0x818>
 8007bda:	2001      	movs	r0, #1
 8007bdc:	e030      	b.n	8007c40 <_dtoa_r+0x828>
 8007bde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007be0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007be4:	e795      	b.n	8007b12 <_dtoa_r+0x6fa>
 8007be6:	9b07      	ldr	r3, [sp, #28]
 8007be8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007bec:	42bb      	cmp	r3, r7
 8007bee:	bfbf      	itttt	lt
 8007bf0:	9b07      	ldrlt	r3, [sp, #28]
 8007bf2:	9707      	strlt	r7, [sp, #28]
 8007bf4:	1afa      	sublt	r2, r7, r3
 8007bf6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007bf8:	bfbb      	ittet	lt
 8007bfa:	189b      	addlt	r3, r3, r2
 8007bfc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007bfe:	1bdf      	subge	r7, r3, r7
 8007c00:	2700      	movlt	r7, #0
 8007c02:	f1b9 0f00 	cmp.w	r9, #0
 8007c06:	bfb5      	itete	lt
 8007c08:	9b05      	ldrlt	r3, [sp, #20]
 8007c0a:	9d05      	ldrge	r5, [sp, #20]
 8007c0c:	eba3 0509 	sublt.w	r5, r3, r9
 8007c10:	464b      	movge	r3, r9
 8007c12:	bfb8      	it	lt
 8007c14:	2300      	movlt	r3, #0
 8007c16:	e77e      	b.n	8007b16 <_dtoa_r+0x6fe>
 8007c18:	9f07      	ldr	r7, [sp, #28]
 8007c1a:	9d05      	ldr	r5, [sp, #20]
 8007c1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007c1e:	e783      	b.n	8007b28 <_dtoa_r+0x710>
 8007c20:	9a07      	ldr	r2, [sp, #28]
 8007c22:	e7ab      	b.n	8007b7c <_dtoa_r+0x764>
 8007c24:	2300      	movs	r3, #0
 8007c26:	e7d4      	b.n	8007bd2 <_dtoa_r+0x7ba>
 8007c28:	9b00      	ldr	r3, [sp, #0]
 8007c2a:	e7d2      	b.n	8007bd2 <_dtoa_r+0x7ba>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9307      	str	r3, [sp, #28]
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007c36:	6918      	ldr	r0, [r3, #16]
 8007c38:	f000 fdc9 	bl	80087ce <__hi0bits>
 8007c3c:	f1c0 0020 	rsb	r0, r0, #32
 8007c40:	4440      	add	r0, r8
 8007c42:	f010 001f 	ands.w	r0, r0, #31
 8007c46:	d047      	beq.n	8007cd8 <_dtoa_r+0x8c0>
 8007c48:	f1c0 0320 	rsb	r3, r0, #32
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	dd3b      	ble.n	8007cc8 <_dtoa_r+0x8b0>
 8007c50:	9b05      	ldr	r3, [sp, #20]
 8007c52:	f1c0 001c 	rsb	r0, r0, #28
 8007c56:	4403      	add	r3, r0
 8007c58:	9305      	str	r3, [sp, #20]
 8007c5a:	4405      	add	r5, r0
 8007c5c:	4480      	add	r8, r0
 8007c5e:	9b05      	ldr	r3, [sp, #20]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dd05      	ble.n	8007c70 <_dtoa_r+0x858>
 8007c64:	461a      	mov	r2, r3
 8007c66:	9904      	ldr	r1, [sp, #16]
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 feeb 	bl	8008a44 <__lshift>
 8007c6e:	9004      	str	r0, [sp, #16]
 8007c70:	f1b8 0f00 	cmp.w	r8, #0
 8007c74:	dd05      	ble.n	8007c82 <_dtoa_r+0x86a>
 8007c76:	4639      	mov	r1, r7
 8007c78:	4642      	mov	r2, r8
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 fee2 	bl	8008a44 <__lshift>
 8007c80:	4607      	mov	r7, r0
 8007c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c84:	b353      	cbz	r3, 8007cdc <_dtoa_r+0x8c4>
 8007c86:	4639      	mov	r1, r7
 8007c88:	9804      	ldr	r0, [sp, #16]
 8007c8a:	f000 ff2f 	bl	8008aec <__mcmp>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	da24      	bge.n	8007cdc <_dtoa_r+0x8c4>
 8007c92:	2300      	movs	r3, #0
 8007c94:	220a      	movs	r2, #10
 8007c96:	9904      	ldr	r1, [sp, #16]
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 fd1f 	bl	80086dc <__multadd>
 8007c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca0:	9004      	str	r0, [sp, #16]
 8007ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 814d 	beq.w	8007f46 <_dtoa_r+0xb2e>
 8007cac:	2300      	movs	r3, #0
 8007cae:	4631      	mov	r1, r6
 8007cb0:	220a      	movs	r2, #10
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 fd12 	bl	80086dc <__multadd>
 8007cb8:	9b02      	ldr	r3, [sp, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	dc4f      	bgt.n	8007d60 <_dtoa_r+0x948>
 8007cc0:	9b06      	ldr	r3, [sp, #24]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	dd4c      	ble.n	8007d60 <_dtoa_r+0x948>
 8007cc6:	e011      	b.n	8007cec <_dtoa_r+0x8d4>
 8007cc8:	d0c9      	beq.n	8007c5e <_dtoa_r+0x846>
 8007cca:	9a05      	ldr	r2, [sp, #20]
 8007ccc:	331c      	adds	r3, #28
 8007cce:	441a      	add	r2, r3
 8007cd0:	9205      	str	r2, [sp, #20]
 8007cd2:	441d      	add	r5, r3
 8007cd4:	4498      	add	r8, r3
 8007cd6:	e7c2      	b.n	8007c5e <_dtoa_r+0x846>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	e7f6      	b.n	8007cca <_dtoa_r+0x8b2>
 8007cdc:	f1b9 0f00 	cmp.w	r9, #0
 8007ce0:	dc38      	bgt.n	8007d54 <_dtoa_r+0x93c>
 8007ce2:	9b06      	ldr	r3, [sp, #24]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	dd35      	ble.n	8007d54 <_dtoa_r+0x93c>
 8007ce8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007cec:	9b02      	ldr	r3, [sp, #8]
 8007cee:	b963      	cbnz	r3, 8007d0a <_dtoa_r+0x8f2>
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	2205      	movs	r2, #5
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 fcf1 	bl	80086dc <__multadd>
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	9804      	ldr	r0, [sp, #16]
 8007d00:	f000 fef4 	bl	8008aec <__mcmp>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f73f adcc 	bgt.w	80078a2 <_dtoa_r+0x48a>
 8007d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d0c:	465d      	mov	r5, fp
 8007d0e:	ea6f 0a03 	mvn.w	sl, r3
 8007d12:	f04f 0900 	mov.w	r9, #0
 8007d16:	4639      	mov	r1, r7
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 fcc8 	bl	80086ae <_Bfree>
 8007d1e:	2e00      	cmp	r6, #0
 8007d20:	f43f aeb7 	beq.w	8007a92 <_dtoa_r+0x67a>
 8007d24:	f1b9 0f00 	cmp.w	r9, #0
 8007d28:	d005      	beq.n	8007d36 <_dtoa_r+0x91e>
 8007d2a:	45b1      	cmp	r9, r6
 8007d2c:	d003      	beq.n	8007d36 <_dtoa_r+0x91e>
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 fcbc 	bl	80086ae <_Bfree>
 8007d36:	4631      	mov	r1, r6
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fcb8 	bl	80086ae <_Bfree>
 8007d3e:	e6a8      	b.n	8007a92 <_dtoa_r+0x67a>
 8007d40:	2700      	movs	r7, #0
 8007d42:	463e      	mov	r6, r7
 8007d44:	e7e1      	b.n	8007d0a <_dtoa_r+0x8f2>
 8007d46:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d4a:	463e      	mov	r6, r7
 8007d4c:	e5a9      	b.n	80078a2 <_dtoa_r+0x48a>
 8007d4e:	bf00      	nop
 8007d50:	40240000 	.word	0x40240000
 8007d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d56:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80fa 	beq.w	8007f54 <_dtoa_r+0xb3c>
 8007d60:	2d00      	cmp	r5, #0
 8007d62:	dd05      	ble.n	8007d70 <_dtoa_r+0x958>
 8007d64:	4631      	mov	r1, r6
 8007d66:	462a      	mov	r2, r5
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 fe6b 	bl	8008a44 <__lshift>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	9b07      	ldr	r3, [sp, #28]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d04c      	beq.n	8007e10 <_dtoa_r+0x9f8>
 8007d76:	6871      	ldr	r1, [r6, #4]
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fc64 	bl	8008646 <_Balloc>
 8007d7e:	6932      	ldr	r2, [r6, #16]
 8007d80:	3202      	adds	r2, #2
 8007d82:	4605      	mov	r5, r0
 8007d84:	0092      	lsls	r2, r2, #2
 8007d86:	f106 010c 	add.w	r1, r6, #12
 8007d8a:	300c      	adds	r0, #12
 8007d8c:	f000 fc50 	bl	8008630 <memcpy>
 8007d90:	2201      	movs	r2, #1
 8007d92:	4629      	mov	r1, r5
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 fe55 	bl	8008a44 <__lshift>
 8007d9a:	9b00      	ldr	r3, [sp, #0]
 8007d9c:	f8cd b014 	str.w	fp, [sp, #20]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	46b1      	mov	r9, r6
 8007da6:	9307      	str	r3, [sp, #28]
 8007da8:	4606      	mov	r6, r0
 8007daa:	4639      	mov	r1, r7
 8007dac:	9804      	ldr	r0, [sp, #16]
 8007dae:	f7ff faa5 	bl	80072fc <quorem>
 8007db2:	4649      	mov	r1, r9
 8007db4:	4605      	mov	r5, r0
 8007db6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007dba:	9804      	ldr	r0, [sp, #16]
 8007dbc:	f000 fe96 	bl	8008aec <__mcmp>
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	9000      	str	r0, [sp, #0]
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 feaa 	bl	8008b20 <__mdiff>
 8007dcc:	68c3      	ldr	r3, [r0, #12]
 8007dce:	4602      	mov	r2, r0
 8007dd0:	bb03      	cbnz	r3, 8007e14 <_dtoa_r+0x9fc>
 8007dd2:	4601      	mov	r1, r0
 8007dd4:	9008      	str	r0, [sp, #32]
 8007dd6:	9804      	ldr	r0, [sp, #16]
 8007dd8:	f000 fe88 	bl	8008aec <__mcmp>
 8007ddc:	9a08      	ldr	r2, [sp, #32]
 8007dde:	4603      	mov	r3, r0
 8007de0:	4611      	mov	r1, r2
 8007de2:	4620      	mov	r0, r4
 8007de4:	9308      	str	r3, [sp, #32]
 8007de6:	f000 fc62 	bl	80086ae <_Bfree>
 8007dea:	9b08      	ldr	r3, [sp, #32]
 8007dec:	b9a3      	cbnz	r3, 8007e18 <_dtoa_r+0xa00>
 8007dee:	9a06      	ldr	r2, [sp, #24]
 8007df0:	b992      	cbnz	r2, 8007e18 <_dtoa_r+0xa00>
 8007df2:	9a07      	ldr	r2, [sp, #28]
 8007df4:	b982      	cbnz	r2, 8007e18 <_dtoa_r+0xa00>
 8007df6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dfa:	d029      	beq.n	8007e50 <_dtoa_r+0xa38>
 8007dfc:	9b00      	ldr	r3, [sp, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	dd01      	ble.n	8007e06 <_dtoa_r+0x9ee>
 8007e02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007e06:	9b05      	ldr	r3, [sp, #20]
 8007e08:	1c5d      	adds	r5, r3, #1
 8007e0a:	f883 8000 	strb.w	r8, [r3]
 8007e0e:	e782      	b.n	8007d16 <_dtoa_r+0x8fe>
 8007e10:	4630      	mov	r0, r6
 8007e12:	e7c2      	b.n	8007d9a <_dtoa_r+0x982>
 8007e14:	2301      	movs	r3, #1
 8007e16:	e7e3      	b.n	8007de0 <_dtoa_r+0x9c8>
 8007e18:	9a00      	ldr	r2, [sp, #0]
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	db04      	blt.n	8007e28 <_dtoa_r+0xa10>
 8007e1e:	d125      	bne.n	8007e6c <_dtoa_r+0xa54>
 8007e20:	9a06      	ldr	r2, [sp, #24]
 8007e22:	bb1a      	cbnz	r2, 8007e6c <_dtoa_r+0xa54>
 8007e24:	9a07      	ldr	r2, [sp, #28]
 8007e26:	bb0a      	cbnz	r2, 8007e6c <_dtoa_r+0xa54>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	ddec      	ble.n	8007e06 <_dtoa_r+0x9ee>
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	9904      	ldr	r1, [sp, #16]
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 fe07 	bl	8008a44 <__lshift>
 8007e36:	4639      	mov	r1, r7
 8007e38:	9004      	str	r0, [sp, #16]
 8007e3a:	f000 fe57 	bl	8008aec <__mcmp>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	dc03      	bgt.n	8007e4a <_dtoa_r+0xa32>
 8007e42:	d1e0      	bne.n	8007e06 <_dtoa_r+0x9ee>
 8007e44:	f018 0f01 	tst.w	r8, #1
 8007e48:	d0dd      	beq.n	8007e06 <_dtoa_r+0x9ee>
 8007e4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e4e:	d1d8      	bne.n	8007e02 <_dtoa_r+0x9ea>
 8007e50:	9b05      	ldr	r3, [sp, #20]
 8007e52:	9a05      	ldr	r2, [sp, #20]
 8007e54:	1c5d      	adds	r5, r3, #1
 8007e56:	2339      	movs	r3, #57	; 0x39
 8007e58:	7013      	strb	r3, [r2, #0]
 8007e5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e5e:	2b39      	cmp	r3, #57	; 0x39
 8007e60:	f105 32ff 	add.w	r2, r5, #4294967295
 8007e64:	d04f      	beq.n	8007f06 <_dtoa_r+0xaee>
 8007e66:	3301      	adds	r3, #1
 8007e68:	7013      	strb	r3, [r2, #0]
 8007e6a:	e754      	b.n	8007d16 <_dtoa_r+0x8fe>
 8007e6c:	9a05      	ldr	r2, [sp, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f102 0501 	add.w	r5, r2, #1
 8007e74:	dd06      	ble.n	8007e84 <_dtoa_r+0xa6c>
 8007e76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e7a:	d0e9      	beq.n	8007e50 <_dtoa_r+0xa38>
 8007e7c:	f108 0801 	add.w	r8, r8, #1
 8007e80:	9b05      	ldr	r3, [sp, #20]
 8007e82:	e7c2      	b.n	8007e0a <_dtoa_r+0x9f2>
 8007e84:	9a02      	ldr	r2, [sp, #8]
 8007e86:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007e8a:	eba5 030b 	sub.w	r3, r5, fp
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d021      	beq.n	8007ed6 <_dtoa_r+0xabe>
 8007e92:	2300      	movs	r3, #0
 8007e94:	220a      	movs	r2, #10
 8007e96:	9904      	ldr	r1, [sp, #16]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 fc1f 	bl	80086dc <__multadd>
 8007e9e:	45b1      	cmp	r9, r6
 8007ea0:	9004      	str	r0, [sp, #16]
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	f04f 020a 	mov.w	r2, #10
 8007eaa:	4649      	mov	r1, r9
 8007eac:	4620      	mov	r0, r4
 8007eae:	d105      	bne.n	8007ebc <_dtoa_r+0xaa4>
 8007eb0:	f000 fc14 	bl	80086dc <__multadd>
 8007eb4:	4681      	mov	r9, r0
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	9505      	str	r5, [sp, #20]
 8007eba:	e776      	b.n	8007daa <_dtoa_r+0x992>
 8007ebc:	f000 fc0e 	bl	80086dc <__multadd>
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4681      	mov	r9, r0
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	220a      	movs	r2, #10
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 fc07 	bl	80086dc <__multadd>
 8007ece:	4606      	mov	r6, r0
 8007ed0:	e7f2      	b.n	8007eb8 <_dtoa_r+0xaa0>
 8007ed2:	f04f 0900 	mov.w	r9, #0
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	9904      	ldr	r1, [sp, #16]
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fdb2 	bl	8008a44 <__lshift>
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	9004      	str	r0, [sp, #16]
 8007ee4:	f000 fe02 	bl	8008aec <__mcmp>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	dcb6      	bgt.n	8007e5a <_dtoa_r+0xa42>
 8007eec:	d102      	bne.n	8007ef4 <_dtoa_r+0xadc>
 8007eee:	f018 0f01 	tst.w	r8, #1
 8007ef2:	d1b2      	bne.n	8007e5a <_dtoa_r+0xa42>
 8007ef4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ef8:	2b30      	cmp	r3, #48	; 0x30
 8007efa:	f105 32ff 	add.w	r2, r5, #4294967295
 8007efe:	f47f af0a 	bne.w	8007d16 <_dtoa_r+0x8fe>
 8007f02:	4615      	mov	r5, r2
 8007f04:	e7f6      	b.n	8007ef4 <_dtoa_r+0xadc>
 8007f06:	4593      	cmp	fp, r2
 8007f08:	d105      	bne.n	8007f16 <_dtoa_r+0xafe>
 8007f0a:	2331      	movs	r3, #49	; 0x31
 8007f0c:	f10a 0a01 	add.w	sl, sl, #1
 8007f10:	f88b 3000 	strb.w	r3, [fp]
 8007f14:	e6ff      	b.n	8007d16 <_dtoa_r+0x8fe>
 8007f16:	4615      	mov	r5, r2
 8007f18:	e79f      	b.n	8007e5a <_dtoa_r+0xa42>
 8007f1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007f80 <_dtoa_r+0xb68>
 8007f1e:	e007      	b.n	8007f30 <_dtoa_r+0xb18>
 8007f20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f22:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007f84 <_dtoa_r+0xb6c>
 8007f26:	b11b      	cbz	r3, 8007f30 <_dtoa_r+0xb18>
 8007f28:	f10b 0308 	add.w	r3, fp, #8
 8007f2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	4658      	mov	r0, fp
 8007f32:	b017      	add	sp, #92	; 0x5c
 8007f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f38:	9b06      	ldr	r3, [sp, #24]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	f77f ae35 	ble.w	8007baa <_dtoa_r+0x792>
 8007f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f42:	9307      	str	r3, [sp, #28]
 8007f44:	e649      	b.n	8007bda <_dtoa_r+0x7c2>
 8007f46:	9b02      	ldr	r3, [sp, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dc03      	bgt.n	8007f54 <_dtoa_r+0xb3c>
 8007f4c:	9b06      	ldr	r3, [sp, #24]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	f73f aecc 	bgt.w	8007cec <_dtoa_r+0x8d4>
 8007f54:	465d      	mov	r5, fp
 8007f56:	4639      	mov	r1, r7
 8007f58:	9804      	ldr	r0, [sp, #16]
 8007f5a:	f7ff f9cf 	bl	80072fc <quorem>
 8007f5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007f62:	f805 8b01 	strb.w	r8, [r5], #1
 8007f66:	9a02      	ldr	r2, [sp, #8]
 8007f68:	eba5 030b 	sub.w	r3, r5, fp
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	ddb0      	ble.n	8007ed2 <_dtoa_r+0xaba>
 8007f70:	2300      	movs	r3, #0
 8007f72:	220a      	movs	r2, #10
 8007f74:	9904      	ldr	r1, [sp, #16]
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 fbb0 	bl	80086dc <__multadd>
 8007f7c:	9004      	str	r0, [sp, #16]
 8007f7e:	e7ea      	b.n	8007f56 <_dtoa_r+0xb3e>
 8007f80:	0800b1f4 	.word	0x0800b1f4
 8007f84:	0800b270 	.word	0x0800b270

08007f88 <rshift>:
 8007f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8a:	6906      	ldr	r6, [r0, #16]
 8007f8c:	114b      	asrs	r3, r1, #5
 8007f8e:	429e      	cmp	r6, r3
 8007f90:	f100 0414 	add.w	r4, r0, #20
 8007f94:	dd30      	ble.n	8007ff8 <rshift+0x70>
 8007f96:	f011 011f 	ands.w	r1, r1, #31
 8007f9a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007f9e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007fa2:	d108      	bne.n	8007fb6 <rshift+0x2e>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	42b2      	cmp	r2, r6
 8007fa8:	460b      	mov	r3, r1
 8007faa:	d211      	bcs.n	8007fd0 <rshift+0x48>
 8007fac:	f852 3b04 	ldr.w	r3, [r2], #4
 8007fb0:	f841 3b04 	str.w	r3, [r1], #4
 8007fb4:	e7f7      	b.n	8007fa6 <rshift+0x1e>
 8007fb6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007fba:	f1c1 0c20 	rsb	ip, r1, #32
 8007fbe:	40cd      	lsrs	r5, r1
 8007fc0:	3204      	adds	r2, #4
 8007fc2:	4623      	mov	r3, r4
 8007fc4:	42b2      	cmp	r2, r6
 8007fc6:	4617      	mov	r7, r2
 8007fc8:	d30c      	bcc.n	8007fe4 <rshift+0x5c>
 8007fca:	601d      	str	r5, [r3, #0]
 8007fcc:	b105      	cbz	r5, 8007fd0 <rshift+0x48>
 8007fce:	3304      	adds	r3, #4
 8007fd0:	1b1a      	subs	r2, r3, r4
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fd8:	bf08      	it	eq
 8007fda:	2300      	moveq	r3, #0
 8007fdc:	6102      	str	r2, [r0, #16]
 8007fde:	bf08      	it	eq
 8007fe0:	6143      	streq	r3, [r0, #20]
 8007fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe4:	683f      	ldr	r7, [r7, #0]
 8007fe6:	fa07 f70c 	lsl.w	r7, r7, ip
 8007fea:	433d      	orrs	r5, r7
 8007fec:	f843 5b04 	str.w	r5, [r3], #4
 8007ff0:	f852 5b04 	ldr.w	r5, [r2], #4
 8007ff4:	40cd      	lsrs	r5, r1
 8007ff6:	e7e5      	b.n	8007fc4 <rshift+0x3c>
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	e7e9      	b.n	8007fd0 <rshift+0x48>

08007ffc <__hexdig_fun>:
 8007ffc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008000:	2b09      	cmp	r3, #9
 8008002:	d802      	bhi.n	800800a <__hexdig_fun+0xe>
 8008004:	3820      	subs	r0, #32
 8008006:	b2c0      	uxtb	r0, r0
 8008008:	4770      	bx	lr
 800800a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800800e:	2b05      	cmp	r3, #5
 8008010:	d801      	bhi.n	8008016 <__hexdig_fun+0x1a>
 8008012:	3847      	subs	r0, #71	; 0x47
 8008014:	e7f7      	b.n	8008006 <__hexdig_fun+0xa>
 8008016:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800801a:	2b05      	cmp	r3, #5
 800801c:	d801      	bhi.n	8008022 <__hexdig_fun+0x26>
 800801e:	3827      	subs	r0, #39	; 0x27
 8008020:	e7f1      	b.n	8008006 <__hexdig_fun+0xa>
 8008022:	2000      	movs	r0, #0
 8008024:	4770      	bx	lr

08008026 <__gethex>:
 8008026:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802a:	b08b      	sub	sp, #44	; 0x2c
 800802c:	468a      	mov	sl, r1
 800802e:	9002      	str	r0, [sp, #8]
 8008030:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008032:	9306      	str	r3, [sp, #24]
 8008034:	4690      	mov	r8, r2
 8008036:	f000 fad0 	bl	80085da <__localeconv_l>
 800803a:	6803      	ldr	r3, [r0, #0]
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	4618      	mov	r0, r3
 8008040:	f7f8 f8c6 	bl	80001d0 <strlen>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	9001      	str	r0, [sp, #4]
 8008048:	4403      	add	r3, r0
 800804a:	f04f 0b00 	mov.w	fp, #0
 800804e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008052:	9307      	str	r3, [sp, #28]
 8008054:	f8da 3000 	ldr.w	r3, [sl]
 8008058:	3302      	adds	r3, #2
 800805a:	461f      	mov	r7, r3
 800805c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008060:	2830      	cmp	r0, #48	; 0x30
 8008062:	d06c      	beq.n	800813e <__gethex+0x118>
 8008064:	f7ff ffca 	bl	8007ffc <__hexdig_fun>
 8008068:	4604      	mov	r4, r0
 800806a:	2800      	cmp	r0, #0
 800806c:	d16a      	bne.n	8008144 <__gethex+0x11e>
 800806e:	9a01      	ldr	r2, [sp, #4]
 8008070:	9903      	ldr	r1, [sp, #12]
 8008072:	4638      	mov	r0, r7
 8008074:	f001 f8fe 	bl	8009274 <strncmp>
 8008078:	2800      	cmp	r0, #0
 800807a:	d166      	bne.n	800814a <__gethex+0x124>
 800807c:	9b01      	ldr	r3, [sp, #4]
 800807e:	5cf8      	ldrb	r0, [r7, r3]
 8008080:	18fe      	adds	r6, r7, r3
 8008082:	f7ff ffbb 	bl	8007ffc <__hexdig_fun>
 8008086:	2800      	cmp	r0, #0
 8008088:	d062      	beq.n	8008150 <__gethex+0x12a>
 800808a:	4633      	mov	r3, r6
 800808c:	7818      	ldrb	r0, [r3, #0]
 800808e:	2830      	cmp	r0, #48	; 0x30
 8008090:	461f      	mov	r7, r3
 8008092:	f103 0301 	add.w	r3, r3, #1
 8008096:	d0f9      	beq.n	800808c <__gethex+0x66>
 8008098:	f7ff ffb0 	bl	8007ffc <__hexdig_fun>
 800809c:	fab0 f580 	clz	r5, r0
 80080a0:	096d      	lsrs	r5, r5, #5
 80080a2:	4634      	mov	r4, r6
 80080a4:	f04f 0b01 	mov.w	fp, #1
 80080a8:	463a      	mov	r2, r7
 80080aa:	4616      	mov	r6, r2
 80080ac:	3201      	adds	r2, #1
 80080ae:	7830      	ldrb	r0, [r6, #0]
 80080b0:	f7ff ffa4 	bl	8007ffc <__hexdig_fun>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d1f8      	bne.n	80080aa <__gethex+0x84>
 80080b8:	9a01      	ldr	r2, [sp, #4]
 80080ba:	9903      	ldr	r1, [sp, #12]
 80080bc:	4630      	mov	r0, r6
 80080be:	f001 f8d9 	bl	8009274 <strncmp>
 80080c2:	b950      	cbnz	r0, 80080da <__gethex+0xb4>
 80080c4:	b954      	cbnz	r4, 80080dc <__gethex+0xb6>
 80080c6:	9b01      	ldr	r3, [sp, #4]
 80080c8:	18f4      	adds	r4, r6, r3
 80080ca:	4622      	mov	r2, r4
 80080cc:	4616      	mov	r6, r2
 80080ce:	3201      	adds	r2, #1
 80080d0:	7830      	ldrb	r0, [r6, #0]
 80080d2:	f7ff ff93 	bl	8007ffc <__hexdig_fun>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d1f8      	bne.n	80080cc <__gethex+0xa6>
 80080da:	b10c      	cbz	r4, 80080e0 <__gethex+0xba>
 80080dc:	1ba4      	subs	r4, r4, r6
 80080de:	00a4      	lsls	r4, r4, #2
 80080e0:	7833      	ldrb	r3, [r6, #0]
 80080e2:	2b50      	cmp	r3, #80	; 0x50
 80080e4:	d001      	beq.n	80080ea <__gethex+0xc4>
 80080e6:	2b70      	cmp	r3, #112	; 0x70
 80080e8:	d140      	bne.n	800816c <__gethex+0x146>
 80080ea:	7873      	ldrb	r3, [r6, #1]
 80080ec:	2b2b      	cmp	r3, #43	; 0x2b
 80080ee:	d031      	beq.n	8008154 <__gethex+0x12e>
 80080f0:	2b2d      	cmp	r3, #45	; 0x2d
 80080f2:	d033      	beq.n	800815c <__gethex+0x136>
 80080f4:	1c71      	adds	r1, r6, #1
 80080f6:	f04f 0900 	mov.w	r9, #0
 80080fa:	7808      	ldrb	r0, [r1, #0]
 80080fc:	f7ff ff7e 	bl	8007ffc <__hexdig_fun>
 8008100:	1e43      	subs	r3, r0, #1
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b18      	cmp	r3, #24
 8008106:	d831      	bhi.n	800816c <__gethex+0x146>
 8008108:	f1a0 0210 	sub.w	r2, r0, #16
 800810c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008110:	f7ff ff74 	bl	8007ffc <__hexdig_fun>
 8008114:	1e43      	subs	r3, r0, #1
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b18      	cmp	r3, #24
 800811a:	d922      	bls.n	8008162 <__gethex+0x13c>
 800811c:	f1b9 0f00 	cmp.w	r9, #0
 8008120:	d000      	beq.n	8008124 <__gethex+0xfe>
 8008122:	4252      	negs	r2, r2
 8008124:	4414      	add	r4, r2
 8008126:	f8ca 1000 	str.w	r1, [sl]
 800812a:	b30d      	cbz	r5, 8008170 <__gethex+0x14a>
 800812c:	f1bb 0f00 	cmp.w	fp, #0
 8008130:	bf0c      	ite	eq
 8008132:	2706      	moveq	r7, #6
 8008134:	2700      	movne	r7, #0
 8008136:	4638      	mov	r0, r7
 8008138:	b00b      	add	sp, #44	; 0x2c
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813e:	f10b 0b01 	add.w	fp, fp, #1
 8008142:	e78a      	b.n	800805a <__gethex+0x34>
 8008144:	2500      	movs	r5, #0
 8008146:	462c      	mov	r4, r5
 8008148:	e7ae      	b.n	80080a8 <__gethex+0x82>
 800814a:	463e      	mov	r6, r7
 800814c:	2501      	movs	r5, #1
 800814e:	e7c7      	b.n	80080e0 <__gethex+0xba>
 8008150:	4604      	mov	r4, r0
 8008152:	e7fb      	b.n	800814c <__gethex+0x126>
 8008154:	f04f 0900 	mov.w	r9, #0
 8008158:	1cb1      	adds	r1, r6, #2
 800815a:	e7ce      	b.n	80080fa <__gethex+0xd4>
 800815c:	f04f 0901 	mov.w	r9, #1
 8008160:	e7fa      	b.n	8008158 <__gethex+0x132>
 8008162:	230a      	movs	r3, #10
 8008164:	fb03 0202 	mla	r2, r3, r2, r0
 8008168:	3a10      	subs	r2, #16
 800816a:	e7cf      	b.n	800810c <__gethex+0xe6>
 800816c:	4631      	mov	r1, r6
 800816e:	e7da      	b.n	8008126 <__gethex+0x100>
 8008170:	1bf3      	subs	r3, r6, r7
 8008172:	3b01      	subs	r3, #1
 8008174:	4629      	mov	r1, r5
 8008176:	2b07      	cmp	r3, #7
 8008178:	dc49      	bgt.n	800820e <__gethex+0x1e8>
 800817a:	9802      	ldr	r0, [sp, #8]
 800817c:	f000 fa63 	bl	8008646 <_Balloc>
 8008180:	9b01      	ldr	r3, [sp, #4]
 8008182:	f100 0914 	add.w	r9, r0, #20
 8008186:	f04f 0b00 	mov.w	fp, #0
 800818a:	f1c3 0301 	rsb	r3, r3, #1
 800818e:	4605      	mov	r5, r0
 8008190:	f8cd 9010 	str.w	r9, [sp, #16]
 8008194:	46da      	mov	sl, fp
 8008196:	9308      	str	r3, [sp, #32]
 8008198:	42b7      	cmp	r7, r6
 800819a:	d33b      	bcc.n	8008214 <__gethex+0x1ee>
 800819c:	9804      	ldr	r0, [sp, #16]
 800819e:	f840 ab04 	str.w	sl, [r0], #4
 80081a2:	eba0 0009 	sub.w	r0, r0, r9
 80081a6:	1080      	asrs	r0, r0, #2
 80081a8:	6128      	str	r0, [r5, #16]
 80081aa:	0147      	lsls	r7, r0, #5
 80081ac:	4650      	mov	r0, sl
 80081ae:	f000 fb0e 	bl	80087ce <__hi0bits>
 80081b2:	f8d8 6000 	ldr.w	r6, [r8]
 80081b6:	1a3f      	subs	r7, r7, r0
 80081b8:	42b7      	cmp	r7, r6
 80081ba:	dd64      	ble.n	8008286 <__gethex+0x260>
 80081bc:	1bbf      	subs	r7, r7, r6
 80081be:	4639      	mov	r1, r7
 80081c0:	4628      	mov	r0, r5
 80081c2:	f000 fe1d 	bl	8008e00 <__any_on>
 80081c6:	4682      	mov	sl, r0
 80081c8:	b178      	cbz	r0, 80081ea <__gethex+0x1c4>
 80081ca:	1e7b      	subs	r3, r7, #1
 80081cc:	1159      	asrs	r1, r3, #5
 80081ce:	f003 021f 	and.w	r2, r3, #31
 80081d2:	f04f 0a01 	mov.w	sl, #1
 80081d6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80081da:	fa0a f202 	lsl.w	r2, sl, r2
 80081de:	420a      	tst	r2, r1
 80081e0:	d003      	beq.n	80081ea <__gethex+0x1c4>
 80081e2:	4553      	cmp	r3, sl
 80081e4:	dc46      	bgt.n	8008274 <__gethex+0x24e>
 80081e6:	f04f 0a02 	mov.w	sl, #2
 80081ea:	4639      	mov	r1, r7
 80081ec:	4628      	mov	r0, r5
 80081ee:	f7ff fecb 	bl	8007f88 <rshift>
 80081f2:	443c      	add	r4, r7
 80081f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081f8:	42a3      	cmp	r3, r4
 80081fa:	da52      	bge.n	80082a2 <__gethex+0x27c>
 80081fc:	4629      	mov	r1, r5
 80081fe:	9802      	ldr	r0, [sp, #8]
 8008200:	f000 fa55 	bl	80086ae <_Bfree>
 8008204:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008206:	2300      	movs	r3, #0
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	27a3      	movs	r7, #163	; 0xa3
 800820c:	e793      	b.n	8008136 <__gethex+0x110>
 800820e:	3101      	adds	r1, #1
 8008210:	105b      	asrs	r3, r3, #1
 8008212:	e7b0      	b.n	8008176 <__gethex+0x150>
 8008214:	1e73      	subs	r3, r6, #1
 8008216:	9305      	str	r3, [sp, #20]
 8008218:	9a07      	ldr	r2, [sp, #28]
 800821a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800821e:	4293      	cmp	r3, r2
 8008220:	d018      	beq.n	8008254 <__gethex+0x22e>
 8008222:	f1bb 0f20 	cmp.w	fp, #32
 8008226:	d107      	bne.n	8008238 <__gethex+0x212>
 8008228:	9b04      	ldr	r3, [sp, #16]
 800822a:	f8c3 a000 	str.w	sl, [r3]
 800822e:	3304      	adds	r3, #4
 8008230:	f04f 0a00 	mov.w	sl, #0
 8008234:	9304      	str	r3, [sp, #16]
 8008236:	46d3      	mov	fp, sl
 8008238:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800823c:	f7ff fede 	bl	8007ffc <__hexdig_fun>
 8008240:	f000 000f 	and.w	r0, r0, #15
 8008244:	fa00 f00b 	lsl.w	r0, r0, fp
 8008248:	ea4a 0a00 	orr.w	sl, sl, r0
 800824c:	f10b 0b04 	add.w	fp, fp, #4
 8008250:	9b05      	ldr	r3, [sp, #20]
 8008252:	e00d      	b.n	8008270 <__gethex+0x24a>
 8008254:	9b05      	ldr	r3, [sp, #20]
 8008256:	9a08      	ldr	r2, [sp, #32]
 8008258:	4413      	add	r3, r2
 800825a:	42bb      	cmp	r3, r7
 800825c:	d3e1      	bcc.n	8008222 <__gethex+0x1fc>
 800825e:	4618      	mov	r0, r3
 8008260:	9a01      	ldr	r2, [sp, #4]
 8008262:	9903      	ldr	r1, [sp, #12]
 8008264:	9309      	str	r3, [sp, #36]	; 0x24
 8008266:	f001 f805 	bl	8009274 <strncmp>
 800826a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826c:	2800      	cmp	r0, #0
 800826e:	d1d8      	bne.n	8008222 <__gethex+0x1fc>
 8008270:	461e      	mov	r6, r3
 8008272:	e791      	b.n	8008198 <__gethex+0x172>
 8008274:	1eb9      	subs	r1, r7, #2
 8008276:	4628      	mov	r0, r5
 8008278:	f000 fdc2 	bl	8008e00 <__any_on>
 800827c:	2800      	cmp	r0, #0
 800827e:	d0b2      	beq.n	80081e6 <__gethex+0x1c0>
 8008280:	f04f 0a03 	mov.w	sl, #3
 8008284:	e7b1      	b.n	80081ea <__gethex+0x1c4>
 8008286:	da09      	bge.n	800829c <__gethex+0x276>
 8008288:	1bf7      	subs	r7, r6, r7
 800828a:	4629      	mov	r1, r5
 800828c:	463a      	mov	r2, r7
 800828e:	9802      	ldr	r0, [sp, #8]
 8008290:	f000 fbd8 	bl	8008a44 <__lshift>
 8008294:	1be4      	subs	r4, r4, r7
 8008296:	4605      	mov	r5, r0
 8008298:	f100 0914 	add.w	r9, r0, #20
 800829c:	f04f 0a00 	mov.w	sl, #0
 80082a0:	e7a8      	b.n	80081f4 <__gethex+0x1ce>
 80082a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80082a6:	42a0      	cmp	r0, r4
 80082a8:	dd6a      	ble.n	8008380 <__gethex+0x35a>
 80082aa:	1b04      	subs	r4, r0, r4
 80082ac:	42a6      	cmp	r6, r4
 80082ae:	dc2e      	bgt.n	800830e <__gethex+0x2e8>
 80082b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d022      	beq.n	80082fe <__gethex+0x2d8>
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d024      	beq.n	8008306 <__gethex+0x2e0>
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d115      	bne.n	80082ec <__gethex+0x2c6>
 80082c0:	42a6      	cmp	r6, r4
 80082c2:	d113      	bne.n	80082ec <__gethex+0x2c6>
 80082c4:	2e01      	cmp	r6, #1
 80082c6:	dc0b      	bgt.n	80082e0 <__gethex+0x2ba>
 80082c8:	9a06      	ldr	r2, [sp, #24]
 80082ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	2301      	movs	r3, #1
 80082d2:	612b      	str	r3, [r5, #16]
 80082d4:	f8c9 3000 	str.w	r3, [r9]
 80082d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082da:	2762      	movs	r7, #98	; 0x62
 80082dc:	601d      	str	r5, [r3, #0]
 80082de:	e72a      	b.n	8008136 <__gethex+0x110>
 80082e0:	1e71      	subs	r1, r6, #1
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 fd8c 	bl	8008e00 <__any_on>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d1ed      	bne.n	80082c8 <__gethex+0x2a2>
 80082ec:	4629      	mov	r1, r5
 80082ee:	9802      	ldr	r0, [sp, #8]
 80082f0:	f000 f9dd 	bl	80086ae <_Bfree>
 80082f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80082f6:	2300      	movs	r3, #0
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	2750      	movs	r7, #80	; 0x50
 80082fc:	e71b      	b.n	8008136 <__gethex+0x110>
 80082fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008300:	2b00      	cmp	r3, #0
 8008302:	d0e1      	beq.n	80082c8 <__gethex+0x2a2>
 8008304:	e7f2      	b.n	80082ec <__gethex+0x2c6>
 8008306:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1dd      	bne.n	80082c8 <__gethex+0x2a2>
 800830c:	e7ee      	b.n	80082ec <__gethex+0x2c6>
 800830e:	1e67      	subs	r7, r4, #1
 8008310:	f1ba 0f00 	cmp.w	sl, #0
 8008314:	d131      	bne.n	800837a <__gethex+0x354>
 8008316:	b127      	cbz	r7, 8008322 <__gethex+0x2fc>
 8008318:	4639      	mov	r1, r7
 800831a:	4628      	mov	r0, r5
 800831c:	f000 fd70 	bl	8008e00 <__any_on>
 8008320:	4682      	mov	sl, r0
 8008322:	117a      	asrs	r2, r7, #5
 8008324:	2301      	movs	r3, #1
 8008326:	f007 071f 	and.w	r7, r7, #31
 800832a:	fa03 f707 	lsl.w	r7, r3, r7
 800832e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008332:	4621      	mov	r1, r4
 8008334:	421f      	tst	r7, r3
 8008336:	4628      	mov	r0, r5
 8008338:	bf18      	it	ne
 800833a:	f04a 0a02 	orrne.w	sl, sl, #2
 800833e:	1b36      	subs	r6, r6, r4
 8008340:	f7ff fe22 	bl	8007f88 <rshift>
 8008344:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008348:	2702      	movs	r7, #2
 800834a:	f1ba 0f00 	cmp.w	sl, #0
 800834e:	d048      	beq.n	80083e2 <__gethex+0x3bc>
 8008350:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d015      	beq.n	8008384 <__gethex+0x35e>
 8008358:	2b03      	cmp	r3, #3
 800835a:	d017      	beq.n	800838c <__gethex+0x366>
 800835c:	2b01      	cmp	r3, #1
 800835e:	d109      	bne.n	8008374 <__gethex+0x34e>
 8008360:	f01a 0f02 	tst.w	sl, #2
 8008364:	d006      	beq.n	8008374 <__gethex+0x34e>
 8008366:	f8d9 3000 	ldr.w	r3, [r9]
 800836a:	ea4a 0a03 	orr.w	sl, sl, r3
 800836e:	f01a 0f01 	tst.w	sl, #1
 8008372:	d10e      	bne.n	8008392 <__gethex+0x36c>
 8008374:	f047 0710 	orr.w	r7, r7, #16
 8008378:	e033      	b.n	80083e2 <__gethex+0x3bc>
 800837a:	f04f 0a01 	mov.w	sl, #1
 800837e:	e7d0      	b.n	8008322 <__gethex+0x2fc>
 8008380:	2701      	movs	r7, #1
 8008382:	e7e2      	b.n	800834a <__gethex+0x324>
 8008384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008386:	f1c3 0301 	rsb	r3, r3, #1
 800838a:	9315      	str	r3, [sp, #84]	; 0x54
 800838c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0f0      	beq.n	8008374 <__gethex+0x34e>
 8008392:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008396:	f105 0314 	add.w	r3, r5, #20
 800839a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800839e:	eb03 010a 	add.w	r1, r3, sl
 80083a2:	f04f 0c00 	mov.w	ip, #0
 80083a6:	4618      	mov	r0, r3
 80083a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80083b0:	d01c      	beq.n	80083ec <__gethex+0x3c6>
 80083b2:	3201      	adds	r2, #1
 80083b4:	6002      	str	r2, [r0, #0]
 80083b6:	2f02      	cmp	r7, #2
 80083b8:	f105 0314 	add.w	r3, r5, #20
 80083bc:	d138      	bne.n	8008430 <__gethex+0x40a>
 80083be:	f8d8 2000 	ldr.w	r2, [r8]
 80083c2:	3a01      	subs	r2, #1
 80083c4:	42b2      	cmp	r2, r6
 80083c6:	d10a      	bne.n	80083de <__gethex+0x3b8>
 80083c8:	1171      	asrs	r1, r6, #5
 80083ca:	2201      	movs	r2, #1
 80083cc:	f006 061f 	and.w	r6, r6, #31
 80083d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083d4:	fa02 f606 	lsl.w	r6, r2, r6
 80083d8:	421e      	tst	r6, r3
 80083da:	bf18      	it	ne
 80083dc:	4617      	movne	r7, r2
 80083de:	f047 0720 	orr.w	r7, r7, #32
 80083e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083e4:	601d      	str	r5, [r3, #0]
 80083e6:	9b06      	ldr	r3, [sp, #24]
 80083e8:	601c      	str	r4, [r3, #0]
 80083ea:	e6a4      	b.n	8008136 <__gethex+0x110>
 80083ec:	4299      	cmp	r1, r3
 80083ee:	f843 cc04 	str.w	ip, [r3, #-4]
 80083f2:	d8d8      	bhi.n	80083a6 <__gethex+0x380>
 80083f4:	68ab      	ldr	r3, [r5, #8]
 80083f6:	4599      	cmp	r9, r3
 80083f8:	db12      	blt.n	8008420 <__gethex+0x3fa>
 80083fa:	6869      	ldr	r1, [r5, #4]
 80083fc:	9802      	ldr	r0, [sp, #8]
 80083fe:	3101      	adds	r1, #1
 8008400:	f000 f921 	bl	8008646 <_Balloc>
 8008404:	692a      	ldr	r2, [r5, #16]
 8008406:	3202      	adds	r2, #2
 8008408:	f105 010c 	add.w	r1, r5, #12
 800840c:	4683      	mov	fp, r0
 800840e:	0092      	lsls	r2, r2, #2
 8008410:	300c      	adds	r0, #12
 8008412:	f000 f90d 	bl	8008630 <memcpy>
 8008416:	4629      	mov	r1, r5
 8008418:	9802      	ldr	r0, [sp, #8]
 800841a:	f000 f948 	bl	80086ae <_Bfree>
 800841e:	465d      	mov	r5, fp
 8008420:	692b      	ldr	r3, [r5, #16]
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008428:	612a      	str	r2, [r5, #16]
 800842a:	2201      	movs	r2, #1
 800842c:	615a      	str	r2, [r3, #20]
 800842e:	e7c2      	b.n	80083b6 <__gethex+0x390>
 8008430:	692a      	ldr	r2, [r5, #16]
 8008432:	454a      	cmp	r2, r9
 8008434:	dd0b      	ble.n	800844e <__gethex+0x428>
 8008436:	2101      	movs	r1, #1
 8008438:	4628      	mov	r0, r5
 800843a:	f7ff fda5 	bl	8007f88 <rshift>
 800843e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008442:	3401      	adds	r4, #1
 8008444:	42a3      	cmp	r3, r4
 8008446:	f6ff aed9 	blt.w	80081fc <__gethex+0x1d6>
 800844a:	2701      	movs	r7, #1
 800844c:	e7c7      	b.n	80083de <__gethex+0x3b8>
 800844e:	f016 061f 	ands.w	r6, r6, #31
 8008452:	d0fa      	beq.n	800844a <__gethex+0x424>
 8008454:	449a      	add	sl, r3
 8008456:	f1c6 0620 	rsb	r6, r6, #32
 800845a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800845e:	f000 f9b6 	bl	80087ce <__hi0bits>
 8008462:	42b0      	cmp	r0, r6
 8008464:	dbe7      	blt.n	8008436 <__gethex+0x410>
 8008466:	e7f0      	b.n	800844a <__gethex+0x424>

08008468 <L_shift>:
 8008468:	f1c2 0208 	rsb	r2, r2, #8
 800846c:	0092      	lsls	r2, r2, #2
 800846e:	b570      	push	{r4, r5, r6, lr}
 8008470:	f1c2 0620 	rsb	r6, r2, #32
 8008474:	6843      	ldr	r3, [r0, #4]
 8008476:	6804      	ldr	r4, [r0, #0]
 8008478:	fa03 f506 	lsl.w	r5, r3, r6
 800847c:	432c      	orrs	r4, r5
 800847e:	40d3      	lsrs	r3, r2
 8008480:	6004      	str	r4, [r0, #0]
 8008482:	f840 3f04 	str.w	r3, [r0, #4]!
 8008486:	4288      	cmp	r0, r1
 8008488:	d3f4      	bcc.n	8008474 <L_shift+0xc>
 800848a:	bd70      	pop	{r4, r5, r6, pc}

0800848c <__match>:
 800848c:	b530      	push	{r4, r5, lr}
 800848e:	6803      	ldr	r3, [r0, #0]
 8008490:	3301      	adds	r3, #1
 8008492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008496:	b914      	cbnz	r4, 800849e <__match+0x12>
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	2001      	movs	r0, #1
 800849c:	bd30      	pop	{r4, r5, pc}
 800849e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80084a6:	2d19      	cmp	r5, #25
 80084a8:	bf98      	it	ls
 80084aa:	3220      	addls	r2, #32
 80084ac:	42a2      	cmp	r2, r4
 80084ae:	d0f0      	beq.n	8008492 <__match+0x6>
 80084b0:	2000      	movs	r0, #0
 80084b2:	e7f3      	b.n	800849c <__match+0x10>

080084b4 <__hexnan>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	680b      	ldr	r3, [r1, #0]
 80084ba:	6801      	ldr	r1, [r0, #0]
 80084bc:	115f      	asrs	r7, r3, #5
 80084be:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80084c2:	f013 031f 	ands.w	r3, r3, #31
 80084c6:	b087      	sub	sp, #28
 80084c8:	bf18      	it	ne
 80084ca:	3704      	addne	r7, #4
 80084cc:	2500      	movs	r5, #0
 80084ce:	1f3e      	subs	r6, r7, #4
 80084d0:	4682      	mov	sl, r0
 80084d2:	4690      	mov	r8, r2
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	f847 5c04 	str.w	r5, [r7, #-4]
 80084da:	46b1      	mov	r9, r6
 80084dc:	4634      	mov	r4, r6
 80084de:	9502      	str	r5, [sp, #8]
 80084e0:	46ab      	mov	fp, r5
 80084e2:	784a      	ldrb	r2, [r1, #1]
 80084e4:	1c4b      	adds	r3, r1, #1
 80084e6:	9303      	str	r3, [sp, #12]
 80084e8:	b342      	cbz	r2, 800853c <__hexnan+0x88>
 80084ea:	4610      	mov	r0, r2
 80084ec:	9105      	str	r1, [sp, #20]
 80084ee:	9204      	str	r2, [sp, #16]
 80084f0:	f7ff fd84 	bl	8007ffc <__hexdig_fun>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d143      	bne.n	8008580 <__hexnan+0xcc>
 80084f8:	9a04      	ldr	r2, [sp, #16]
 80084fa:	9905      	ldr	r1, [sp, #20]
 80084fc:	2a20      	cmp	r2, #32
 80084fe:	d818      	bhi.n	8008532 <__hexnan+0x7e>
 8008500:	9b02      	ldr	r3, [sp, #8]
 8008502:	459b      	cmp	fp, r3
 8008504:	dd13      	ble.n	800852e <__hexnan+0x7a>
 8008506:	454c      	cmp	r4, r9
 8008508:	d206      	bcs.n	8008518 <__hexnan+0x64>
 800850a:	2d07      	cmp	r5, #7
 800850c:	dc04      	bgt.n	8008518 <__hexnan+0x64>
 800850e:	462a      	mov	r2, r5
 8008510:	4649      	mov	r1, r9
 8008512:	4620      	mov	r0, r4
 8008514:	f7ff ffa8 	bl	8008468 <L_shift>
 8008518:	4544      	cmp	r4, r8
 800851a:	d944      	bls.n	80085a6 <__hexnan+0xf2>
 800851c:	2300      	movs	r3, #0
 800851e:	f1a4 0904 	sub.w	r9, r4, #4
 8008522:	f844 3c04 	str.w	r3, [r4, #-4]
 8008526:	f8cd b008 	str.w	fp, [sp, #8]
 800852a:	464c      	mov	r4, r9
 800852c:	461d      	mov	r5, r3
 800852e:	9903      	ldr	r1, [sp, #12]
 8008530:	e7d7      	b.n	80084e2 <__hexnan+0x2e>
 8008532:	2a29      	cmp	r2, #41	; 0x29
 8008534:	d14a      	bne.n	80085cc <__hexnan+0x118>
 8008536:	3102      	adds	r1, #2
 8008538:	f8ca 1000 	str.w	r1, [sl]
 800853c:	f1bb 0f00 	cmp.w	fp, #0
 8008540:	d044      	beq.n	80085cc <__hexnan+0x118>
 8008542:	454c      	cmp	r4, r9
 8008544:	d206      	bcs.n	8008554 <__hexnan+0xa0>
 8008546:	2d07      	cmp	r5, #7
 8008548:	dc04      	bgt.n	8008554 <__hexnan+0xa0>
 800854a:	462a      	mov	r2, r5
 800854c:	4649      	mov	r1, r9
 800854e:	4620      	mov	r0, r4
 8008550:	f7ff ff8a 	bl	8008468 <L_shift>
 8008554:	4544      	cmp	r4, r8
 8008556:	d928      	bls.n	80085aa <__hexnan+0xf6>
 8008558:	4643      	mov	r3, r8
 800855a:	f854 2b04 	ldr.w	r2, [r4], #4
 800855e:	f843 2b04 	str.w	r2, [r3], #4
 8008562:	42a6      	cmp	r6, r4
 8008564:	d2f9      	bcs.n	800855a <__hexnan+0xa6>
 8008566:	2200      	movs	r2, #0
 8008568:	f843 2b04 	str.w	r2, [r3], #4
 800856c:	429e      	cmp	r6, r3
 800856e:	d2fb      	bcs.n	8008568 <__hexnan+0xb4>
 8008570:	6833      	ldr	r3, [r6, #0]
 8008572:	b91b      	cbnz	r3, 800857c <__hexnan+0xc8>
 8008574:	4546      	cmp	r6, r8
 8008576:	d127      	bne.n	80085c8 <__hexnan+0x114>
 8008578:	2301      	movs	r3, #1
 800857a:	6033      	str	r3, [r6, #0]
 800857c:	2005      	movs	r0, #5
 800857e:	e026      	b.n	80085ce <__hexnan+0x11a>
 8008580:	3501      	adds	r5, #1
 8008582:	2d08      	cmp	r5, #8
 8008584:	f10b 0b01 	add.w	fp, fp, #1
 8008588:	dd06      	ble.n	8008598 <__hexnan+0xe4>
 800858a:	4544      	cmp	r4, r8
 800858c:	d9cf      	bls.n	800852e <__hexnan+0x7a>
 800858e:	2300      	movs	r3, #0
 8008590:	f844 3c04 	str.w	r3, [r4, #-4]
 8008594:	2501      	movs	r5, #1
 8008596:	3c04      	subs	r4, #4
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	f000 000f 	and.w	r0, r0, #15
 800859e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80085a2:	6020      	str	r0, [r4, #0]
 80085a4:	e7c3      	b.n	800852e <__hexnan+0x7a>
 80085a6:	2508      	movs	r5, #8
 80085a8:	e7c1      	b.n	800852e <__hexnan+0x7a>
 80085aa:	9b01      	ldr	r3, [sp, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0df      	beq.n	8008570 <__hexnan+0xbc>
 80085b0:	f04f 32ff 	mov.w	r2, #4294967295
 80085b4:	f1c3 0320 	rsb	r3, r3, #32
 80085b8:	fa22 f303 	lsr.w	r3, r2, r3
 80085bc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80085c0:	401a      	ands	r2, r3
 80085c2:	f847 2c04 	str.w	r2, [r7, #-4]
 80085c6:	e7d3      	b.n	8008570 <__hexnan+0xbc>
 80085c8:	3e04      	subs	r6, #4
 80085ca:	e7d1      	b.n	8008570 <__hexnan+0xbc>
 80085cc:	2004      	movs	r0, #4
 80085ce:	b007      	add	sp, #28
 80085d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080085d4 <__locale_ctype_ptr_l>:
 80085d4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80085d8:	4770      	bx	lr

080085da <__localeconv_l>:
 80085da:	30f0      	adds	r0, #240	; 0xf0
 80085dc:	4770      	bx	lr
	...

080085e0 <_localeconv_r>:
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <_localeconv_r+0x14>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6a18      	ldr	r0, [r3, #32]
 80085e6:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <_localeconv_r+0x18>)
 80085e8:	2800      	cmp	r0, #0
 80085ea:	bf08      	it	eq
 80085ec:	4618      	moveq	r0, r3
 80085ee:	30f0      	adds	r0, #240	; 0xf0
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	20000014 	.word	0x20000014
 80085f8:	20000078 	.word	0x20000078

080085fc <malloc>:
 80085fc:	4b02      	ldr	r3, [pc, #8]	; (8008608 <malloc+0xc>)
 80085fe:	4601      	mov	r1, r0
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	f000 bc7b 	b.w	8008efc <_malloc_r>
 8008606:	bf00      	nop
 8008608:	20000014 	.word	0x20000014

0800860c <__ascii_mbtowc>:
 800860c:	b082      	sub	sp, #8
 800860e:	b901      	cbnz	r1, 8008612 <__ascii_mbtowc+0x6>
 8008610:	a901      	add	r1, sp, #4
 8008612:	b142      	cbz	r2, 8008626 <__ascii_mbtowc+0x1a>
 8008614:	b14b      	cbz	r3, 800862a <__ascii_mbtowc+0x1e>
 8008616:	7813      	ldrb	r3, [r2, #0]
 8008618:	600b      	str	r3, [r1, #0]
 800861a:	7812      	ldrb	r2, [r2, #0]
 800861c:	1c10      	adds	r0, r2, #0
 800861e:	bf18      	it	ne
 8008620:	2001      	movne	r0, #1
 8008622:	b002      	add	sp, #8
 8008624:	4770      	bx	lr
 8008626:	4610      	mov	r0, r2
 8008628:	e7fb      	b.n	8008622 <__ascii_mbtowc+0x16>
 800862a:	f06f 0001 	mvn.w	r0, #1
 800862e:	e7f8      	b.n	8008622 <__ascii_mbtowc+0x16>

08008630 <memcpy>:
 8008630:	b510      	push	{r4, lr}
 8008632:	1e43      	subs	r3, r0, #1
 8008634:	440a      	add	r2, r1
 8008636:	4291      	cmp	r1, r2
 8008638:	d100      	bne.n	800863c <memcpy+0xc>
 800863a:	bd10      	pop	{r4, pc}
 800863c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008640:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008644:	e7f7      	b.n	8008636 <memcpy+0x6>

08008646 <_Balloc>:
 8008646:	b570      	push	{r4, r5, r6, lr}
 8008648:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800864a:	4604      	mov	r4, r0
 800864c:	460e      	mov	r6, r1
 800864e:	b93d      	cbnz	r5, 8008660 <_Balloc+0x1a>
 8008650:	2010      	movs	r0, #16
 8008652:	f7ff ffd3 	bl	80085fc <malloc>
 8008656:	6260      	str	r0, [r4, #36]	; 0x24
 8008658:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800865c:	6005      	str	r5, [r0, #0]
 800865e:	60c5      	str	r5, [r0, #12]
 8008660:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008662:	68eb      	ldr	r3, [r5, #12]
 8008664:	b183      	cbz	r3, 8008688 <_Balloc+0x42>
 8008666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800866e:	b9b8      	cbnz	r0, 80086a0 <_Balloc+0x5a>
 8008670:	2101      	movs	r1, #1
 8008672:	fa01 f506 	lsl.w	r5, r1, r6
 8008676:	1d6a      	adds	r2, r5, #5
 8008678:	0092      	lsls	r2, r2, #2
 800867a:	4620      	mov	r0, r4
 800867c:	f000 fbe1 	bl	8008e42 <_calloc_r>
 8008680:	b160      	cbz	r0, 800869c <_Balloc+0x56>
 8008682:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008686:	e00e      	b.n	80086a6 <_Balloc+0x60>
 8008688:	2221      	movs	r2, #33	; 0x21
 800868a:	2104      	movs	r1, #4
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fbd8 	bl	8008e42 <_calloc_r>
 8008692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008694:	60e8      	str	r0, [r5, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e4      	bne.n	8008666 <_Balloc+0x20>
 800869c:	2000      	movs	r0, #0
 800869e:	bd70      	pop	{r4, r5, r6, pc}
 80086a0:	6802      	ldr	r2, [r0, #0]
 80086a2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80086a6:	2300      	movs	r3, #0
 80086a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086ac:	e7f7      	b.n	800869e <_Balloc+0x58>

080086ae <_Bfree>:
 80086ae:	b570      	push	{r4, r5, r6, lr}
 80086b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80086b2:	4606      	mov	r6, r0
 80086b4:	460d      	mov	r5, r1
 80086b6:	b93c      	cbnz	r4, 80086c8 <_Bfree+0x1a>
 80086b8:	2010      	movs	r0, #16
 80086ba:	f7ff ff9f 	bl	80085fc <malloc>
 80086be:	6270      	str	r0, [r6, #36]	; 0x24
 80086c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086c4:	6004      	str	r4, [r0, #0]
 80086c6:	60c4      	str	r4, [r0, #12]
 80086c8:	b13d      	cbz	r5, 80086da <_Bfree+0x2c>
 80086ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086cc:	686a      	ldr	r2, [r5, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086d4:	6029      	str	r1, [r5, #0]
 80086d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80086da:	bd70      	pop	{r4, r5, r6, pc}

080086dc <__multadd>:
 80086dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e0:	690d      	ldr	r5, [r1, #16]
 80086e2:	461f      	mov	r7, r3
 80086e4:	4606      	mov	r6, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	f101 0c14 	add.w	ip, r1, #20
 80086ec:	2300      	movs	r3, #0
 80086ee:	f8dc 0000 	ldr.w	r0, [ip]
 80086f2:	b281      	uxth	r1, r0
 80086f4:	fb02 7101 	mla	r1, r2, r1, r7
 80086f8:	0c0f      	lsrs	r7, r1, #16
 80086fa:	0c00      	lsrs	r0, r0, #16
 80086fc:	fb02 7000 	mla	r0, r2, r0, r7
 8008700:	b289      	uxth	r1, r1
 8008702:	3301      	adds	r3, #1
 8008704:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008708:	429d      	cmp	r5, r3
 800870a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800870e:	f84c 1b04 	str.w	r1, [ip], #4
 8008712:	dcec      	bgt.n	80086ee <__multadd+0x12>
 8008714:	b1d7      	cbz	r7, 800874c <__multadd+0x70>
 8008716:	68a3      	ldr	r3, [r4, #8]
 8008718:	42ab      	cmp	r3, r5
 800871a:	dc12      	bgt.n	8008742 <__multadd+0x66>
 800871c:	6861      	ldr	r1, [r4, #4]
 800871e:	4630      	mov	r0, r6
 8008720:	3101      	adds	r1, #1
 8008722:	f7ff ff90 	bl	8008646 <_Balloc>
 8008726:	6922      	ldr	r2, [r4, #16]
 8008728:	3202      	adds	r2, #2
 800872a:	f104 010c 	add.w	r1, r4, #12
 800872e:	4680      	mov	r8, r0
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	300c      	adds	r0, #12
 8008734:	f7ff ff7c 	bl	8008630 <memcpy>
 8008738:	4621      	mov	r1, r4
 800873a:	4630      	mov	r0, r6
 800873c:	f7ff ffb7 	bl	80086ae <_Bfree>
 8008740:	4644      	mov	r4, r8
 8008742:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008746:	3501      	adds	r5, #1
 8008748:	615f      	str	r7, [r3, #20]
 800874a:	6125      	str	r5, [r4, #16]
 800874c:	4620      	mov	r0, r4
 800874e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008752 <__s2b>:
 8008752:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008756:	460c      	mov	r4, r1
 8008758:	4615      	mov	r5, r2
 800875a:	461f      	mov	r7, r3
 800875c:	2209      	movs	r2, #9
 800875e:	3308      	adds	r3, #8
 8008760:	4606      	mov	r6, r0
 8008762:	fb93 f3f2 	sdiv	r3, r3, r2
 8008766:	2100      	movs	r1, #0
 8008768:	2201      	movs	r2, #1
 800876a:	429a      	cmp	r2, r3
 800876c:	db20      	blt.n	80087b0 <__s2b+0x5e>
 800876e:	4630      	mov	r0, r6
 8008770:	f7ff ff69 	bl	8008646 <_Balloc>
 8008774:	9b08      	ldr	r3, [sp, #32]
 8008776:	6143      	str	r3, [r0, #20]
 8008778:	2d09      	cmp	r5, #9
 800877a:	f04f 0301 	mov.w	r3, #1
 800877e:	6103      	str	r3, [r0, #16]
 8008780:	dd19      	ble.n	80087b6 <__s2b+0x64>
 8008782:	f104 0809 	add.w	r8, r4, #9
 8008786:	46c1      	mov	r9, r8
 8008788:	442c      	add	r4, r5
 800878a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800878e:	4601      	mov	r1, r0
 8008790:	3b30      	subs	r3, #48	; 0x30
 8008792:	220a      	movs	r2, #10
 8008794:	4630      	mov	r0, r6
 8008796:	f7ff ffa1 	bl	80086dc <__multadd>
 800879a:	45a1      	cmp	r9, r4
 800879c:	d1f5      	bne.n	800878a <__s2b+0x38>
 800879e:	eb08 0405 	add.w	r4, r8, r5
 80087a2:	3c08      	subs	r4, #8
 80087a4:	1b2d      	subs	r5, r5, r4
 80087a6:	1963      	adds	r3, r4, r5
 80087a8:	42bb      	cmp	r3, r7
 80087aa:	db07      	blt.n	80087bc <__s2b+0x6a>
 80087ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087b0:	0052      	lsls	r2, r2, #1
 80087b2:	3101      	adds	r1, #1
 80087b4:	e7d9      	b.n	800876a <__s2b+0x18>
 80087b6:	340a      	adds	r4, #10
 80087b8:	2509      	movs	r5, #9
 80087ba:	e7f3      	b.n	80087a4 <__s2b+0x52>
 80087bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087c0:	4601      	mov	r1, r0
 80087c2:	3b30      	subs	r3, #48	; 0x30
 80087c4:	220a      	movs	r2, #10
 80087c6:	4630      	mov	r0, r6
 80087c8:	f7ff ff88 	bl	80086dc <__multadd>
 80087cc:	e7eb      	b.n	80087a6 <__s2b+0x54>

080087ce <__hi0bits>:
 80087ce:	0c02      	lsrs	r2, r0, #16
 80087d0:	0412      	lsls	r2, r2, #16
 80087d2:	4603      	mov	r3, r0
 80087d4:	b9b2      	cbnz	r2, 8008804 <__hi0bits+0x36>
 80087d6:	0403      	lsls	r3, r0, #16
 80087d8:	2010      	movs	r0, #16
 80087da:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80087de:	bf04      	itt	eq
 80087e0:	021b      	lsleq	r3, r3, #8
 80087e2:	3008      	addeq	r0, #8
 80087e4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80087e8:	bf04      	itt	eq
 80087ea:	011b      	lsleq	r3, r3, #4
 80087ec:	3004      	addeq	r0, #4
 80087ee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80087f2:	bf04      	itt	eq
 80087f4:	009b      	lsleq	r3, r3, #2
 80087f6:	3002      	addeq	r0, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	db06      	blt.n	800880a <__hi0bits+0x3c>
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	d503      	bpl.n	8008808 <__hi0bits+0x3a>
 8008800:	3001      	adds	r0, #1
 8008802:	4770      	bx	lr
 8008804:	2000      	movs	r0, #0
 8008806:	e7e8      	b.n	80087da <__hi0bits+0xc>
 8008808:	2020      	movs	r0, #32
 800880a:	4770      	bx	lr

0800880c <__lo0bits>:
 800880c:	6803      	ldr	r3, [r0, #0]
 800880e:	f013 0207 	ands.w	r2, r3, #7
 8008812:	4601      	mov	r1, r0
 8008814:	d00b      	beq.n	800882e <__lo0bits+0x22>
 8008816:	07da      	lsls	r2, r3, #31
 8008818:	d423      	bmi.n	8008862 <__lo0bits+0x56>
 800881a:	0798      	lsls	r0, r3, #30
 800881c:	bf49      	itett	mi
 800881e:	085b      	lsrmi	r3, r3, #1
 8008820:	089b      	lsrpl	r3, r3, #2
 8008822:	2001      	movmi	r0, #1
 8008824:	600b      	strmi	r3, [r1, #0]
 8008826:	bf5c      	itt	pl
 8008828:	600b      	strpl	r3, [r1, #0]
 800882a:	2002      	movpl	r0, #2
 800882c:	4770      	bx	lr
 800882e:	b298      	uxth	r0, r3
 8008830:	b9a8      	cbnz	r0, 800885e <__lo0bits+0x52>
 8008832:	0c1b      	lsrs	r3, r3, #16
 8008834:	2010      	movs	r0, #16
 8008836:	f013 0fff 	tst.w	r3, #255	; 0xff
 800883a:	bf04      	itt	eq
 800883c:	0a1b      	lsreq	r3, r3, #8
 800883e:	3008      	addeq	r0, #8
 8008840:	071a      	lsls	r2, r3, #28
 8008842:	bf04      	itt	eq
 8008844:	091b      	lsreq	r3, r3, #4
 8008846:	3004      	addeq	r0, #4
 8008848:	079a      	lsls	r2, r3, #30
 800884a:	bf04      	itt	eq
 800884c:	089b      	lsreq	r3, r3, #2
 800884e:	3002      	addeq	r0, #2
 8008850:	07da      	lsls	r2, r3, #31
 8008852:	d402      	bmi.n	800885a <__lo0bits+0x4e>
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	d006      	beq.n	8008866 <__lo0bits+0x5a>
 8008858:	3001      	adds	r0, #1
 800885a:	600b      	str	r3, [r1, #0]
 800885c:	4770      	bx	lr
 800885e:	4610      	mov	r0, r2
 8008860:	e7e9      	b.n	8008836 <__lo0bits+0x2a>
 8008862:	2000      	movs	r0, #0
 8008864:	4770      	bx	lr
 8008866:	2020      	movs	r0, #32
 8008868:	4770      	bx	lr

0800886a <__i2b>:
 800886a:	b510      	push	{r4, lr}
 800886c:	460c      	mov	r4, r1
 800886e:	2101      	movs	r1, #1
 8008870:	f7ff fee9 	bl	8008646 <_Balloc>
 8008874:	2201      	movs	r2, #1
 8008876:	6144      	str	r4, [r0, #20]
 8008878:	6102      	str	r2, [r0, #16]
 800887a:	bd10      	pop	{r4, pc}

0800887c <__multiply>:
 800887c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	4614      	mov	r4, r2
 8008882:	690a      	ldr	r2, [r1, #16]
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	429a      	cmp	r2, r3
 8008888:	bfb8      	it	lt
 800888a:	460b      	movlt	r3, r1
 800888c:	4688      	mov	r8, r1
 800888e:	bfbc      	itt	lt
 8008890:	46a0      	movlt	r8, r4
 8008892:	461c      	movlt	r4, r3
 8008894:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008898:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800889c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088a4:	eb07 0609 	add.w	r6, r7, r9
 80088a8:	42b3      	cmp	r3, r6
 80088aa:	bfb8      	it	lt
 80088ac:	3101      	addlt	r1, #1
 80088ae:	f7ff feca 	bl	8008646 <_Balloc>
 80088b2:	f100 0514 	add.w	r5, r0, #20
 80088b6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80088ba:	462b      	mov	r3, r5
 80088bc:	2200      	movs	r2, #0
 80088be:	4573      	cmp	r3, lr
 80088c0:	d316      	bcc.n	80088f0 <__multiply+0x74>
 80088c2:	f104 0214 	add.w	r2, r4, #20
 80088c6:	f108 0114 	add.w	r1, r8, #20
 80088ca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80088ce:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	9b00      	ldr	r3, [sp, #0]
 80088d6:	9201      	str	r2, [sp, #4]
 80088d8:	4293      	cmp	r3, r2
 80088da:	d80c      	bhi.n	80088f6 <__multiply+0x7a>
 80088dc:	2e00      	cmp	r6, #0
 80088de:	dd03      	ble.n	80088e8 <__multiply+0x6c>
 80088e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d05d      	beq.n	80089a4 <__multiply+0x128>
 80088e8:	6106      	str	r6, [r0, #16]
 80088ea:	b003      	add	sp, #12
 80088ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f0:	f843 2b04 	str.w	r2, [r3], #4
 80088f4:	e7e3      	b.n	80088be <__multiply+0x42>
 80088f6:	f8b2 b000 	ldrh.w	fp, [r2]
 80088fa:	f1bb 0f00 	cmp.w	fp, #0
 80088fe:	d023      	beq.n	8008948 <__multiply+0xcc>
 8008900:	4689      	mov	r9, r1
 8008902:	46ac      	mov	ip, r5
 8008904:	f04f 0800 	mov.w	r8, #0
 8008908:	f859 4b04 	ldr.w	r4, [r9], #4
 800890c:	f8dc a000 	ldr.w	sl, [ip]
 8008910:	b2a3      	uxth	r3, r4
 8008912:	fa1f fa8a 	uxth.w	sl, sl
 8008916:	fb0b a303 	mla	r3, fp, r3, sl
 800891a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800891e:	f8dc 4000 	ldr.w	r4, [ip]
 8008922:	4443      	add	r3, r8
 8008924:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008928:	fb0b 840a 	mla	r4, fp, sl, r8
 800892c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008930:	46e2      	mov	sl, ip
 8008932:	b29b      	uxth	r3, r3
 8008934:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008938:	454f      	cmp	r7, r9
 800893a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800893e:	f84a 3b04 	str.w	r3, [sl], #4
 8008942:	d82b      	bhi.n	800899c <__multiply+0x120>
 8008944:	f8cc 8004 	str.w	r8, [ip, #4]
 8008948:	9b01      	ldr	r3, [sp, #4]
 800894a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800894e:	3204      	adds	r2, #4
 8008950:	f1ba 0f00 	cmp.w	sl, #0
 8008954:	d020      	beq.n	8008998 <__multiply+0x11c>
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	4689      	mov	r9, r1
 800895a:	46a8      	mov	r8, r5
 800895c:	f04f 0b00 	mov.w	fp, #0
 8008960:	f8b9 c000 	ldrh.w	ip, [r9]
 8008964:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008968:	fb0a 440c 	mla	r4, sl, ip, r4
 800896c:	445c      	add	r4, fp
 800896e:	46c4      	mov	ip, r8
 8008970:	b29b      	uxth	r3, r3
 8008972:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008976:	f84c 3b04 	str.w	r3, [ip], #4
 800897a:	f859 3b04 	ldr.w	r3, [r9], #4
 800897e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008982:	0c1b      	lsrs	r3, r3, #16
 8008984:	fb0a b303 	mla	r3, sl, r3, fp
 8008988:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800898c:	454f      	cmp	r7, r9
 800898e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008992:	d805      	bhi.n	80089a0 <__multiply+0x124>
 8008994:	f8c8 3004 	str.w	r3, [r8, #4]
 8008998:	3504      	adds	r5, #4
 800899a:	e79b      	b.n	80088d4 <__multiply+0x58>
 800899c:	46d4      	mov	ip, sl
 800899e:	e7b3      	b.n	8008908 <__multiply+0x8c>
 80089a0:	46e0      	mov	r8, ip
 80089a2:	e7dd      	b.n	8008960 <__multiply+0xe4>
 80089a4:	3e01      	subs	r6, #1
 80089a6:	e799      	b.n	80088dc <__multiply+0x60>

080089a8 <__pow5mult>:
 80089a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089ac:	4615      	mov	r5, r2
 80089ae:	f012 0203 	ands.w	r2, r2, #3
 80089b2:	4606      	mov	r6, r0
 80089b4:	460f      	mov	r7, r1
 80089b6:	d007      	beq.n	80089c8 <__pow5mult+0x20>
 80089b8:	3a01      	subs	r2, #1
 80089ba:	4c21      	ldr	r4, [pc, #132]	; (8008a40 <__pow5mult+0x98>)
 80089bc:	2300      	movs	r3, #0
 80089be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089c2:	f7ff fe8b 	bl	80086dc <__multadd>
 80089c6:	4607      	mov	r7, r0
 80089c8:	10ad      	asrs	r5, r5, #2
 80089ca:	d035      	beq.n	8008a38 <__pow5mult+0x90>
 80089cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089ce:	b93c      	cbnz	r4, 80089e0 <__pow5mult+0x38>
 80089d0:	2010      	movs	r0, #16
 80089d2:	f7ff fe13 	bl	80085fc <malloc>
 80089d6:	6270      	str	r0, [r6, #36]	; 0x24
 80089d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089dc:	6004      	str	r4, [r0, #0]
 80089de:	60c4      	str	r4, [r0, #12]
 80089e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089e8:	b94c      	cbnz	r4, 80089fe <__pow5mult+0x56>
 80089ea:	f240 2171 	movw	r1, #625	; 0x271
 80089ee:	4630      	mov	r0, r6
 80089f0:	f7ff ff3b 	bl	800886a <__i2b>
 80089f4:	2300      	movs	r3, #0
 80089f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80089fa:	4604      	mov	r4, r0
 80089fc:	6003      	str	r3, [r0, #0]
 80089fe:	f04f 0800 	mov.w	r8, #0
 8008a02:	07eb      	lsls	r3, r5, #31
 8008a04:	d50a      	bpl.n	8008a1c <__pow5mult+0x74>
 8008a06:	4639      	mov	r1, r7
 8008a08:	4622      	mov	r2, r4
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f7ff ff36 	bl	800887c <__multiply>
 8008a10:	4639      	mov	r1, r7
 8008a12:	4681      	mov	r9, r0
 8008a14:	4630      	mov	r0, r6
 8008a16:	f7ff fe4a 	bl	80086ae <_Bfree>
 8008a1a:	464f      	mov	r7, r9
 8008a1c:	106d      	asrs	r5, r5, #1
 8008a1e:	d00b      	beq.n	8008a38 <__pow5mult+0x90>
 8008a20:	6820      	ldr	r0, [r4, #0]
 8008a22:	b938      	cbnz	r0, 8008a34 <__pow5mult+0x8c>
 8008a24:	4622      	mov	r2, r4
 8008a26:	4621      	mov	r1, r4
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f7ff ff27 	bl	800887c <__multiply>
 8008a2e:	6020      	str	r0, [r4, #0]
 8008a30:	f8c0 8000 	str.w	r8, [r0]
 8008a34:	4604      	mov	r4, r0
 8008a36:	e7e4      	b.n	8008a02 <__pow5mult+0x5a>
 8008a38:	4638      	mov	r0, r7
 8008a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a3e:	bf00      	nop
 8008a40:	0800b378 	.word	0x0800b378

08008a44 <__lshift>:
 8008a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	460c      	mov	r4, r1
 8008a4a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	6849      	ldr	r1, [r1, #4]
 8008a52:	eb0a 0903 	add.w	r9, sl, r3
 8008a56:	68a3      	ldr	r3, [r4, #8]
 8008a58:	4607      	mov	r7, r0
 8008a5a:	4616      	mov	r6, r2
 8008a5c:	f109 0501 	add.w	r5, r9, #1
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	db32      	blt.n	8008aca <__lshift+0x86>
 8008a64:	4638      	mov	r0, r7
 8008a66:	f7ff fdee 	bl	8008646 <_Balloc>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	f100 0114 	add.w	r1, r0, #20
 8008a72:	461a      	mov	r2, r3
 8008a74:	4553      	cmp	r3, sl
 8008a76:	db2b      	blt.n	8008ad0 <__lshift+0x8c>
 8008a78:	6920      	ldr	r0, [r4, #16]
 8008a7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a7e:	f104 0314 	add.w	r3, r4, #20
 8008a82:	f016 021f 	ands.w	r2, r6, #31
 8008a86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a8e:	d025      	beq.n	8008adc <__lshift+0x98>
 8008a90:	f1c2 0e20 	rsb	lr, r2, #32
 8008a94:	2000      	movs	r0, #0
 8008a96:	681e      	ldr	r6, [r3, #0]
 8008a98:	468a      	mov	sl, r1
 8008a9a:	4096      	lsls	r6, r2
 8008a9c:	4330      	orrs	r0, r6
 8008a9e:	f84a 0b04 	str.w	r0, [sl], #4
 8008aa2:	f853 0b04 	ldr.w	r0, [r3], #4
 8008aa6:	459c      	cmp	ip, r3
 8008aa8:	fa20 f00e 	lsr.w	r0, r0, lr
 8008aac:	d814      	bhi.n	8008ad8 <__lshift+0x94>
 8008aae:	6048      	str	r0, [r1, #4]
 8008ab0:	b108      	cbz	r0, 8008ab6 <__lshift+0x72>
 8008ab2:	f109 0502 	add.w	r5, r9, #2
 8008ab6:	3d01      	subs	r5, #1
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f8c8 5010 	str.w	r5, [r8, #16]
 8008abe:	4621      	mov	r1, r4
 8008ac0:	f7ff fdf5 	bl	80086ae <_Bfree>
 8008ac4:	4640      	mov	r0, r8
 8008ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aca:	3101      	adds	r1, #1
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	e7c7      	b.n	8008a60 <__lshift+0x1c>
 8008ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	e7cd      	b.n	8008a74 <__lshift+0x30>
 8008ad8:	4651      	mov	r1, sl
 8008ada:	e7dc      	b.n	8008a96 <__lshift+0x52>
 8008adc:	3904      	subs	r1, #4
 8008ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ae6:	459c      	cmp	ip, r3
 8008ae8:	d8f9      	bhi.n	8008ade <__lshift+0x9a>
 8008aea:	e7e4      	b.n	8008ab6 <__lshift+0x72>

08008aec <__mcmp>:
 8008aec:	6903      	ldr	r3, [r0, #16]
 8008aee:	690a      	ldr	r2, [r1, #16]
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	b530      	push	{r4, r5, lr}
 8008af4:	d10c      	bne.n	8008b10 <__mcmp+0x24>
 8008af6:	0092      	lsls	r2, r2, #2
 8008af8:	3014      	adds	r0, #20
 8008afa:	3114      	adds	r1, #20
 8008afc:	1884      	adds	r4, r0, r2
 8008afe:	4411      	add	r1, r2
 8008b00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b08:	4295      	cmp	r5, r2
 8008b0a:	d003      	beq.n	8008b14 <__mcmp+0x28>
 8008b0c:	d305      	bcc.n	8008b1a <__mcmp+0x2e>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4618      	mov	r0, r3
 8008b12:	bd30      	pop	{r4, r5, pc}
 8008b14:	42a0      	cmp	r0, r4
 8008b16:	d3f3      	bcc.n	8008b00 <__mcmp+0x14>
 8008b18:	e7fa      	b.n	8008b10 <__mcmp+0x24>
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1e:	e7f7      	b.n	8008b10 <__mcmp+0x24>

08008b20 <__mdiff>:
 8008b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b24:	460d      	mov	r5, r1
 8008b26:	4607      	mov	r7, r0
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	f7ff ffdd 	bl	8008aec <__mcmp>
 8008b32:	1e06      	subs	r6, r0, #0
 8008b34:	d108      	bne.n	8008b48 <__mdiff+0x28>
 8008b36:	4631      	mov	r1, r6
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff fd84 	bl	8008646 <_Balloc>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b48:	bfa4      	itt	ge
 8008b4a:	4623      	movge	r3, r4
 8008b4c:	462c      	movge	r4, r5
 8008b4e:	4638      	mov	r0, r7
 8008b50:	6861      	ldr	r1, [r4, #4]
 8008b52:	bfa6      	itte	ge
 8008b54:	461d      	movge	r5, r3
 8008b56:	2600      	movge	r6, #0
 8008b58:	2601      	movlt	r6, #1
 8008b5a:	f7ff fd74 	bl	8008646 <_Balloc>
 8008b5e:	692b      	ldr	r3, [r5, #16]
 8008b60:	60c6      	str	r6, [r0, #12]
 8008b62:	6926      	ldr	r6, [r4, #16]
 8008b64:	f105 0914 	add.w	r9, r5, #20
 8008b68:	f104 0214 	add.w	r2, r4, #20
 8008b6c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008b70:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008b74:	f100 0514 	add.w	r5, r0, #20
 8008b78:	f04f 0e00 	mov.w	lr, #0
 8008b7c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008b80:	f859 4b04 	ldr.w	r4, [r9], #4
 8008b84:	fa1e f18a 	uxtah	r1, lr, sl
 8008b88:	b2a3      	uxth	r3, r4
 8008b8a:	1ac9      	subs	r1, r1, r3
 8008b8c:	0c23      	lsrs	r3, r4, #16
 8008b8e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008b92:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008b96:	b289      	uxth	r1, r1
 8008b98:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008b9c:	45c8      	cmp	r8, r9
 8008b9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008ba2:	4694      	mov	ip, r2
 8008ba4:	f845 3b04 	str.w	r3, [r5], #4
 8008ba8:	d8e8      	bhi.n	8008b7c <__mdiff+0x5c>
 8008baa:	45bc      	cmp	ip, r7
 8008bac:	d304      	bcc.n	8008bb8 <__mdiff+0x98>
 8008bae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008bb2:	b183      	cbz	r3, 8008bd6 <__mdiff+0xb6>
 8008bb4:	6106      	str	r6, [r0, #16]
 8008bb6:	e7c5      	b.n	8008b44 <__mdiff+0x24>
 8008bb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008bbc:	fa1e f381 	uxtah	r3, lr, r1
 8008bc0:	141a      	asrs	r2, r3, #16
 8008bc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bcc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008bd0:	f845 3b04 	str.w	r3, [r5], #4
 8008bd4:	e7e9      	b.n	8008baa <__mdiff+0x8a>
 8008bd6:	3e01      	subs	r6, #1
 8008bd8:	e7e9      	b.n	8008bae <__mdiff+0x8e>
	...

08008bdc <__ulp>:
 8008bdc:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <__ulp+0x4c>)
 8008bde:	ee10 2a90 	vmov	r2, s1
 8008be2:	401a      	ands	r2, r3
 8008be4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dd04      	ble.n	8008bf6 <__ulp+0x1a>
 8008bec:	2000      	movs	r0, #0
 8008bee:	4619      	mov	r1, r3
 8008bf0:	ec41 0b10 	vmov	d0, r0, r1
 8008bf4:	4770      	bx	lr
 8008bf6:	425b      	negs	r3, r3
 8008bf8:	151b      	asrs	r3, r3, #20
 8008bfa:	2b13      	cmp	r3, #19
 8008bfc:	f04f 0000 	mov.w	r0, #0
 8008c00:	f04f 0100 	mov.w	r1, #0
 8008c04:	dc04      	bgt.n	8008c10 <__ulp+0x34>
 8008c06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008c0a:	fa42 f103 	asr.w	r1, r2, r3
 8008c0e:	e7ef      	b.n	8008bf0 <__ulp+0x14>
 8008c10:	3b14      	subs	r3, #20
 8008c12:	2b1e      	cmp	r3, #30
 8008c14:	f04f 0201 	mov.w	r2, #1
 8008c18:	bfda      	itte	le
 8008c1a:	f1c3 031f 	rsble	r3, r3, #31
 8008c1e:	fa02 f303 	lslle.w	r3, r2, r3
 8008c22:	4613      	movgt	r3, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	e7e3      	b.n	8008bf0 <__ulp+0x14>
 8008c28:	7ff00000 	.word	0x7ff00000

08008c2c <__b2d>:
 8008c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2e:	6905      	ldr	r5, [r0, #16]
 8008c30:	f100 0714 	add.w	r7, r0, #20
 8008c34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008c38:	1f2e      	subs	r6, r5, #4
 8008c3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7ff fdc5 	bl	80087ce <__hi0bits>
 8008c44:	f1c0 0320 	rsb	r3, r0, #32
 8008c48:	280a      	cmp	r0, #10
 8008c4a:	600b      	str	r3, [r1, #0]
 8008c4c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008cc4 <__b2d+0x98>
 8008c50:	dc14      	bgt.n	8008c7c <__b2d+0x50>
 8008c52:	f1c0 0e0b 	rsb	lr, r0, #11
 8008c56:	fa24 f10e 	lsr.w	r1, r4, lr
 8008c5a:	42b7      	cmp	r7, r6
 8008c5c:	ea41 030c 	orr.w	r3, r1, ip
 8008c60:	bf34      	ite	cc
 8008c62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c66:	2100      	movcs	r1, #0
 8008c68:	3015      	adds	r0, #21
 8008c6a:	fa04 f000 	lsl.w	r0, r4, r0
 8008c6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008c72:	ea40 0201 	orr.w	r2, r0, r1
 8008c76:	ec43 2b10 	vmov	d0, r2, r3
 8008c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c7c:	42b7      	cmp	r7, r6
 8008c7e:	bf3a      	itte	cc
 8008c80:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c88:	2100      	movcs	r1, #0
 8008c8a:	380b      	subs	r0, #11
 8008c8c:	d015      	beq.n	8008cba <__b2d+0x8e>
 8008c8e:	4084      	lsls	r4, r0
 8008c90:	f1c0 0520 	rsb	r5, r0, #32
 8008c94:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008c98:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008c9c:	42be      	cmp	r6, r7
 8008c9e:	fa21 fc05 	lsr.w	ip, r1, r5
 8008ca2:	ea44 030c 	orr.w	r3, r4, ip
 8008ca6:	bf8c      	ite	hi
 8008ca8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008cac:	2400      	movls	r4, #0
 8008cae:	fa01 f000 	lsl.w	r0, r1, r0
 8008cb2:	40ec      	lsrs	r4, r5
 8008cb4:	ea40 0204 	orr.w	r2, r0, r4
 8008cb8:	e7dd      	b.n	8008c76 <__b2d+0x4a>
 8008cba:	ea44 030c 	orr.w	r3, r4, ip
 8008cbe:	460a      	mov	r2, r1
 8008cc0:	e7d9      	b.n	8008c76 <__b2d+0x4a>
 8008cc2:	bf00      	nop
 8008cc4:	3ff00000 	.word	0x3ff00000

08008cc8 <__d2b>:
 8008cc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ccc:	460e      	mov	r6, r1
 8008cce:	2101      	movs	r1, #1
 8008cd0:	ec59 8b10 	vmov	r8, r9, d0
 8008cd4:	4615      	mov	r5, r2
 8008cd6:	f7ff fcb6 	bl	8008646 <_Balloc>
 8008cda:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008cde:	4607      	mov	r7, r0
 8008ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ce4:	bb34      	cbnz	r4, 8008d34 <__d2b+0x6c>
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	f1b8 0300 	subs.w	r3, r8, #0
 8008cec:	d027      	beq.n	8008d3e <__d2b+0x76>
 8008cee:	a802      	add	r0, sp, #8
 8008cf0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008cf4:	f7ff fd8a 	bl	800880c <__lo0bits>
 8008cf8:	9900      	ldr	r1, [sp, #0]
 8008cfa:	b1f0      	cbz	r0, 8008d3a <__d2b+0x72>
 8008cfc:	9a01      	ldr	r2, [sp, #4]
 8008cfe:	f1c0 0320 	rsb	r3, r0, #32
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	430b      	orrs	r3, r1
 8008d08:	40c2      	lsrs	r2, r0
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	9201      	str	r2, [sp, #4]
 8008d0e:	9b01      	ldr	r3, [sp, #4]
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bf14      	ite	ne
 8008d16:	2102      	movne	r1, #2
 8008d18:	2101      	moveq	r1, #1
 8008d1a:	6139      	str	r1, [r7, #16]
 8008d1c:	b1c4      	cbz	r4, 8008d50 <__d2b+0x88>
 8008d1e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008d22:	4404      	add	r4, r0
 8008d24:	6034      	str	r4, [r6, #0]
 8008d26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d2a:	6028      	str	r0, [r5, #0]
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	b003      	add	sp, #12
 8008d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d38:	e7d5      	b.n	8008ce6 <__d2b+0x1e>
 8008d3a:	6179      	str	r1, [r7, #20]
 8008d3c:	e7e7      	b.n	8008d0e <__d2b+0x46>
 8008d3e:	a801      	add	r0, sp, #4
 8008d40:	f7ff fd64 	bl	800880c <__lo0bits>
 8008d44:	9b01      	ldr	r3, [sp, #4]
 8008d46:	617b      	str	r3, [r7, #20]
 8008d48:	2101      	movs	r1, #1
 8008d4a:	6139      	str	r1, [r7, #16]
 8008d4c:	3020      	adds	r0, #32
 8008d4e:	e7e5      	b.n	8008d1c <__d2b+0x54>
 8008d50:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008d54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d58:	6030      	str	r0, [r6, #0]
 8008d5a:	6918      	ldr	r0, [r3, #16]
 8008d5c:	f7ff fd37 	bl	80087ce <__hi0bits>
 8008d60:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008d64:	e7e1      	b.n	8008d2a <__d2b+0x62>

08008d66 <__ratio>:
 8008d66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6a:	4688      	mov	r8, r1
 8008d6c:	4669      	mov	r1, sp
 8008d6e:	4681      	mov	r9, r0
 8008d70:	f7ff ff5c 	bl	8008c2c <__b2d>
 8008d74:	a901      	add	r1, sp, #4
 8008d76:	4640      	mov	r0, r8
 8008d78:	ec57 6b10 	vmov	r6, r7, d0
 8008d7c:	f7ff ff56 	bl	8008c2c <__b2d>
 8008d80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d84:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d88:	eba3 0c02 	sub.w	ip, r3, r2
 8008d8c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d96:	ec5b ab10 	vmov	sl, fp, d0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	bfce      	itee	gt
 8008d9e:	463a      	movgt	r2, r7
 8008da0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008da4:	465a      	movle	r2, fp
 8008da6:	4659      	mov	r1, fp
 8008da8:	463d      	mov	r5, r7
 8008daa:	bfd4      	ite	le
 8008dac:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008db0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008db4:	4630      	mov	r0, r6
 8008db6:	ee10 2a10 	vmov	r2, s0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 fd45 	bl	800084c <__aeabi_ddiv>
 8008dc2:	ec41 0b10 	vmov	d0, r0, r1
 8008dc6:	b003      	add	sp, #12
 8008dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dcc <__copybits>:
 8008dcc:	3901      	subs	r1, #1
 8008dce:	b510      	push	{r4, lr}
 8008dd0:	1149      	asrs	r1, r1, #5
 8008dd2:	6914      	ldr	r4, [r2, #16]
 8008dd4:	3101      	adds	r1, #1
 8008dd6:	f102 0314 	add.w	r3, r2, #20
 8008dda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008dde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008de2:	42a3      	cmp	r3, r4
 8008de4:	4602      	mov	r2, r0
 8008de6:	d303      	bcc.n	8008df0 <__copybits+0x24>
 8008de8:	2300      	movs	r3, #0
 8008dea:	428a      	cmp	r2, r1
 8008dec:	d305      	bcc.n	8008dfa <__copybits+0x2e>
 8008dee:	bd10      	pop	{r4, pc}
 8008df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df4:	f840 2b04 	str.w	r2, [r0], #4
 8008df8:	e7f3      	b.n	8008de2 <__copybits+0x16>
 8008dfa:	f842 3b04 	str.w	r3, [r2], #4
 8008dfe:	e7f4      	b.n	8008dea <__copybits+0x1e>

08008e00 <__any_on>:
 8008e00:	f100 0214 	add.w	r2, r0, #20
 8008e04:	6900      	ldr	r0, [r0, #16]
 8008e06:	114b      	asrs	r3, r1, #5
 8008e08:	4298      	cmp	r0, r3
 8008e0a:	b510      	push	{r4, lr}
 8008e0c:	db11      	blt.n	8008e32 <__any_on+0x32>
 8008e0e:	dd0a      	ble.n	8008e26 <__any_on+0x26>
 8008e10:	f011 011f 	ands.w	r1, r1, #31
 8008e14:	d007      	beq.n	8008e26 <__any_on+0x26>
 8008e16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e1a:	fa24 f001 	lsr.w	r0, r4, r1
 8008e1e:	fa00 f101 	lsl.w	r1, r0, r1
 8008e22:	428c      	cmp	r4, r1
 8008e24:	d10b      	bne.n	8008e3e <__any_on+0x3e>
 8008e26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d803      	bhi.n	8008e36 <__any_on+0x36>
 8008e2e:	2000      	movs	r0, #0
 8008e30:	bd10      	pop	{r4, pc}
 8008e32:	4603      	mov	r3, r0
 8008e34:	e7f7      	b.n	8008e26 <__any_on+0x26>
 8008e36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e3a:	2900      	cmp	r1, #0
 8008e3c:	d0f5      	beq.n	8008e2a <__any_on+0x2a>
 8008e3e:	2001      	movs	r0, #1
 8008e40:	e7f6      	b.n	8008e30 <__any_on+0x30>

08008e42 <_calloc_r>:
 8008e42:	b538      	push	{r3, r4, r5, lr}
 8008e44:	fb02 f401 	mul.w	r4, r2, r1
 8008e48:	4621      	mov	r1, r4
 8008e4a:	f000 f857 	bl	8008efc <_malloc_r>
 8008e4e:	4605      	mov	r5, r0
 8008e50:	b118      	cbz	r0, 8008e5a <_calloc_r+0x18>
 8008e52:	4622      	mov	r2, r4
 8008e54:	2100      	movs	r1, #0
 8008e56:	f7fc fd37 	bl	80058c8 <memset>
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008e60 <_free_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4605      	mov	r5, r0
 8008e64:	2900      	cmp	r1, #0
 8008e66:	d045      	beq.n	8008ef4 <_free_r+0x94>
 8008e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e6c:	1f0c      	subs	r4, r1, #4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bfb8      	it	lt
 8008e72:	18e4      	addlt	r4, r4, r3
 8008e74:	f000 fa36 	bl	80092e4 <__malloc_lock>
 8008e78:	4a1f      	ldr	r2, [pc, #124]	; (8008ef8 <_free_r+0x98>)
 8008e7a:	6813      	ldr	r3, [r2, #0]
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	b933      	cbnz	r3, 8008e8e <_free_r+0x2e>
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	6014      	str	r4, [r2, #0]
 8008e84:	4628      	mov	r0, r5
 8008e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e8a:	f000 ba2c 	b.w	80092e6 <__malloc_unlock>
 8008e8e:	42a3      	cmp	r3, r4
 8008e90:	d90c      	bls.n	8008eac <_free_r+0x4c>
 8008e92:	6821      	ldr	r1, [r4, #0]
 8008e94:	1862      	adds	r2, r4, r1
 8008e96:	4293      	cmp	r3, r2
 8008e98:	bf04      	itt	eq
 8008e9a:	681a      	ldreq	r2, [r3, #0]
 8008e9c:	685b      	ldreq	r3, [r3, #4]
 8008e9e:	6063      	str	r3, [r4, #4]
 8008ea0:	bf04      	itt	eq
 8008ea2:	1852      	addeq	r2, r2, r1
 8008ea4:	6022      	streq	r2, [r4, #0]
 8008ea6:	6004      	str	r4, [r0, #0]
 8008ea8:	e7ec      	b.n	8008e84 <_free_r+0x24>
 8008eaa:	4613      	mov	r3, r2
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	b10a      	cbz	r2, 8008eb4 <_free_r+0x54>
 8008eb0:	42a2      	cmp	r2, r4
 8008eb2:	d9fa      	bls.n	8008eaa <_free_r+0x4a>
 8008eb4:	6819      	ldr	r1, [r3, #0]
 8008eb6:	1858      	adds	r0, r3, r1
 8008eb8:	42a0      	cmp	r0, r4
 8008eba:	d10b      	bne.n	8008ed4 <_free_r+0x74>
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	4401      	add	r1, r0
 8008ec0:	1858      	adds	r0, r3, r1
 8008ec2:	4282      	cmp	r2, r0
 8008ec4:	6019      	str	r1, [r3, #0]
 8008ec6:	d1dd      	bne.n	8008e84 <_free_r+0x24>
 8008ec8:	6810      	ldr	r0, [r2, #0]
 8008eca:	6852      	ldr	r2, [r2, #4]
 8008ecc:	605a      	str	r2, [r3, #4]
 8008ece:	4401      	add	r1, r0
 8008ed0:	6019      	str	r1, [r3, #0]
 8008ed2:	e7d7      	b.n	8008e84 <_free_r+0x24>
 8008ed4:	d902      	bls.n	8008edc <_free_r+0x7c>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	602b      	str	r3, [r5, #0]
 8008eda:	e7d3      	b.n	8008e84 <_free_r+0x24>
 8008edc:	6820      	ldr	r0, [r4, #0]
 8008ede:	1821      	adds	r1, r4, r0
 8008ee0:	428a      	cmp	r2, r1
 8008ee2:	bf04      	itt	eq
 8008ee4:	6811      	ldreq	r1, [r2, #0]
 8008ee6:	6852      	ldreq	r2, [r2, #4]
 8008ee8:	6062      	str	r2, [r4, #4]
 8008eea:	bf04      	itt	eq
 8008eec:	1809      	addeq	r1, r1, r0
 8008eee:	6021      	streq	r1, [r4, #0]
 8008ef0:	605c      	str	r4, [r3, #4]
 8008ef2:	e7c7      	b.n	8008e84 <_free_r+0x24>
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000678 	.word	0x20000678

08008efc <_malloc_r>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	1ccd      	adds	r5, r1, #3
 8008f00:	f025 0503 	bic.w	r5, r5, #3
 8008f04:	3508      	adds	r5, #8
 8008f06:	2d0c      	cmp	r5, #12
 8008f08:	bf38      	it	cc
 8008f0a:	250c      	movcc	r5, #12
 8008f0c:	2d00      	cmp	r5, #0
 8008f0e:	4606      	mov	r6, r0
 8008f10:	db01      	blt.n	8008f16 <_malloc_r+0x1a>
 8008f12:	42a9      	cmp	r1, r5
 8008f14:	d903      	bls.n	8008f1e <_malloc_r+0x22>
 8008f16:	230c      	movs	r3, #12
 8008f18:	6033      	str	r3, [r6, #0]
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	bd70      	pop	{r4, r5, r6, pc}
 8008f1e:	f000 f9e1 	bl	80092e4 <__malloc_lock>
 8008f22:	4a21      	ldr	r2, [pc, #132]	; (8008fa8 <_malloc_r+0xac>)
 8008f24:	6814      	ldr	r4, [r2, #0]
 8008f26:	4621      	mov	r1, r4
 8008f28:	b991      	cbnz	r1, 8008f50 <_malloc_r+0x54>
 8008f2a:	4c20      	ldr	r4, [pc, #128]	; (8008fac <_malloc_r+0xb0>)
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	b91b      	cbnz	r3, 8008f38 <_malloc_r+0x3c>
 8008f30:	4630      	mov	r0, r6
 8008f32:	f000 f98f 	bl	8009254 <_sbrk_r>
 8008f36:	6020      	str	r0, [r4, #0]
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f000 f98a 	bl	8009254 <_sbrk_r>
 8008f40:	1c43      	adds	r3, r0, #1
 8008f42:	d124      	bne.n	8008f8e <_malloc_r+0x92>
 8008f44:	230c      	movs	r3, #12
 8008f46:	6033      	str	r3, [r6, #0]
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f000 f9cc 	bl	80092e6 <__malloc_unlock>
 8008f4e:	e7e4      	b.n	8008f1a <_malloc_r+0x1e>
 8008f50:	680b      	ldr	r3, [r1, #0]
 8008f52:	1b5b      	subs	r3, r3, r5
 8008f54:	d418      	bmi.n	8008f88 <_malloc_r+0x8c>
 8008f56:	2b0b      	cmp	r3, #11
 8008f58:	d90f      	bls.n	8008f7a <_malloc_r+0x7e>
 8008f5a:	600b      	str	r3, [r1, #0]
 8008f5c:	50cd      	str	r5, [r1, r3]
 8008f5e:	18cc      	adds	r4, r1, r3
 8008f60:	4630      	mov	r0, r6
 8008f62:	f000 f9c0 	bl	80092e6 <__malloc_unlock>
 8008f66:	f104 000b 	add.w	r0, r4, #11
 8008f6a:	1d23      	adds	r3, r4, #4
 8008f6c:	f020 0007 	bic.w	r0, r0, #7
 8008f70:	1ac3      	subs	r3, r0, r3
 8008f72:	d0d3      	beq.n	8008f1c <_malloc_r+0x20>
 8008f74:	425a      	negs	r2, r3
 8008f76:	50e2      	str	r2, [r4, r3]
 8008f78:	e7d0      	b.n	8008f1c <_malloc_r+0x20>
 8008f7a:	428c      	cmp	r4, r1
 8008f7c:	684b      	ldr	r3, [r1, #4]
 8008f7e:	bf16      	itet	ne
 8008f80:	6063      	strne	r3, [r4, #4]
 8008f82:	6013      	streq	r3, [r2, #0]
 8008f84:	460c      	movne	r4, r1
 8008f86:	e7eb      	b.n	8008f60 <_malloc_r+0x64>
 8008f88:	460c      	mov	r4, r1
 8008f8a:	6849      	ldr	r1, [r1, #4]
 8008f8c:	e7cc      	b.n	8008f28 <_malloc_r+0x2c>
 8008f8e:	1cc4      	adds	r4, r0, #3
 8008f90:	f024 0403 	bic.w	r4, r4, #3
 8008f94:	42a0      	cmp	r0, r4
 8008f96:	d005      	beq.n	8008fa4 <_malloc_r+0xa8>
 8008f98:	1a21      	subs	r1, r4, r0
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 f95a 	bl	8009254 <_sbrk_r>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d0cf      	beq.n	8008f44 <_malloc_r+0x48>
 8008fa4:	6025      	str	r5, [r4, #0]
 8008fa6:	e7db      	b.n	8008f60 <_malloc_r+0x64>
 8008fa8:	20000678 	.word	0x20000678
 8008fac:	2000067c 	.word	0x2000067c

08008fb0 <__ssputs_r>:
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	688e      	ldr	r6, [r1, #8]
 8008fb6:	429e      	cmp	r6, r3
 8008fb8:	4682      	mov	sl, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	4690      	mov	r8, r2
 8008fbe:	4699      	mov	r9, r3
 8008fc0:	d837      	bhi.n	8009032 <__ssputs_r+0x82>
 8008fc2:	898a      	ldrh	r2, [r1, #12]
 8008fc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fc8:	d031      	beq.n	800902e <__ssputs_r+0x7e>
 8008fca:	6825      	ldr	r5, [r4, #0]
 8008fcc:	6909      	ldr	r1, [r1, #16]
 8008fce:	1a6f      	subs	r7, r5, r1
 8008fd0:	6965      	ldr	r5, [r4, #20]
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008fdc:	f109 0301 	add.w	r3, r9, #1
 8008fe0:	443b      	add	r3, r7
 8008fe2:	429d      	cmp	r5, r3
 8008fe4:	bf38      	it	cc
 8008fe6:	461d      	movcc	r5, r3
 8008fe8:	0553      	lsls	r3, r2, #21
 8008fea:	d530      	bpl.n	800904e <__ssputs_r+0x9e>
 8008fec:	4629      	mov	r1, r5
 8008fee:	f7ff ff85 	bl	8008efc <_malloc_r>
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	b950      	cbnz	r0, 800900c <__ssputs_r+0x5c>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	f8ca 3000 	str.w	r3, [sl]
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	f04f 30ff 	mov.w	r0, #4294967295
 8009008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900c:	463a      	mov	r2, r7
 800900e:	6921      	ldr	r1, [r4, #16]
 8009010:	f7ff fb0e 	bl	8008630 <memcpy>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800901a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901e:	81a3      	strh	r3, [r4, #12]
 8009020:	6126      	str	r6, [r4, #16]
 8009022:	6165      	str	r5, [r4, #20]
 8009024:	443e      	add	r6, r7
 8009026:	1bed      	subs	r5, r5, r7
 8009028:	6026      	str	r6, [r4, #0]
 800902a:	60a5      	str	r5, [r4, #8]
 800902c:	464e      	mov	r6, r9
 800902e:	454e      	cmp	r6, r9
 8009030:	d900      	bls.n	8009034 <__ssputs_r+0x84>
 8009032:	464e      	mov	r6, r9
 8009034:	4632      	mov	r2, r6
 8009036:	4641      	mov	r1, r8
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	f000 f93a 	bl	80092b2 <memmove>
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	1b9b      	subs	r3, r3, r6
 8009042:	60a3      	str	r3, [r4, #8]
 8009044:	6823      	ldr	r3, [r4, #0]
 8009046:	441e      	add	r6, r3
 8009048:	6026      	str	r6, [r4, #0]
 800904a:	2000      	movs	r0, #0
 800904c:	e7dc      	b.n	8009008 <__ssputs_r+0x58>
 800904e:	462a      	mov	r2, r5
 8009050:	f000 f94a 	bl	80092e8 <_realloc_r>
 8009054:	4606      	mov	r6, r0
 8009056:	2800      	cmp	r0, #0
 8009058:	d1e2      	bne.n	8009020 <__ssputs_r+0x70>
 800905a:	6921      	ldr	r1, [r4, #16]
 800905c:	4650      	mov	r0, sl
 800905e:	f7ff feff 	bl	8008e60 <_free_r>
 8009062:	e7c8      	b.n	8008ff6 <__ssputs_r+0x46>

08009064 <_svfiprintf_r>:
 8009064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	461d      	mov	r5, r3
 800906a:	898b      	ldrh	r3, [r1, #12]
 800906c:	061f      	lsls	r7, r3, #24
 800906e:	b09d      	sub	sp, #116	; 0x74
 8009070:	4680      	mov	r8, r0
 8009072:	460c      	mov	r4, r1
 8009074:	4616      	mov	r6, r2
 8009076:	d50f      	bpl.n	8009098 <_svfiprintf_r+0x34>
 8009078:	690b      	ldr	r3, [r1, #16]
 800907a:	b96b      	cbnz	r3, 8009098 <_svfiprintf_r+0x34>
 800907c:	2140      	movs	r1, #64	; 0x40
 800907e:	f7ff ff3d 	bl	8008efc <_malloc_r>
 8009082:	6020      	str	r0, [r4, #0]
 8009084:	6120      	str	r0, [r4, #16]
 8009086:	b928      	cbnz	r0, 8009094 <_svfiprintf_r+0x30>
 8009088:	230c      	movs	r3, #12
 800908a:	f8c8 3000 	str.w	r3, [r8]
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	e0c8      	b.n	8009226 <_svfiprintf_r+0x1c2>
 8009094:	2340      	movs	r3, #64	; 0x40
 8009096:	6163      	str	r3, [r4, #20]
 8009098:	2300      	movs	r3, #0
 800909a:	9309      	str	r3, [sp, #36]	; 0x24
 800909c:	2320      	movs	r3, #32
 800909e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090a2:	2330      	movs	r3, #48	; 0x30
 80090a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090a8:	9503      	str	r5, [sp, #12]
 80090aa:	f04f 0b01 	mov.w	fp, #1
 80090ae:	4637      	mov	r7, r6
 80090b0:	463d      	mov	r5, r7
 80090b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090b6:	b10b      	cbz	r3, 80090bc <_svfiprintf_r+0x58>
 80090b8:	2b25      	cmp	r3, #37	; 0x25
 80090ba:	d13e      	bne.n	800913a <_svfiprintf_r+0xd6>
 80090bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80090c0:	d00b      	beq.n	80090da <_svfiprintf_r+0x76>
 80090c2:	4653      	mov	r3, sl
 80090c4:	4632      	mov	r2, r6
 80090c6:	4621      	mov	r1, r4
 80090c8:	4640      	mov	r0, r8
 80090ca:	f7ff ff71 	bl	8008fb0 <__ssputs_r>
 80090ce:	3001      	adds	r0, #1
 80090d0:	f000 80a4 	beq.w	800921c <_svfiprintf_r+0x1b8>
 80090d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090d6:	4453      	add	r3, sl
 80090d8:	9309      	str	r3, [sp, #36]	; 0x24
 80090da:	783b      	ldrb	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 809d 	beq.w	800921c <_svfiprintf_r+0x1b8>
 80090e2:	2300      	movs	r3, #0
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295
 80090e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	9307      	str	r3, [sp, #28]
 80090f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090f4:	931a      	str	r3, [sp, #104]	; 0x68
 80090f6:	462f      	mov	r7, r5
 80090f8:	2205      	movs	r2, #5
 80090fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80090fe:	4850      	ldr	r0, [pc, #320]	; (8009240 <_svfiprintf_r+0x1dc>)
 8009100:	f7f7 f86e 	bl	80001e0 <memchr>
 8009104:	9b04      	ldr	r3, [sp, #16]
 8009106:	b9d0      	cbnz	r0, 800913e <_svfiprintf_r+0xda>
 8009108:	06d9      	lsls	r1, r3, #27
 800910a:	bf44      	itt	mi
 800910c:	2220      	movmi	r2, #32
 800910e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009112:	071a      	lsls	r2, r3, #28
 8009114:	bf44      	itt	mi
 8009116:	222b      	movmi	r2, #43	; 0x2b
 8009118:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800911c:	782a      	ldrb	r2, [r5, #0]
 800911e:	2a2a      	cmp	r2, #42	; 0x2a
 8009120:	d015      	beq.n	800914e <_svfiprintf_r+0xea>
 8009122:	9a07      	ldr	r2, [sp, #28]
 8009124:	462f      	mov	r7, r5
 8009126:	2000      	movs	r0, #0
 8009128:	250a      	movs	r5, #10
 800912a:	4639      	mov	r1, r7
 800912c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009130:	3b30      	subs	r3, #48	; 0x30
 8009132:	2b09      	cmp	r3, #9
 8009134:	d94d      	bls.n	80091d2 <_svfiprintf_r+0x16e>
 8009136:	b1b8      	cbz	r0, 8009168 <_svfiprintf_r+0x104>
 8009138:	e00f      	b.n	800915a <_svfiprintf_r+0xf6>
 800913a:	462f      	mov	r7, r5
 800913c:	e7b8      	b.n	80090b0 <_svfiprintf_r+0x4c>
 800913e:	4a40      	ldr	r2, [pc, #256]	; (8009240 <_svfiprintf_r+0x1dc>)
 8009140:	1a80      	subs	r0, r0, r2
 8009142:	fa0b f000 	lsl.w	r0, fp, r0
 8009146:	4318      	orrs	r0, r3
 8009148:	9004      	str	r0, [sp, #16]
 800914a:	463d      	mov	r5, r7
 800914c:	e7d3      	b.n	80090f6 <_svfiprintf_r+0x92>
 800914e:	9a03      	ldr	r2, [sp, #12]
 8009150:	1d11      	adds	r1, r2, #4
 8009152:	6812      	ldr	r2, [r2, #0]
 8009154:	9103      	str	r1, [sp, #12]
 8009156:	2a00      	cmp	r2, #0
 8009158:	db01      	blt.n	800915e <_svfiprintf_r+0xfa>
 800915a:	9207      	str	r2, [sp, #28]
 800915c:	e004      	b.n	8009168 <_svfiprintf_r+0x104>
 800915e:	4252      	negs	r2, r2
 8009160:	f043 0302 	orr.w	r3, r3, #2
 8009164:	9207      	str	r2, [sp, #28]
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	783b      	ldrb	r3, [r7, #0]
 800916a:	2b2e      	cmp	r3, #46	; 0x2e
 800916c:	d10c      	bne.n	8009188 <_svfiprintf_r+0x124>
 800916e:	787b      	ldrb	r3, [r7, #1]
 8009170:	2b2a      	cmp	r3, #42	; 0x2a
 8009172:	d133      	bne.n	80091dc <_svfiprintf_r+0x178>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	1d1a      	adds	r2, r3, #4
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	9203      	str	r2, [sp, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfb8      	it	lt
 8009180:	f04f 33ff 	movlt.w	r3, #4294967295
 8009184:	3702      	adds	r7, #2
 8009186:	9305      	str	r3, [sp, #20]
 8009188:	4d2e      	ldr	r5, [pc, #184]	; (8009244 <_svfiprintf_r+0x1e0>)
 800918a:	7839      	ldrb	r1, [r7, #0]
 800918c:	2203      	movs	r2, #3
 800918e:	4628      	mov	r0, r5
 8009190:	f7f7 f826 	bl	80001e0 <memchr>
 8009194:	b138      	cbz	r0, 80091a6 <_svfiprintf_r+0x142>
 8009196:	2340      	movs	r3, #64	; 0x40
 8009198:	1b40      	subs	r0, r0, r5
 800919a:	fa03 f000 	lsl.w	r0, r3, r0
 800919e:	9b04      	ldr	r3, [sp, #16]
 80091a0:	4303      	orrs	r3, r0
 80091a2:	3701      	adds	r7, #1
 80091a4:	9304      	str	r3, [sp, #16]
 80091a6:	7839      	ldrb	r1, [r7, #0]
 80091a8:	4827      	ldr	r0, [pc, #156]	; (8009248 <_svfiprintf_r+0x1e4>)
 80091aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ae:	2206      	movs	r2, #6
 80091b0:	1c7e      	adds	r6, r7, #1
 80091b2:	f7f7 f815 	bl	80001e0 <memchr>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d038      	beq.n	800922c <_svfiprintf_r+0x1c8>
 80091ba:	4b24      	ldr	r3, [pc, #144]	; (800924c <_svfiprintf_r+0x1e8>)
 80091bc:	bb13      	cbnz	r3, 8009204 <_svfiprintf_r+0x1a0>
 80091be:	9b03      	ldr	r3, [sp, #12]
 80091c0:	3307      	adds	r3, #7
 80091c2:	f023 0307 	bic.w	r3, r3, #7
 80091c6:	3308      	adds	r3, #8
 80091c8:	9303      	str	r3, [sp, #12]
 80091ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091cc:	444b      	add	r3, r9
 80091ce:	9309      	str	r3, [sp, #36]	; 0x24
 80091d0:	e76d      	b.n	80090ae <_svfiprintf_r+0x4a>
 80091d2:	fb05 3202 	mla	r2, r5, r2, r3
 80091d6:	2001      	movs	r0, #1
 80091d8:	460f      	mov	r7, r1
 80091da:	e7a6      	b.n	800912a <_svfiprintf_r+0xc6>
 80091dc:	2300      	movs	r3, #0
 80091de:	3701      	adds	r7, #1
 80091e0:	9305      	str	r3, [sp, #20]
 80091e2:	4619      	mov	r1, r3
 80091e4:	250a      	movs	r5, #10
 80091e6:	4638      	mov	r0, r7
 80091e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ec:	3a30      	subs	r2, #48	; 0x30
 80091ee:	2a09      	cmp	r2, #9
 80091f0:	d903      	bls.n	80091fa <_svfiprintf_r+0x196>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0c8      	beq.n	8009188 <_svfiprintf_r+0x124>
 80091f6:	9105      	str	r1, [sp, #20]
 80091f8:	e7c6      	b.n	8009188 <_svfiprintf_r+0x124>
 80091fa:	fb05 2101 	mla	r1, r5, r1, r2
 80091fe:	2301      	movs	r3, #1
 8009200:	4607      	mov	r7, r0
 8009202:	e7f0      	b.n	80091e6 <_svfiprintf_r+0x182>
 8009204:	ab03      	add	r3, sp, #12
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4622      	mov	r2, r4
 800920a:	4b11      	ldr	r3, [pc, #68]	; (8009250 <_svfiprintf_r+0x1ec>)
 800920c:	a904      	add	r1, sp, #16
 800920e:	4640      	mov	r0, r8
 8009210:	f7fc fbf6 	bl	8005a00 <_printf_float>
 8009214:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009218:	4681      	mov	r9, r0
 800921a:	d1d6      	bne.n	80091ca <_svfiprintf_r+0x166>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	065b      	lsls	r3, r3, #25
 8009220:	f53f af35 	bmi.w	800908e <_svfiprintf_r+0x2a>
 8009224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009226:	b01d      	add	sp, #116	; 0x74
 8009228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800922c:	ab03      	add	r3, sp, #12
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	4622      	mov	r2, r4
 8009232:	4b07      	ldr	r3, [pc, #28]	; (8009250 <_svfiprintf_r+0x1ec>)
 8009234:	a904      	add	r1, sp, #16
 8009236:	4640      	mov	r0, r8
 8009238:	f7fc fe98 	bl	8005f6c <_printf_i>
 800923c:	e7ea      	b.n	8009214 <_svfiprintf_r+0x1b0>
 800923e:	bf00      	nop
 8009240:	0800b384 	.word	0x0800b384
 8009244:	0800b38a 	.word	0x0800b38a
 8009248:	0800b38e 	.word	0x0800b38e
 800924c:	08005a01 	.word	0x08005a01
 8009250:	08008fb1 	.word	0x08008fb1

08009254 <_sbrk_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4c06      	ldr	r4, [pc, #24]	; (8009270 <_sbrk_r+0x1c>)
 8009258:	2300      	movs	r3, #0
 800925a:	4605      	mov	r5, r0
 800925c:	4608      	mov	r0, r1
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	f7f9 fc2c 	bl	8002abc <_sbrk>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d102      	bne.n	800926e <_sbrk_r+0x1a>
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	b103      	cbz	r3, 800926e <_sbrk_r+0x1a>
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	bd38      	pop	{r3, r4, r5, pc}
 8009270:	2000073c 	.word	0x2000073c

08009274 <strncmp>:
 8009274:	b510      	push	{r4, lr}
 8009276:	b16a      	cbz	r2, 8009294 <strncmp+0x20>
 8009278:	3901      	subs	r1, #1
 800927a:	1884      	adds	r4, r0, r2
 800927c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009280:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009284:	4293      	cmp	r3, r2
 8009286:	d103      	bne.n	8009290 <strncmp+0x1c>
 8009288:	42a0      	cmp	r0, r4
 800928a:	d001      	beq.n	8009290 <strncmp+0x1c>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1f5      	bne.n	800927c <strncmp+0x8>
 8009290:	1a98      	subs	r0, r3, r2
 8009292:	bd10      	pop	{r4, pc}
 8009294:	4610      	mov	r0, r2
 8009296:	e7fc      	b.n	8009292 <strncmp+0x1e>

08009298 <__ascii_wctomb>:
 8009298:	b149      	cbz	r1, 80092ae <__ascii_wctomb+0x16>
 800929a:	2aff      	cmp	r2, #255	; 0xff
 800929c:	bf85      	ittet	hi
 800929e:	238a      	movhi	r3, #138	; 0x8a
 80092a0:	6003      	strhi	r3, [r0, #0]
 80092a2:	700a      	strbls	r2, [r1, #0]
 80092a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80092a8:	bf98      	it	ls
 80092aa:	2001      	movls	r0, #1
 80092ac:	4770      	bx	lr
 80092ae:	4608      	mov	r0, r1
 80092b0:	4770      	bx	lr

080092b2 <memmove>:
 80092b2:	4288      	cmp	r0, r1
 80092b4:	b510      	push	{r4, lr}
 80092b6:	eb01 0302 	add.w	r3, r1, r2
 80092ba:	d807      	bhi.n	80092cc <memmove+0x1a>
 80092bc:	1e42      	subs	r2, r0, #1
 80092be:	4299      	cmp	r1, r3
 80092c0:	d00a      	beq.n	80092d8 <memmove+0x26>
 80092c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80092ca:	e7f8      	b.n	80092be <memmove+0xc>
 80092cc:	4283      	cmp	r3, r0
 80092ce:	d9f5      	bls.n	80092bc <memmove+0xa>
 80092d0:	1881      	adds	r1, r0, r2
 80092d2:	1ad2      	subs	r2, r2, r3
 80092d4:	42d3      	cmn	r3, r2
 80092d6:	d100      	bne.n	80092da <memmove+0x28>
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80092e2:	e7f7      	b.n	80092d4 <memmove+0x22>

080092e4 <__malloc_lock>:
 80092e4:	4770      	bx	lr

080092e6 <__malloc_unlock>:
 80092e6:	4770      	bx	lr

080092e8 <_realloc_r>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	4607      	mov	r7, r0
 80092ec:	4614      	mov	r4, r2
 80092ee:	460e      	mov	r6, r1
 80092f0:	b921      	cbnz	r1, 80092fc <_realloc_r+0x14>
 80092f2:	4611      	mov	r1, r2
 80092f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092f8:	f7ff be00 	b.w	8008efc <_malloc_r>
 80092fc:	b922      	cbnz	r2, 8009308 <_realloc_r+0x20>
 80092fe:	f7ff fdaf 	bl	8008e60 <_free_r>
 8009302:	4625      	mov	r5, r4
 8009304:	4628      	mov	r0, r5
 8009306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009308:	f000 f814 	bl	8009334 <_malloc_usable_size_r>
 800930c:	42a0      	cmp	r0, r4
 800930e:	d20f      	bcs.n	8009330 <_realloc_r+0x48>
 8009310:	4621      	mov	r1, r4
 8009312:	4638      	mov	r0, r7
 8009314:	f7ff fdf2 	bl	8008efc <_malloc_r>
 8009318:	4605      	mov	r5, r0
 800931a:	2800      	cmp	r0, #0
 800931c:	d0f2      	beq.n	8009304 <_realloc_r+0x1c>
 800931e:	4631      	mov	r1, r6
 8009320:	4622      	mov	r2, r4
 8009322:	f7ff f985 	bl	8008630 <memcpy>
 8009326:	4631      	mov	r1, r6
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff fd99 	bl	8008e60 <_free_r>
 800932e:	e7e9      	b.n	8009304 <_realloc_r+0x1c>
 8009330:	4635      	mov	r5, r6
 8009332:	e7e7      	b.n	8009304 <_realloc_r+0x1c>

08009334 <_malloc_usable_size_r>:
 8009334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009338:	1f18      	subs	r0, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfbc      	itt	lt
 800933e:	580b      	ldrlt	r3, [r1, r0]
 8009340:	18c0      	addlt	r0, r0, r3
 8009342:	4770      	bx	lr

08009344 <pow>:
 8009344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009348:	ed2d 8b04 	vpush	{d8-d9}
 800934c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009620 <pow+0x2dc>
 8009350:	b08d      	sub	sp, #52	; 0x34
 8009352:	ec57 6b10 	vmov	r6, r7, d0
 8009356:	ec55 4b11 	vmov	r4, r5, d1
 800935a:	f000 f965 	bl	8009628 <__ieee754_pow>
 800935e:	f999 3000 	ldrsb.w	r3, [r9]
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	eeb0 8a40 	vmov.f32	s16, s0
 800936a:	eef0 8a60 	vmov.f32	s17, s1
 800936e:	46c8      	mov	r8, r9
 8009370:	d05f      	beq.n	8009432 <pow+0xee>
 8009372:	4622      	mov	r2, r4
 8009374:	462b      	mov	r3, r5
 8009376:	4620      	mov	r0, r4
 8009378:	4629      	mov	r1, r5
 800937a:	f7f7 fbd7 	bl	8000b2c <__aeabi_dcmpun>
 800937e:	4683      	mov	fp, r0
 8009380:	2800      	cmp	r0, #0
 8009382:	d156      	bne.n	8009432 <pow+0xee>
 8009384:	4632      	mov	r2, r6
 8009386:	463b      	mov	r3, r7
 8009388:	4630      	mov	r0, r6
 800938a:	4639      	mov	r1, r7
 800938c:	f7f7 fbce 	bl	8000b2c <__aeabi_dcmpun>
 8009390:	9001      	str	r0, [sp, #4]
 8009392:	b1e8      	cbz	r0, 80093d0 <pow+0x8c>
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	4620      	mov	r0, r4
 800939a:	4629      	mov	r1, r5
 800939c:	f7f7 fb94 	bl	8000ac8 <__aeabi_dcmpeq>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d046      	beq.n	8009432 <pow+0xee>
 80093a4:	2301      	movs	r3, #1
 80093a6:	9302      	str	r3, [sp, #8]
 80093a8:	4b96      	ldr	r3, [pc, #600]	; (8009604 <pow+0x2c0>)
 80093aa:	9303      	str	r3, [sp, #12]
 80093ac:	4b96      	ldr	r3, [pc, #600]	; (8009608 <pow+0x2c4>)
 80093ae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80093b2:	2200      	movs	r2, #0
 80093b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093b8:	9b00      	ldr	r3, [sp, #0]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80093c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80093c4:	d033      	beq.n	800942e <pow+0xea>
 80093c6:	a802      	add	r0, sp, #8
 80093c8:	f000 fefd 	bl	800a1c6 <matherr>
 80093cc:	bb48      	cbnz	r0, 8009422 <pow+0xde>
 80093ce:	e05d      	b.n	800948c <pow+0x148>
 80093d0:	f04f 0a00 	mov.w	sl, #0
 80093d4:	f04f 0b00 	mov.w	fp, #0
 80093d8:	4652      	mov	r2, sl
 80093da:	465b      	mov	r3, fp
 80093dc:	4630      	mov	r0, r6
 80093de:	4639      	mov	r1, r7
 80093e0:	f7f7 fb72 	bl	8000ac8 <__aeabi_dcmpeq>
 80093e4:	ec4b ab19 	vmov	d9, sl, fp
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d054      	beq.n	8009496 <pow+0x152>
 80093ec:	4652      	mov	r2, sl
 80093ee:	465b      	mov	r3, fp
 80093f0:	4620      	mov	r0, r4
 80093f2:	4629      	mov	r1, r5
 80093f4:	f7f7 fb68 	bl	8000ac8 <__aeabi_dcmpeq>
 80093f8:	4680      	mov	r8, r0
 80093fa:	b318      	cbz	r0, 8009444 <pow+0x100>
 80093fc:	2301      	movs	r3, #1
 80093fe:	9302      	str	r3, [sp, #8]
 8009400:	4b80      	ldr	r3, [pc, #512]	; (8009604 <pow+0x2c0>)
 8009402:	9303      	str	r3, [sp, #12]
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	930a      	str	r3, [sp, #40]	; 0x28
 8009408:	9b00      	ldr	r3, [sp, #0]
 800940a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800940e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009412:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0d5      	beq.n	80093c6 <pow+0x82>
 800941a:	4b7b      	ldr	r3, [pc, #492]	; (8009608 <pow+0x2c4>)
 800941c:	2200      	movs	r2, #0
 800941e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009424:	b11b      	cbz	r3, 800942e <pow+0xea>
 8009426:	f7fc fa25 	bl	8005874 <__errno>
 800942a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942c:	6003      	str	r3, [r0, #0]
 800942e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009432:	eeb0 0a48 	vmov.f32	s0, s16
 8009436:	eef0 0a68 	vmov.f32	s1, s17
 800943a:	b00d      	add	sp, #52	; 0x34
 800943c:	ecbd 8b04 	vpop	{d8-d9}
 8009440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009444:	ec45 4b10 	vmov	d0, r4, r5
 8009448:	f000 feb5 	bl	800a1b6 <finite>
 800944c:	2800      	cmp	r0, #0
 800944e:	d0f0      	beq.n	8009432 <pow+0xee>
 8009450:	4652      	mov	r2, sl
 8009452:	465b      	mov	r3, fp
 8009454:	4620      	mov	r0, r4
 8009456:	4629      	mov	r1, r5
 8009458:	f7f7 fb40 	bl	8000adc <__aeabi_dcmplt>
 800945c:	2800      	cmp	r0, #0
 800945e:	d0e8      	beq.n	8009432 <pow+0xee>
 8009460:	2301      	movs	r3, #1
 8009462:	9302      	str	r3, [sp, #8]
 8009464:	4b67      	ldr	r3, [pc, #412]	; (8009604 <pow+0x2c0>)
 8009466:	9303      	str	r3, [sp, #12]
 8009468:	f999 3000 	ldrsb.w	r3, [r9]
 800946c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009470:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009474:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009478:	b913      	cbnz	r3, 8009480 <pow+0x13c>
 800947a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800947e:	e7a2      	b.n	80093c6 <pow+0x82>
 8009480:	4962      	ldr	r1, [pc, #392]	; (800960c <pow+0x2c8>)
 8009482:	2000      	movs	r0, #0
 8009484:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009488:	2b02      	cmp	r3, #2
 800948a:	d19c      	bne.n	80093c6 <pow+0x82>
 800948c:	f7fc f9f2 	bl	8005874 <__errno>
 8009490:	2321      	movs	r3, #33	; 0x21
 8009492:	6003      	str	r3, [r0, #0]
 8009494:	e7c5      	b.n	8009422 <pow+0xde>
 8009496:	eeb0 0a48 	vmov.f32	s0, s16
 800949a:	eef0 0a68 	vmov.f32	s1, s17
 800949e:	f000 fe8a 	bl	800a1b6 <finite>
 80094a2:	9000      	str	r0, [sp, #0]
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f040 8081 	bne.w	80095ac <pow+0x268>
 80094aa:	ec47 6b10 	vmov	d0, r6, r7
 80094ae:	f000 fe82 	bl	800a1b6 <finite>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d07a      	beq.n	80095ac <pow+0x268>
 80094b6:	ec45 4b10 	vmov	d0, r4, r5
 80094ba:	f000 fe7c 	bl	800a1b6 <finite>
 80094be:	2800      	cmp	r0, #0
 80094c0:	d074      	beq.n	80095ac <pow+0x268>
 80094c2:	ec53 2b18 	vmov	r2, r3, d8
 80094c6:	ee18 0a10 	vmov	r0, s16
 80094ca:	4619      	mov	r1, r3
 80094cc:	f7f7 fb2e 	bl	8000b2c <__aeabi_dcmpun>
 80094d0:	f999 9000 	ldrsb.w	r9, [r9]
 80094d4:	4b4b      	ldr	r3, [pc, #300]	; (8009604 <pow+0x2c0>)
 80094d6:	b1b0      	cbz	r0, 8009506 <pow+0x1c2>
 80094d8:	2201      	movs	r2, #1
 80094da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	930a      	str	r3, [sp, #40]	; 0x28
 80094e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80094e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80094ea:	f1b9 0f00 	cmp.w	r9, #0
 80094ee:	d0c4      	beq.n	800947a <pow+0x136>
 80094f0:	4652      	mov	r2, sl
 80094f2:	465b      	mov	r3, fp
 80094f4:	4650      	mov	r0, sl
 80094f6:	4659      	mov	r1, fp
 80094f8:	f7f7 f9a8 	bl	800084c <__aeabi_ddiv>
 80094fc:	f1b9 0f02 	cmp.w	r9, #2
 8009500:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009504:	e7c1      	b.n	800948a <pow+0x146>
 8009506:	2203      	movs	r2, #3
 8009508:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800950c:	900a      	str	r0, [sp, #40]	; 0x28
 800950e:	4629      	mov	r1, r5
 8009510:	4620      	mov	r0, r4
 8009512:	2200      	movs	r2, #0
 8009514:	4b3e      	ldr	r3, [pc, #248]	; (8009610 <pow+0x2cc>)
 8009516:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800951a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800951e:	f7f7 f86b 	bl	80005f8 <__aeabi_dmul>
 8009522:	4604      	mov	r4, r0
 8009524:	460d      	mov	r5, r1
 8009526:	f1b9 0f00 	cmp.w	r9, #0
 800952a:	d124      	bne.n	8009576 <pow+0x232>
 800952c:	4b39      	ldr	r3, [pc, #228]	; (8009614 <pow+0x2d0>)
 800952e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009532:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009536:	4630      	mov	r0, r6
 8009538:	4652      	mov	r2, sl
 800953a:	465b      	mov	r3, fp
 800953c:	4639      	mov	r1, r7
 800953e:	f7f7 facd 	bl	8000adc <__aeabi_dcmplt>
 8009542:	2800      	cmp	r0, #0
 8009544:	d056      	beq.n	80095f4 <pow+0x2b0>
 8009546:	ec45 4b10 	vmov	d0, r4, r5
 800954a:	f000 fe49 	bl	800a1e0 <rint>
 800954e:	4622      	mov	r2, r4
 8009550:	462b      	mov	r3, r5
 8009552:	ec51 0b10 	vmov	r0, r1, d0
 8009556:	f7f7 fab7 	bl	8000ac8 <__aeabi_dcmpeq>
 800955a:	b920      	cbnz	r0, 8009566 <pow+0x222>
 800955c:	4b2e      	ldr	r3, [pc, #184]	; (8009618 <pow+0x2d4>)
 800955e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009562:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009566:	f998 3000 	ldrsb.w	r3, [r8]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d142      	bne.n	80095f4 <pow+0x2b0>
 800956e:	f7fc f981 	bl	8005874 <__errno>
 8009572:	2322      	movs	r3, #34	; 0x22
 8009574:	e78d      	b.n	8009492 <pow+0x14e>
 8009576:	4b29      	ldr	r3, [pc, #164]	; (800961c <pow+0x2d8>)
 8009578:	2200      	movs	r2, #0
 800957a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800957e:	4630      	mov	r0, r6
 8009580:	4652      	mov	r2, sl
 8009582:	465b      	mov	r3, fp
 8009584:	4639      	mov	r1, r7
 8009586:	f7f7 faa9 	bl	8000adc <__aeabi_dcmplt>
 800958a:	2800      	cmp	r0, #0
 800958c:	d0eb      	beq.n	8009566 <pow+0x222>
 800958e:	ec45 4b10 	vmov	d0, r4, r5
 8009592:	f000 fe25 	bl	800a1e0 <rint>
 8009596:	4622      	mov	r2, r4
 8009598:	462b      	mov	r3, r5
 800959a:	ec51 0b10 	vmov	r0, r1, d0
 800959e:	f7f7 fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d1df      	bne.n	8009566 <pow+0x222>
 80095a6:	2200      	movs	r2, #0
 80095a8:	4b18      	ldr	r3, [pc, #96]	; (800960c <pow+0x2c8>)
 80095aa:	e7da      	b.n	8009562 <pow+0x21e>
 80095ac:	2200      	movs	r2, #0
 80095ae:	2300      	movs	r3, #0
 80095b0:	ec51 0b18 	vmov	r0, r1, d8
 80095b4:	f7f7 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	f43f af3a 	beq.w	8009432 <pow+0xee>
 80095be:	ec47 6b10 	vmov	d0, r6, r7
 80095c2:	f000 fdf8 	bl	800a1b6 <finite>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f43f af33 	beq.w	8009432 <pow+0xee>
 80095cc:	ec45 4b10 	vmov	d0, r4, r5
 80095d0:	f000 fdf1 	bl	800a1b6 <finite>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	f43f af2c 	beq.w	8009432 <pow+0xee>
 80095da:	2304      	movs	r3, #4
 80095dc:	9302      	str	r3, [sp, #8]
 80095de:	4b09      	ldr	r3, [pc, #36]	; (8009604 <pow+0x2c0>)
 80095e0:	9303      	str	r3, [sp, #12]
 80095e2:	2300      	movs	r3, #0
 80095e4:	930a      	str	r3, [sp, #40]	; 0x28
 80095e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80095ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80095ee:	ed8d 9b08 	vstr	d9, [sp, #32]
 80095f2:	e7b8      	b.n	8009566 <pow+0x222>
 80095f4:	a802      	add	r0, sp, #8
 80095f6:	f000 fde6 	bl	800a1c6 <matherr>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f47f af11 	bne.w	8009422 <pow+0xde>
 8009600:	e7b5      	b.n	800956e <pow+0x22a>
 8009602:	bf00      	nop
 8009604:	0800b496 	.word	0x0800b496
 8009608:	3ff00000 	.word	0x3ff00000
 800960c:	fff00000 	.word	0xfff00000
 8009610:	3fe00000 	.word	0x3fe00000
 8009614:	47efffff 	.word	0x47efffff
 8009618:	c7efffff 	.word	0xc7efffff
 800961c:	7ff00000 	.word	0x7ff00000
 8009620:	200001e4 	.word	0x200001e4
 8009624:	00000000 	.word	0x00000000

08009628 <__ieee754_pow>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	b091      	sub	sp, #68	; 0x44
 800962e:	ed8d 1b00 	vstr	d1, [sp]
 8009632:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009636:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800963a:	ea58 0302 	orrs.w	r3, r8, r2
 800963e:	ec57 6b10 	vmov	r6, r7, d0
 8009642:	f000 84be 	beq.w	8009fc2 <__ieee754_pow+0x99a>
 8009646:	4b7a      	ldr	r3, [pc, #488]	; (8009830 <__ieee754_pow+0x208>)
 8009648:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800964c:	429c      	cmp	r4, r3
 800964e:	463d      	mov	r5, r7
 8009650:	ee10 aa10 	vmov	sl, s0
 8009654:	dc09      	bgt.n	800966a <__ieee754_pow+0x42>
 8009656:	d103      	bne.n	8009660 <__ieee754_pow+0x38>
 8009658:	b93e      	cbnz	r6, 800966a <__ieee754_pow+0x42>
 800965a:	45a0      	cmp	r8, r4
 800965c:	dc0d      	bgt.n	800967a <__ieee754_pow+0x52>
 800965e:	e001      	b.n	8009664 <__ieee754_pow+0x3c>
 8009660:	4598      	cmp	r8, r3
 8009662:	dc02      	bgt.n	800966a <__ieee754_pow+0x42>
 8009664:	4598      	cmp	r8, r3
 8009666:	d10e      	bne.n	8009686 <__ieee754_pow+0x5e>
 8009668:	b16a      	cbz	r2, 8009686 <__ieee754_pow+0x5e>
 800966a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800966e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009672:	ea54 030a 	orrs.w	r3, r4, sl
 8009676:	f000 84a4 	beq.w	8009fc2 <__ieee754_pow+0x99a>
 800967a:	486e      	ldr	r0, [pc, #440]	; (8009834 <__ieee754_pow+0x20c>)
 800967c:	b011      	add	sp, #68	; 0x44
 800967e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009682:	f000 bda5 	b.w	800a1d0 <nan>
 8009686:	2d00      	cmp	r5, #0
 8009688:	da53      	bge.n	8009732 <__ieee754_pow+0x10a>
 800968a:	4b6b      	ldr	r3, [pc, #428]	; (8009838 <__ieee754_pow+0x210>)
 800968c:	4598      	cmp	r8, r3
 800968e:	dc4d      	bgt.n	800972c <__ieee754_pow+0x104>
 8009690:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009694:	4598      	cmp	r8, r3
 8009696:	dd4c      	ble.n	8009732 <__ieee754_pow+0x10a>
 8009698:	ea4f 5328 	mov.w	r3, r8, asr #20
 800969c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80096a0:	2b14      	cmp	r3, #20
 80096a2:	dd26      	ble.n	80096f2 <__ieee754_pow+0xca>
 80096a4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80096a8:	fa22 f103 	lsr.w	r1, r2, r3
 80096ac:	fa01 f303 	lsl.w	r3, r1, r3
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d13e      	bne.n	8009732 <__ieee754_pow+0x10a>
 80096b4:	f001 0101 	and.w	r1, r1, #1
 80096b8:	f1c1 0b02 	rsb	fp, r1, #2
 80096bc:	2a00      	cmp	r2, #0
 80096be:	d15b      	bne.n	8009778 <__ieee754_pow+0x150>
 80096c0:	4b5b      	ldr	r3, [pc, #364]	; (8009830 <__ieee754_pow+0x208>)
 80096c2:	4598      	cmp	r8, r3
 80096c4:	d124      	bne.n	8009710 <__ieee754_pow+0xe8>
 80096c6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80096ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80096ce:	ea53 030a 	orrs.w	r3, r3, sl
 80096d2:	f000 8476 	beq.w	8009fc2 <__ieee754_pow+0x99a>
 80096d6:	4b59      	ldr	r3, [pc, #356]	; (800983c <__ieee754_pow+0x214>)
 80096d8:	429c      	cmp	r4, r3
 80096da:	dd2d      	ble.n	8009738 <__ieee754_pow+0x110>
 80096dc:	f1b9 0f00 	cmp.w	r9, #0
 80096e0:	f280 8473 	bge.w	8009fca <__ieee754_pow+0x9a2>
 80096e4:	2000      	movs	r0, #0
 80096e6:	2100      	movs	r1, #0
 80096e8:	ec41 0b10 	vmov	d0, r0, r1
 80096ec:	b011      	add	sp, #68	; 0x44
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	d13e      	bne.n	8009774 <__ieee754_pow+0x14c>
 80096f6:	f1c3 0314 	rsb	r3, r3, #20
 80096fa:	fa48 f103 	asr.w	r1, r8, r3
 80096fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009702:	4543      	cmp	r3, r8
 8009704:	f040 8469 	bne.w	8009fda <__ieee754_pow+0x9b2>
 8009708:	f001 0101 	and.w	r1, r1, #1
 800970c:	f1c1 0b02 	rsb	fp, r1, #2
 8009710:	4b4b      	ldr	r3, [pc, #300]	; (8009840 <__ieee754_pow+0x218>)
 8009712:	4598      	cmp	r8, r3
 8009714:	d118      	bne.n	8009748 <__ieee754_pow+0x120>
 8009716:	f1b9 0f00 	cmp.w	r9, #0
 800971a:	f280 845a 	bge.w	8009fd2 <__ieee754_pow+0x9aa>
 800971e:	4948      	ldr	r1, [pc, #288]	; (8009840 <__ieee754_pow+0x218>)
 8009720:	4632      	mov	r2, r6
 8009722:	463b      	mov	r3, r7
 8009724:	2000      	movs	r0, #0
 8009726:	f7f7 f891 	bl	800084c <__aeabi_ddiv>
 800972a:	e7dd      	b.n	80096e8 <__ieee754_pow+0xc0>
 800972c:	f04f 0b02 	mov.w	fp, #2
 8009730:	e7c4      	b.n	80096bc <__ieee754_pow+0x94>
 8009732:	f04f 0b00 	mov.w	fp, #0
 8009736:	e7c1      	b.n	80096bc <__ieee754_pow+0x94>
 8009738:	f1b9 0f00 	cmp.w	r9, #0
 800973c:	dad2      	bge.n	80096e4 <__ieee754_pow+0xbc>
 800973e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009742:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009746:	e7cf      	b.n	80096e8 <__ieee754_pow+0xc0>
 8009748:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800974c:	d106      	bne.n	800975c <__ieee754_pow+0x134>
 800974e:	4632      	mov	r2, r6
 8009750:	463b      	mov	r3, r7
 8009752:	4610      	mov	r0, r2
 8009754:	4619      	mov	r1, r3
 8009756:	f7f6 ff4f 	bl	80005f8 <__aeabi_dmul>
 800975a:	e7c5      	b.n	80096e8 <__ieee754_pow+0xc0>
 800975c:	4b39      	ldr	r3, [pc, #228]	; (8009844 <__ieee754_pow+0x21c>)
 800975e:	4599      	cmp	r9, r3
 8009760:	d10a      	bne.n	8009778 <__ieee754_pow+0x150>
 8009762:	2d00      	cmp	r5, #0
 8009764:	db08      	blt.n	8009778 <__ieee754_pow+0x150>
 8009766:	ec47 6b10 	vmov	d0, r6, r7
 800976a:	b011      	add	sp, #68	; 0x44
 800976c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009770:	f000 bc68 	b.w	800a044 <__ieee754_sqrt>
 8009774:	f04f 0b00 	mov.w	fp, #0
 8009778:	ec47 6b10 	vmov	d0, r6, r7
 800977c:	f000 fd12 	bl	800a1a4 <fabs>
 8009780:	ec51 0b10 	vmov	r0, r1, d0
 8009784:	f1ba 0f00 	cmp.w	sl, #0
 8009788:	d127      	bne.n	80097da <__ieee754_pow+0x1b2>
 800978a:	b124      	cbz	r4, 8009796 <__ieee754_pow+0x16e>
 800978c:	4b2c      	ldr	r3, [pc, #176]	; (8009840 <__ieee754_pow+0x218>)
 800978e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009792:	429a      	cmp	r2, r3
 8009794:	d121      	bne.n	80097da <__ieee754_pow+0x1b2>
 8009796:	f1b9 0f00 	cmp.w	r9, #0
 800979a:	da05      	bge.n	80097a8 <__ieee754_pow+0x180>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	2000      	movs	r0, #0
 80097a2:	4927      	ldr	r1, [pc, #156]	; (8009840 <__ieee754_pow+0x218>)
 80097a4:	f7f7 f852 	bl	800084c <__aeabi_ddiv>
 80097a8:	2d00      	cmp	r5, #0
 80097aa:	da9d      	bge.n	80096e8 <__ieee754_pow+0xc0>
 80097ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80097b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80097b4:	ea54 030b 	orrs.w	r3, r4, fp
 80097b8:	d108      	bne.n	80097cc <__ieee754_pow+0x1a4>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4610      	mov	r0, r2
 80097c0:	4619      	mov	r1, r3
 80097c2:	f7f6 fd61 	bl	8000288 <__aeabi_dsub>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	e7ac      	b.n	8009726 <__ieee754_pow+0xfe>
 80097cc:	f1bb 0f01 	cmp.w	fp, #1
 80097d0:	d18a      	bne.n	80096e8 <__ieee754_pow+0xc0>
 80097d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097d6:	4619      	mov	r1, r3
 80097d8:	e786      	b.n	80096e8 <__ieee754_pow+0xc0>
 80097da:	0fed      	lsrs	r5, r5, #31
 80097dc:	1e6b      	subs	r3, r5, #1
 80097de:	930d      	str	r3, [sp, #52]	; 0x34
 80097e0:	ea5b 0303 	orrs.w	r3, fp, r3
 80097e4:	d102      	bne.n	80097ec <__ieee754_pow+0x1c4>
 80097e6:	4632      	mov	r2, r6
 80097e8:	463b      	mov	r3, r7
 80097ea:	e7e8      	b.n	80097be <__ieee754_pow+0x196>
 80097ec:	4b16      	ldr	r3, [pc, #88]	; (8009848 <__ieee754_pow+0x220>)
 80097ee:	4598      	cmp	r8, r3
 80097f0:	f340 80fe 	ble.w	80099f0 <__ieee754_pow+0x3c8>
 80097f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80097f8:	4598      	cmp	r8, r3
 80097fa:	dd0a      	ble.n	8009812 <__ieee754_pow+0x1ea>
 80097fc:	4b0f      	ldr	r3, [pc, #60]	; (800983c <__ieee754_pow+0x214>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	dc0d      	bgt.n	800981e <__ieee754_pow+0x1f6>
 8009802:	f1b9 0f00 	cmp.w	r9, #0
 8009806:	f6bf af6d 	bge.w	80096e4 <__ieee754_pow+0xbc>
 800980a:	a307      	add	r3, pc, #28	; (adr r3, 8009828 <__ieee754_pow+0x200>)
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	e79f      	b.n	8009752 <__ieee754_pow+0x12a>
 8009812:	4b0e      	ldr	r3, [pc, #56]	; (800984c <__ieee754_pow+0x224>)
 8009814:	429c      	cmp	r4, r3
 8009816:	ddf4      	ble.n	8009802 <__ieee754_pow+0x1da>
 8009818:	4b09      	ldr	r3, [pc, #36]	; (8009840 <__ieee754_pow+0x218>)
 800981a:	429c      	cmp	r4, r3
 800981c:	dd18      	ble.n	8009850 <__ieee754_pow+0x228>
 800981e:	f1b9 0f00 	cmp.w	r9, #0
 8009822:	dcf2      	bgt.n	800980a <__ieee754_pow+0x1e2>
 8009824:	e75e      	b.n	80096e4 <__ieee754_pow+0xbc>
 8009826:	bf00      	nop
 8009828:	8800759c 	.word	0x8800759c
 800982c:	7e37e43c 	.word	0x7e37e43c
 8009830:	7ff00000 	.word	0x7ff00000
 8009834:	0800b389 	.word	0x0800b389
 8009838:	433fffff 	.word	0x433fffff
 800983c:	3fefffff 	.word	0x3fefffff
 8009840:	3ff00000 	.word	0x3ff00000
 8009844:	3fe00000 	.word	0x3fe00000
 8009848:	41e00000 	.word	0x41e00000
 800984c:	3feffffe 	.word	0x3feffffe
 8009850:	2200      	movs	r2, #0
 8009852:	4b63      	ldr	r3, [pc, #396]	; (80099e0 <__ieee754_pow+0x3b8>)
 8009854:	f7f6 fd18 	bl	8000288 <__aeabi_dsub>
 8009858:	a355      	add	r3, pc, #340	; (adr r3, 80099b0 <__ieee754_pow+0x388>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	4604      	mov	r4, r0
 8009860:	460d      	mov	r5, r1
 8009862:	f7f6 fec9 	bl	80005f8 <__aeabi_dmul>
 8009866:	a354      	add	r3, pc, #336	; (adr r3, 80099b8 <__ieee754_pow+0x390>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	4606      	mov	r6, r0
 800986e:	460f      	mov	r7, r1
 8009870:	4620      	mov	r0, r4
 8009872:	4629      	mov	r1, r5
 8009874:	f7f6 fec0 	bl	80005f8 <__aeabi_dmul>
 8009878:	2200      	movs	r2, #0
 800987a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800987e:	4b59      	ldr	r3, [pc, #356]	; (80099e4 <__ieee754_pow+0x3bc>)
 8009880:	4620      	mov	r0, r4
 8009882:	4629      	mov	r1, r5
 8009884:	f7f6 feb8 	bl	80005f8 <__aeabi_dmul>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	a14c      	add	r1, pc, #304	; (adr r1, 80099c0 <__ieee754_pow+0x398>)
 800988e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009892:	f7f6 fcf9 	bl	8000288 <__aeabi_dsub>
 8009896:	4622      	mov	r2, r4
 8009898:	462b      	mov	r3, r5
 800989a:	f7f6 fead 	bl	80005f8 <__aeabi_dmul>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	2000      	movs	r0, #0
 80098a4:	4950      	ldr	r1, [pc, #320]	; (80099e8 <__ieee754_pow+0x3c0>)
 80098a6:	f7f6 fcef 	bl	8000288 <__aeabi_dsub>
 80098aa:	4622      	mov	r2, r4
 80098ac:	462b      	mov	r3, r5
 80098ae:	4680      	mov	r8, r0
 80098b0:	4689      	mov	r9, r1
 80098b2:	4620      	mov	r0, r4
 80098b4:	4629      	mov	r1, r5
 80098b6:	f7f6 fe9f 	bl	80005f8 <__aeabi_dmul>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4640      	mov	r0, r8
 80098c0:	4649      	mov	r1, r9
 80098c2:	f7f6 fe99 	bl	80005f8 <__aeabi_dmul>
 80098c6:	a340      	add	r3, pc, #256	; (adr r3, 80099c8 <__ieee754_pow+0x3a0>)
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f7f6 fe94 	bl	80005f8 <__aeabi_dmul>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098d8:	f7f6 fcd6 	bl	8000288 <__aeabi_dsub>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4604      	mov	r4, r0
 80098e2:	460d      	mov	r5, r1
 80098e4:	4630      	mov	r0, r6
 80098e6:	4639      	mov	r1, r7
 80098e8:	f7f6 fcd0 	bl	800028c <__adddf3>
 80098ec:	2000      	movs	r0, #0
 80098ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098f2:	4632      	mov	r2, r6
 80098f4:	463b      	mov	r3, r7
 80098f6:	f7f6 fcc7 	bl	8000288 <__aeabi_dsub>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4620      	mov	r0, r4
 8009900:	4629      	mov	r1, r5
 8009902:	f7f6 fcc1 	bl	8000288 <__aeabi_dsub>
 8009906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009908:	f10b 33ff 	add.w	r3, fp, #4294967295
 800990c:	4313      	orrs	r3, r2
 800990e:	4606      	mov	r6, r0
 8009910:	460f      	mov	r7, r1
 8009912:	f040 81eb 	bne.w	8009cec <__ieee754_pow+0x6c4>
 8009916:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80099d0 <__ieee754_pow+0x3a8>
 800991a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800991e:	2400      	movs	r4, #0
 8009920:	4622      	mov	r2, r4
 8009922:	462b      	mov	r3, r5
 8009924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009928:	ed8d 7b02 	vstr	d7, [sp, #8]
 800992c:	f7f6 fcac 	bl	8000288 <__aeabi_dsub>
 8009930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009934:	f7f6 fe60 	bl	80005f8 <__aeabi_dmul>
 8009938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800993c:	4680      	mov	r8, r0
 800993e:	4689      	mov	r9, r1
 8009940:	4630      	mov	r0, r6
 8009942:	4639      	mov	r1, r7
 8009944:	f7f6 fe58 	bl	80005f8 <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4640      	mov	r0, r8
 800994e:	4649      	mov	r1, r9
 8009950:	f7f6 fc9c 	bl	800028c <__adddf3>
 8009954:	4622      	mov	r2, r4
 8009956:	462b      	mov	r3, r5
 8009958:	4680      	mov	r8, r0
 800995a:	4689      	mov	r9, r1
 800995c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009960:	f7f6 fe4a 	bl	80005f8 <__aeabi_dmul>
 8009964:	460b      	mov	r3, r1
 8009966:	4604      	mov	r4, r0
 8009968:	460d      	mov	r5, r1
 800996a:	4602      	mov	r2, r0
 800996c:	4649      	mov	r1, r9
 800996e:	4640      	mov	r0, r8
 8009970:	e9cd 4500 	strd	r4, r5, [sp]
 8009974:	f7f6 fc8a 	bl	800028c <__adddf3>
 8009978:	4b1c      	ldr	r3, [pc, #112]	; (80099ec <__ieee754_pow+0x3c4>)
 800997a:	4299      	cmp	r1, r3
 800997c:	4606      	mov	r6, r0
 800997e:	460f      	mov	r7, r1
 8009980:	468b      	mov	fp, r1
 8009982:	f340 82f7 	ble.w	8009f74 <__ieee754_pow+0x94c>
 8009986:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800998a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800998e:	4303      	orrs	r3, r0
 8009990:	f000 81ea 	beq.w	8009d68 <__ieee754_pow+0x740>
 8009994:	a310      	add	r3, pc, #64	; (adr r3, 80099d8 <__ieee754_pow+0x3b0>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800999e:	f7f6 fe2b 	bl	80005f8 <__aeabi_dmul>
 80099a2:	a30d      	add	r3, pc, #52	; (adr r3, 80099d8 <__ieee754_pow+0x3b0>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	e6d5      	b.n	8009756 <__ieee754_pow+0x12e>
 80099aa:	bf00      	nop
 80099ac:	f3af 8000 	nop.w
 80099b0:	60000000 	.word	0x60000000
 80099b4:	3ff71547 	.word	0x3ff71547
 80099b8:	f85ddf44 	.word	0xf85ddf44
 80099bc:	3e54ae0b 	.word	0x3e54ae0b
 80099c0:	55555555 	.word	0x55555555
 80099c4:	3fd55555 	.word	0x3fd55555
 80099c8:	652b82fe 	.word	0x652b82fe
 80099cc:	3ff71547 	.word	0x3ff71547
 80099d0:	00000000 	.word	0x00000000
 80099d4:	bff00000 	.word	0xbff00000
 80099d8:	8800759c 	.word	0x8800759c
 80099dc:	7e37e43c 	.word	0x7e37e43c
 80099e0:	3ff00000 	.word	0x3ff00000
 80099e4:	3fd00000 	.word	0x3fd00000
 80099e8:	3fe00000 	.word	0x3fe00000
 80099ec:	408fffff 	.word	0x408fffff
 80099f0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80099f4:	f04f 0200 	mov.w	r2, #0
 80099f8:	da05      	bge.n	8009a06 <__ieee754_pow+0x3de>
 80099fa:	4bd3      	ldr	r3, [pc, #844]	; (8009d48 <__ieee754_pow+0x720>)
 80099fc:	f7f6 fdfc 	bl	80005f8 <__aeabi_dmul>
 8009a00:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009a04:	460c      	mov	r4, r1
 8009a06:	1523      	asrs	r3, r4, #20
 8009a08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a0c:	4413      	add	r3, r2
 8009a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a10:	4bce      	ldr	r3, [pc, #824]	; (8009d4c <__ieee754_pow+0x724>)
 8009a12:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009a16:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009a20:	dd08      	ble.n	8009a34 <__ieee754_pow+0x40c>
 8009a22:	4bcb      	ldr	r3, [pc, #812]	; (8009d50 <__ieee754_pow+0x728>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	f340 815e 	ble.w	8009ce6 <__ieee754_pow+0x6be>
 8009a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a30:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009a34:	f04f 0a00 	mov.w	sl, #0
 8009a38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009a3c:	930c      	str	r3, [sp, #48]	; 0x30
 8009a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a40:	4bc4      	ldr	r3, [pc, #784]	; (8009d54 <__ieee754_pow+0x72c>)
 8009a42:	4413      	add	r3, r2
 8009a44:	ed93 7b00 	vldr	d7, [r3]
 8009a48:	4629      	mov	r1, r5
 8009a4a:	ec53 2b17 	vmov	r2, r3, d7
 8009a4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009a56:	f7f6 fc17 	bl	8000288 <__aeabi_dsub>
 8009a5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460f      	mov	r7, r1
 8009a62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a66:	f7f6 fc11 	bl	800028c <__adddf3>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	2000      	movs	r0, #0
 8009a70:	49b9      	ldr	r1, [pc, #740]	; (8009d58 <__ieee754_pow+0x730>)
 8009a72:	f7f6 feeb 	bl	800084c <__aeabi_ddiv>
 8009a76:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4630      	mov	r0, r6
 8009a80:	4639      	mov	r1, r7
 8009a82:	f7f6 fdb9 	bl	80005f8 <__aeabi_dmul>
 8009a86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a8a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009a8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a92:	2300      	movs	r3, #0
 8009a94:	9302      	str	r3, [sp, #8]
 8009a96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009a9a:	106d      	asrs	r5, r5, #1
 8009a9c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009aa0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	4614      	mov	r4, r2
 8009ab0:	461d      	mov	r5, r3
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f6 fbe3 	bl	8000288 <__aeabi_dsub>
 8009ac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	4620      	mov	r0, r4
 8009acc:	4629      	mov	r1, r5
 8009ace:	f7f6 fbdb 	bl	8000288 <__aeabi_dsub>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ada:	f7f6 fbd5 	bl	8000288 <__aeabi_dsub>
 8009ade:	4642      	mov	r2, r8
 8009ae0:	464b      	mov	r3, r9
 8009ae2:	f7f6 fd89 	bl	80005f8 <__aeabi_dmul>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4630      	mov	r0, r6
 8009aec:	4639      	mov	r1, r7
 8009aee:	f7f6 fbcb 	bl	8000288 <__aeabi_dsub>
 8009af2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009af6:	f7f6 fd7f 	bl	80005f8 <__aeabi_dmul>
 8009afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009afe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b02:	4610      	mov	r0, r2
 8009b04:	4619      	mov	r1, r3
 8009b06:	f7f6 fd77 	bl	80005f8 <__aeabi_dmul>
 8009b0a:	a37b      	add	r3, pc, #492	; (adr r3, 8009cf8 <__ieee754_pow+0x6d0>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	4604      	mov	r4, r0
 8009b12:	460d      	mov	r5, r1
 8009b14:	f7f6 fd70 	bl	80005f8 <__aeabi_dmul>
 8009b18:	a379      	add	r3, pc, #484	; (adr r3, 8009d00 <__ieee754_pow+0x6d8>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fbb5 	bl	800028c <__adddf3>
 8009b22:	4622      	mov	r2, r4
 8009b24:	462b      	mov	r3, r5
 8009b26:	f7f6 fd67 	bl	80005f8 <__aeabi_dmul>
 8009b2a:	a377      	add	r3, pc, #476	; (adr r3, 8009d08 <__ieee754_pow+0x6e0>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f7f6 fbac 	bl	800028c <__adddf3>
 8009b34:	4622      	mov	r2, r4
 8009b36:	462b      	mov	r3, r5
 8009b38:	f7f6 fd5e 	bl	80005f8 <__aeabi_dmul>
 8009b3c:	a374      	add	r3, pc, #464	; (adr r3, 8009d10 <__ieee754_pow+0x6e8>)
 8009b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b42:	f7f6 fba3 	bl	800028c <__adddf3>
 8009b46:	4622      	mov	r2, r4
 8009b48:	462b      	mov	r3, r5
 8009b4a:	f7f6 fd55 	bl	80005f8 <__aeabi_dmul>
 8009b4e:	a372      	add	r3, pc, #456	; (adr r3, 8009d18 <__ieee754_pow+0x6f0>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f7f6 fb9a 	bl	800028c <__adddf3>
 8009b58:	4622      	mov	r2, r4
 8009b5a:	462b      	mov	r3, r5
 8009b5c:	f7f6 fd4c 	bl	80005f8 <__aeabi_dmul>
 8009b60:	a36f      	add	r3, pc, #444	; (adr r3, 8009d20 <__ieee754_pow+0x6f8>)
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f7f6 fb91 	bl	800028c <__adddf3>
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	460f      	mov	r7, r1
 8009b70:	462b      	mov	r3, r5
 8009b72:	4620      	mov	r0, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	f7f6 fd3f 	bl	80005f8 <__aeabi_dmul>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4630      	mov	r0, r6
 8009b80:	4639      	mov	r1, r7
 8009b82:	f7f6 fd39 	bl	80005f8 <__aeabi_dmul>
 8009b86:	4642      	mov	r2, r8
 8009b88:	4604      	mov	r4, r0
 8009b8a:	460d      	mov	r5, r1
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b92:	f7f6 fb7b 	bl	800028c <__adddf3>
 8009b96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b9a:	f7f6 fd2d 	bl	80005f8 <__aeabi_dmul>
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	f7f6 fb73 	bl	800028c <__adddf3>
 8009ba6:	4642      	mov	r2, r8
 8009ba8:	4606      	mov	r6, r0
 8009baa:	460f      	mov	r7, r1
 8009bac:	464b      	mov	r3, r9
 8009bae:	4640      	mov	r0, r8
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	f7f6 fd21 	bl	80005f8 <__aeabi_dmul>
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4b68      	ldr	r3, [pc, #416]	; (8009d5c <__ieee754_pow+0x734>)
 8009bba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009bbe:	f7f6 fb65 	bl	800028c <__adddf3>
 8009bc2:	4632      	mov	r2, r6
 8009bc4:	463b      	mov	r3, r7
 8009bc6:	f7f6 fb61 	bl	800028c <__adddf3>
 8009bca:	9802      	ldr	r0, [sp, #8]
 8009bcc:	460d      	mov	r5, r1
 8009bce:	4604      	mov	r4, r0
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	f7f6 fd0e 	bl	80005f8 <__aeabi_dmul>
 8009bdc:	2200      	movs	r2, #0
 8009bde:	4680      	mov	r8, r0
 8009be0:	4689      	mov	r9, r1
 8009be2:	4b5e      	ldr	r3, [pc, #376]	; (8009d5c <__ieee754_pow+0x734>)
 8009be4:	4620      	mov	r0, r4
 8009be6:	4629      	mov	r1, r5
 8009be8:	f7f6 fb4e 	bl	8000288 <__aeabi_dsub>
 8009bec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bf0:	f7f6 fb4a 	bl	8000288 <__aeabi_dsub>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f6 fb44 	bl	8000288 <__aeabi_dsub>
 8009c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c04:	f7f6 fcf8 	bl	80005f8 <__aeabi_dmul>
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	460f      	mov	r7, r1
 8009c0e:	462b      	mov	r3, r5
 8009c10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c14:	f7f6 fcf0 	bl	80005f8 <__aeabi_dmul>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	4639      	mov	r1, r7
 8009c20:	f7f6 fb34 	bl	800028c <__adddf3>
 8009c24:	4606      	mov	r6, r0
 8009c26:	460f      	mov	r7, r1
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	4649      	mov	r1, r9
 8009c30:	f7f6 fb2c 	bl	800028c <__adddf3>
 8009c34:	9802      	ldr	r0, [sp, #8]
 8009c36:	a33c      	add	r3, pc, #240	; (adr r3, 8009d28 <__ieee754_pow+0x700>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	460d      	mov	r5, r1
 8009c40:	f7f6 fcda 	bl	80005f8 <__aeabi_dmul>
 8009c44:	4642      	mov	r2, r8
 8009c46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c4a:	464b      	mov	r3, r9
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	4629      	mov	r1, r5
 8009c50:	f7f6 fb1a 	bl	8000288 <__aeabi_dsub>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4630      	mov	r0, r6
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	f7f6 fb14 	bl	8000288 <__aeabi_dsub>
 8009c60:	a333      	add	r3, pc, #204	; (adr r3, 8009d30 <__ieee754_pow+0x708>)
 8009c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c66:	f7f6 fcc7 	bl	80005f8 <__aeabi_dmul>
 8009c6a:	a333      	add	r3, pc, #204	; (adr r3, 8009d38 <__ieee754_pow+0x710>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	4606      	mov	r6, r0
 8009c72:	460f      	mov	r7, r1
 8009c74:	4620      	mov	r0, r4
 8009c76:	4629      	mov	r1, r5
 8009c78:	f7f6 fcbe 	bl	80005f8 <__aeabi_dmul>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4630      	mov	r0, r6
 8009c82:	4639      	mov	r1, r7
 8009c84:	f7f6 fb02 	bl	800028c <__adddf3>
 8009c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c8a:	4b35      	ldr	r3, [pc, #212]	; (8009d60 <__ieee754_pow+0x738>)
 8009c8c:	4413      	add	r3, r2
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	f7f6 fafb 	bl	800028c <__adddf3>
 8009c96:	4604      	mov	r4, r0
 8009c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c9a:	460d      	mov	r5, r1
 8009c9c:	f7f6 fc42 	bl	8000524 <__aeabi_i2d>
 8009ca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ca2:	4b30      	ldr	r3, [pc, #192]	; (8009d64 <__ieee754_pow+0x73c>)
 8009ca4:	4413      	add	r3, r2
 8009ca6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009caa:	4606      	mov	r6, r0
 8009cac:	460f      	mov	r7, r1
 8009cae:	4622      	mov	r2, r4
 8009cb0:	462b      	mov	r3, r5
 8009cb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cb6:	f7f6 fae9 	bl	800028c <__adddf3>
 8009cba:	4642      	mov	r2, r8
 8009cbc:	464b      	mov	r3, r9
 8009cbe:	f7f6 fae5 	bl	800028c <__adddf3>
 8009cc2:	4632      	mov	r2, r6
 8009cc4:	463b      	mov	r3, r7
 8009cc6:	f7f6 fae1 	bl	800028c <__adddf3>
 8009cca:	9802      	ldr	r0, [sp, #8]
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cd4:	f7f6 fad8 	bl	8000288 <__aeabi_dsub>
 8009cd8:	4642      	mov	r2, r8
 8009cda:	464b      	mov	r3, r9
 8009cdc:	f7f6 fad4 	bl	8000288 <__aeabi_dsub>
 8009ce0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ce4:	e607      	b.n	80098f6 <__ieee754_pow+0x2ce>
 8009ce6:	f04f 0a01 	mov.w	sl, #1
 8009cea:	e6a5      	b.n	8009a38 <__ieee754_pow+0x410>
 8009cec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009d40 <__ieee754_pow+0x718>
 8009cf0:	e613      	b.n	800991a <__ieee754_pow+0x2f2>
 8009cf2:	bf00      	nop
 8009cf4:	f3af 8000 	nop.w
 8009cf8:	4a454eef 	.word	0x4a454eef
 8009cfc:	3fca7e28 	.word	0x3fca7e28
 8009d00:	93c9db65 	.word	0x93c9db65
 8009d04:	3fcd864a 	.word	0x3fcd864a
 8009d08:	a91d4101 	.word	0xa91d4101
 8009d0c:	3fd17460 	.word	0x3fd17460
 8009d10:	518f264d 	.word	0x518f264d
 8009d14:	3fd55555 	.word	0x3fd55555
 8009d18:	db6fabff 	.word	0xdb6fabff
 8009d1c:	3fdb6db6 	.word	0x3fdb6db6
 8009d20:	33333303 	.word	0x33333303
 8009d24:	3fe33333 	.word	0x3fe33333
 8009d28:	e0000000 	.word	0xe0000000
 8009d2c:	3feec709 	.word	0x3feec709
 8009d30:	dc3a03fd 	.word	0xdc3a03fd
 8009d34:	3feec709 	.word	0x3feec709
 8009d38:	145b01f5 	.word	0x145b01f5
 8009d3c:	be3e2fe0 	.word	0xbe3e2fe0
 8009d40:	00000000 	.word	0x00000000
 8009d44:	3ff00000 	.word	0x3ff00000
 8009d48:	43400000 	.word	0x43400000
 8009d4c:	0003988e 	.word	0x0003988e
 8009d50:	000bb679 	.word	0x000bb679
 8009d54:	0800b4a0 	.word	0x0800b4a0
 8009d58:	3ff00000 	.word	0x3ff00000
 8009d5c:	40080000 	.word	0x40080000
 8009d60:	0800b4c0 	.word	0x0800b4c0
 8009d64:	0800b4b0 	.word	0x0800b4b0
 8009d68:	a3b4      	add	r3, pc, #720	; (adr r3, 800a03c <__ieee754_pow+0xa14>)
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	4640      	mov	r0, r8
 8009d70:	4649      	mov	r1, r9
 8009d72:	f7f6 fa8b 	bl	800028c <__adddf3>
 8009d76:	4622      	mov	r2, r4
 8009d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d7c:	462b      	mov	r3, r5
 8009d7e:	4630      	mov	r0, r6
 8009d80:	4639      	mov	r1, r7
 8009d82:	f7f6 fa81 	bl	8000288 <__aeabi_dsub>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d8e:	f7f6 fec3 	bl	8000b18 <__aeabi_dcmpgt>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	f47f adfe 	bne.w	8009994 <__ieee754_pow+0x36c>
 8009d98:	4aa3      	ldr	r2, [pc, #652]	; (800a028 <__ieee754_pow+0xa00>)
 8009d9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	f340 810a 	ble.w	8009fb8 <__ieee754_pow+0x990>
 8009da4:	151b      	asrs	r3, r3, #20
 8009da6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009daa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009dae:	fa4a f303 	asr.w	r3, sl, r3
 8009db2:	445b      	add	r3, fp
 8009db4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009db8:	4e9c      	ldr	r6, [pc, #624]	; (800a02c <__ieee754_pow+0xa04>)
 8009dba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009dbe:	4116      	asrs	r6, r2
 8009dc0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	ea23 0106 	bic.w	r1, r3, r6
 8009dca:	f1c2 0214 	rsb	r2, r2, #20
 8009dce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009dd2:	fa4a fa02 	asr.w	sl, sl, r2
 8009dd6:	f1bb 0f00 	cmp.w	fp, #0
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4620      	mov	r0, r4
 8009de0:	4629      	mov	r1, r5
 8009de2:	bfb8      	it	lt
 8009de4:	f1ca 0a00 	rsblt	sl, sl, #0
 8009de8:	f7f6 fa4e 	bl	8000288 <__aeabi_dsub>
 8009dec:	e9cd 0100 	strd	r0, r1, [sp]
 8009df0:	4642      	mov	r2, r8
 8009df2:	464b      	mov	r3, r9
 8009df4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009df8:	f7f6 fa48 	bl	800028c <__adddf3>
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	a378      	add	r3, pc, #480	; (adr r3, 8009fe0 <__ieee754_pow+0x9b8>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	f7f6 fbf6 	bl	80005f8 <__aeabi_dmul>
 8009e0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e10:	4606      	mov	r6, r0
 8009e12:	460f      	mov	r7, r1
 8009e14:	4620      	mov	r0, r4
 8009e16:	4629      	mov	r1, r5
 8009e18:	f7f6 fa36 	bl	8000288 <__aeabi_dsub>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4640      	mov	r0, r8
 8009e22:	4649      	mov	r1, r9
 8009e24:	f7f6 fa30 	bl	8000288 <__aeabi_dsub>
 8009e28:	a36f      	add	r3, pc, #444	; (adr r3, 8009fe8 <__ieee754_pow+0x9c0>)
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f7f6 fbe3 	bl	80005f8 <__aeabi_dmul>
 8009e32:	a36f      	add	r3, pc, #444	; (adr r3, 8009ff0 <__ieee754_pow+0x9c8>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	4680      	mov	r8, r0
 8009e3a:	4689      	mov	r9, r1
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	4629      	mov	r1, r5
 8009e40:	f7f6 fbda 	bl	80005f8 <__aeabi_dmul>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4640      	mov	r0, r8
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	f7f6 fa1e 	bl	800028c <__adddf3>
 8009e50:	4604      	mov	r4, r0
 8009e52:	460d      	mov	r5, r1
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 fa16 	bl	800028c <__adddf3>
 8009e60:	4632      	mov	r2, r6
 8009e62:	463b      	mov	r3, r7
 8009e64:	4680      	mov	r8, r0
 8009e66:	4689      	mov	r9, r1
 8009e68:	f7f6 fa0e 	bl	8000288 <__aeabi_dsub>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4620      	mov	r0, r4
 8009e72:	4629      	mov	r1, r5
 8009e74:	f7f6 fa08 	bl	8000288 <__aeabi_dsub>
 8009e78:	4642      	mov	r2, r8
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	460f      	mov	r7, r1
 8009e7e:	464b      	mov	r3, r9
 8009e80:	4640      	mov	r0, r8
 8009e82:	4649      	mov	r1, r9
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	a35b      	add	r3, pc, #364	; (adr r3, 8009ff8 <__ieee754_pow+0x9d0>)
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	4604      	mov	r4, r0
 8009e90:	460d      	mov	r5, r1
 8009e92:	f7f6 fbb1 	bl	80005f8 <__aeabi_dmul>
 8009e96:	a35a      	add	r3, pc, #360	; (adr r3, 800a000 <__ieee754_pow+0x9d8>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f7f6 f9f4 	bl	8000288 <__aeabi_dsub>
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	462b      	mov	r3, r5
 8009ea4:	f7f6 fba8 	bl	80005f8 <__aeabi_dmul>
 8009ea8:	a357      	add	r3, pc, #348	; (adr r3, 800a008 <__ieee754_pow+0x9e0>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f7f6 f9ed 	bl	800028c <__adddf3>
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	f7f6 fb9f 	bl	80005f8 <__aeabi_dmul>
 8009eba:	a355      	add	r3, pc, #340	; (adr r3, 800a010 <__ieee754_pow+0x9e8>)
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	f7f6 f9e2 	bl	8000288 <__aeabi_dsub>
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	462b      	mov	r3, r5
 8009ec8:	f7f6 fb96 	bl	80005f8 <__aeabi_dmul>
 8009ecc:	a352      	add	r3, pc, #328	; (adr r3, 800a018 <__ieee754_pow+0x9f0>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	f7f6 f9db 	bl	800028c <__adddf3>
 8009ed6:	4622      	mov	r2, r4
 8009ed8:	462b      	mov	r3, r5
 8009eda:	f7f6 fb8d 	bl	80005f8 <__aeabi_dmul>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	f7f6 f9cf 	bl	8000288 <__aeabi_dsub>
 8009eea:	4604      	mov	r4, r0
 8009eec:	460d      	mov	r5, r1
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	4640      	mov	r0, r8
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	f7f6 fb7f 	bl	80005f8 <__aeabi_dmul>
 8009efa:	2200      	movs	r2, #0
 8009efc:	e9cd 0100 	strd	r0, r1, [sp]
 8009f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f04:	4620      	mov	r0, r4
 8009f06:	4629      	mov	r1, r5
 8009f08:	f7f6 f9be 	bl	8000288 <__aeabi_dsub>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f14:	f7f6 fc9a 	bl	800084c <__aeabi_ddiv>
 8009f18:	4632      	mov	r2, r6
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	460d      	mov	r5, r1
 8009f1e:	463b      	mov	r3, r7
 8009f20:	4640      	mov	r0, r8
 8009f22:	4649      	mov	r1, r9
 8009f24:	f7f6 fb68 	bl	80005f8 <__aeabi_dmul>
 8009f28:	4632      	mov	r2, r6
 8009f2a:	463b      	mov	r3, r7
 8009f2c:	f7f6 f9ae 	bl	800028c <__adddf3>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4620      	mov	r0, r4
 8009f36:	4629      	mov	r1, r5
 8009f38:	f7f6 f9a6 	bl	8000288 <__aeabi_dsub>
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	464b      	mov	r3, r9
 8009f40:	f7f6 f9a2 	bl	8000288 <__aeabi_dsub>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	2000      	movs	r0, #0
 8009f4a:	4939      	ldr	r1, [pc, #228]	; (800a030 <__ieee754_pow+0xa08>)
 8009f4c:	f7f6 f99c 	bl	8000288 <__aeabi_dsub>
 8009f50:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009f54:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	da2f      	bge.n	8009fbe <__ieee754_pow+0x996>
 8009f5e:	4650      	mov	r0, sl
 8009f60:	ec43 2b10 	vmov	d0, r2, r3
 8009f64:	f000 f9c0 	bl	800a2e8 <scalbn>
 8009f68:	ec51 0b10 	vmov	r0, r1, d0
 8009f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f70:	f7ff bbf1 	b.w	8009756 <__ieee754_pow+0x12e>
 8009f74:	4b2f      	ldr	r3, [pc, #188]	; (800a034 <__ieee754_pow+0xa0c>)
 8009f76:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f7a:	429e      	cmp	r6, r3
 8009f7c:	f77f af0c 	ble.w	8009d98 <__ieee754_pow+0x770>
 8009f80:	4b2d      	ldr	r3, [pc, #180]	; (800a038 <__ieee754_pow+0xa10>)
 8009f82:	440b      	add	r3, r1
 8009f84:	4303      	orrs	r3, r0
 8009f86:	d00b      	beq.n	8009fa0 <__ieee754_pow+0x978>
 8009f88:	a325      	add	r3, pc, #148	; (adr r3, 800a020 <__ieee754_pow+0x9f8>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f92:	f7f6 fb31 	bl	80005f8 <__aeabi_dmul>
 8009f96:	a322      	add	r3, pc, #136	; (adr r3, 800a020 <__ieee754_pow+0x9f8>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	f7ff bbdb 	b.w	8009756 <__ieee754_pow+0x12e>
 8009fa0:	4622      	mov	r2, r4
 8009fa2:	462b      	mov	r3, r5
 8009fa4:	f7f6 f970 	bl	8000288 <__aeabi_dsub>
 8009fa8:	4642      	mov	r2, r8
 8009faa:	464b      	mov	r3, r9
 8009fac:	f7f6 fdaa 	bl	8000b04 <__aeabi_dcmpge>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f43f aef1 	beq.w	8009d98 <__ieee754_pow+0x770>
 8009fb6:	e7e7      	b.n	8009f88 <__ieee754_pow+0x960>
 8009fb8:	f04f 0a00 	mov.w	sl, #0
 8009fbc:	e718      	b.n	8009df0 <__ieee754_pow+0x7c8>
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	e7d4      	b.n	8009f6c <__ieee754_pow+0x944>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	491a      	ldr	r1, [pc, #104]	; (800a030 <__ieee754_pow+0xa08>)
 8009fc6:	f7ff bb8f 	b.w	80096e8 <__ieee754_pow+0xc0>
 8009fca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fce:	f7ff bb8b 	b.w	80096e8 <__ieee754_pow+0xc0>
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7ff bb87 	b.w	80096e8 <__ieee754_pow+0xc0>
 8009fda:	4693      	mov	fp, r2
 8009fdc:	f7ff bb98 	b.w	8009710 <__ieee754_pow+0xe8>
 8009fe0:	00000000 	.word	0x00000000
 8009fe4:	3fe62e43 	.word	0x3fe62e43
 8009fe8:	fefa39ef 	.word	0xfefa39ef
 8009fec:	3fe62e42 	.word	0x3fe62e42
 8009ff0:	0ca86c39 	.word	0x0ca86c39
 8009ff4:	be205c61 	.word	0xbe205c61
 8009ff8:	72bea4d0 	.word	0x72bea4d0
 8009ffc:	3e663769 	.word	0x3e663769
 800a000:	c5d26bf1 	.word	0xc5d26bf1
 800a004:	3ebbbd41 	.word	0x3ebbbd41
 800a008:	af25de2c 	.word	0xaf25de2c
 800a00c:	3f11566a 	.word	0x3f11566a
 800a010:	16bebd93 	.word	0x16bebd93
 800a014:	3f66c16c 	.word	0x3f66c16c
 800a018:	5555553e 	.word	0x5555553e
 800a01c:	3fc55555 	.word	0x3fc55555
 800a020:	c2f8f359 	.word	0xc2f8f359
 800a024:	01a56e1f 	.word	0x01a56e1f
 800a028:	3fe00000 	.word	0x3fe00000
 800a02c:	000fffff 	.word	0x000fffff
 800a030:	3ff00000 	.word	0x3ff00000
 800a034:	4090cbff 	.word	0x4090cbff
 800a038:	3f6f3400 	.word	0x3f6f3400
 800a03c:	652b82fe 	.word	0x652b82fe
 800a040:	3c971547 	.word	0x3c971547

0800a044 <__ieee754_sqrt>:
 800a044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a048:	4955      	ldr	r1, [pc, #340]	; (800a1a0 <__ieee754_sqrt+0x15c>)
 800a04a:	ec55 4b10 	vmov	r4, r5, d0
 800a04e:	43a9      	bics	r1, r5
 800a050:	462b      	mov	r3, r5
 800a052:	462a      	mov	r2, r5
 800a054:	d112      	bne.n	800a07c <__ieee754_sqrt+0x38>
 800a056:	ee10 2a10 	vmov	r2, s0
 800a05a:	ee10 0a10 	vmov	r0, s0
 800a05e:	4629      	mov	r1, r5
 800a060:	f7f6 faca 	bl	80005f8 <__aeabi_dmul>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4620      	mov	r0, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	f7f6 f90e 	bl	800028c <__adddf3>
 800a070:	4604      	mov	r4, r0
 800a072:	460d      	mov	r5, r1
 800a074:	ec45 4b10 	vmov	d0, r4, r5
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	ee10 0a10 	vmov	r0, s0
 800a082:	4621      	mov	r1, r4
 800a084:	dc0f      	bgt.n	800a0a6 <__ieee754_sqrt+0x62>
 800a086:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a08a:	4330      	orrs	r0, r6
 800a08c:	d0f2      	beq.n	800a074 <__ieee754_sqrt+0x30>
 800a08e:	b155      	cbz	r5, 800a0a6 <__ieee754_sqrt+0x62>
 800a090:	ee10 2a10 	vmov	r2, s0
 800a094:	4620      	mov	r0, r4
 800a096:	4629      	mov	r1, r5
 800a098:	f7f6 f8f6 	bl	8000288 <__aeabi_dsub>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	f7f6 fbd4 	bl	800084c <__aeabi_ddiv>
 800a0a4:	e7e4      	b.n	800a070 <__ieee754_sqrt+0x2c>
 800a0a6:	151b      	asrs	r3, r3, #20
 800a0a8:	d073      	beq.n	800a192 <__ieee754_sqrt+0x14e>
 800a0aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a0ae:	07dd      	lsls	r5, r3, #31
 800a0b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a0b4:	bf48      	it	mi
 800a0b6:	0fc8      	lsrmi	r0, r1, #31
 800a0b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a0bc:	bf44      	itt	mi
 800a0be:	0049      	lslmi	r1, r1, #1
 800a0c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a0c4:	2500      	movs	r5, #0
 800a0c6:	1058      	asrs	r0, r3, #1
 800a0c8:	0fcb      	lsrs	r3, r1, #31
 800a0ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a0ce:	0049      	lsls	r1, r1, #1
 800a0d0:	2316      	movs	r3, #22
 800a0d2:	462c      	mov	r4, r5
 800a0d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a0d8:	19a7      	adds	r7, r4, r6
 800a0da:	4297      	cmp	r7, r2
 800a0dc:	bfde      	ittt	le
 800a0de:	19bc      	addle	r4, r7, r6
 800a0e0:	1bd2      	suble	r2, r2, r7
 800a0e2:	19ad      	addle	r5, r5, r6
 800a0e4:	0fcf      	lsrs	r7, r1, #31
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a0ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a0f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a0f4:	d1f0      	bne.n	800a0d8 <__ieee754_sqrt+0x94>
 800a0f6:	f04f 0c20 	mov.w	ip, #32
 800a0fa:	469e      	mov	lr, r3
 800a0fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a100:	42a2      	cmp	r2, r4
 800a102:	eb06 070e 	add.w	r7, r6, lr
 800a106:	dc02      	bgt.n	800a10e <__ieee754_sqrt+0xca>
 800a108:	d112      	bne.n	800a130 <__ieee754_sqrt+0xec>
 800a10a:	428f      	cmp	r7, r1
 800a10c:	d810      	bhi.n	800a130 <__ieee754_sqrt+0xec>
 800a10e:	2f00      	cmp	r7, #0
 800a110:	eb07 0e06 	add.w	lr, r7, r6
 800a114:	da42      	bge.n	800a19c <__ieee754_sqrt+0x158>
 800a116:	f1be 0f00 	cmp.w	lr, #0
 800a11a:	db3f      	blt.n	800a19c <__ieee754_sqrt+0x158>
 800a11c:	f104 0801 	add.w	r8, r4, #1
 800a120:	1b12      	subs	r2, r2, r4
 800a122:	428f      	cmp	r7, r1
 800a124:	bf88      	it	hi
 800a126:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a12a:	1bc9      	subs	r1, r1, r7
 800a12c:	4433      	add	r3, r6
 800a12e:	4644      	mov	r4, r8
 800a130:	0052      	lsls	r2, r2, #1
 800a132:	f1bc 0c01 	subs.w	ip, ip, #1
 800a136:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a13a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a13e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a142:	d1dd      	bne.n	800a100 <__ieee754_sqrt+0xbc>
 800a144:	430a      	orrs	r2, r1
 800a146:	d006      	beq.n	800a156 <__ieee754_sqrt+0x112>
 800a148:	1c5c      	adds	r4, r3, #1
 800a14a:	bf13      	iteet	ne
 800a14c:	3301      	addne	r3, #1
 800a14e:	3501      	addeq	r5, #1
 800a150:	4663      	moveq	r3, ip
 800a152:	f023 0301 	bicne.w	r3, r3, #1
 800a156:	106a      	asrs	r2, r5, #1
 800a158:	085b      	lsrs	r3, r3, #1
 800a15a:	07e9      	lsls	r1, r5, #31
 800a15c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a160:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a164:	bf48      	it	mi
 800a166:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a16a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a16e:	461c      	mov	r4, r3
 800a170:	e780      	b.n	800a074 <__ieee754_sqrt+0x30>
 800a172:	0aca      	lsrs	r2, r1, #11
 800a174:	3815      	subs	r0, #21
 800a176:	0549      	lsls	r1, r1, #21
 800a178:	2a00      	cmp	r2, #0
 800a17a:	d0fa      	beq.n	800a172 <__ieee754_sqrt+0x12e>
 800a17c:	02d6      	lsls	r6, r2, #11
 800a17e:	d50a      	bpl.n	800a196 <__ieee754_sqrt+0x152>
 800a180:	f1c3 0420 	rsb	r4, r3, #32
 800a184:	fa21 f404 	lsr.w	r4, r1, r4
 800a188:	1e5d      	subs	r5, r3, #1
 800a18a:	4099      	lsls	r1, r3
 800a18c:	4322      	orrs	r2, r4
 800a18e:	1b43      	subs	r3, r0, r5
 800a190:	e78b      	b.n	800a0aa <__ieee754_sqrt+0x66>
 800a192:	4618      	mov	r0, r3
 800a194:	e7f0      	b.n	800a178 <__ieee754_sqrt+0x134>
 800a196:	0052      	lsls	r2, r2, #1
 800a198:	3301      	adds	r3, #1
 800a19a:	e7ef      	b.n	800a17c <__ieee754_sqrt+0x138>
 800a19c:	46a0      	mov	r8, r4
 800a19e:	e7bf      	b.n	800a120 <__ieee754_sqrt+0xdc>
 800a1a0:	7ff00000 	.word	0x7ff00000

0800a1a4 <fabs>:
 800a1a4:	ec51 0b10 	vmov	r0, r1, d0
 800a1a8:	ee10 2a10 	vmov	r2, s0
 800a1ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1b0:	ec43 2b10 	vmov	d0, r2, r3
 800a1b4:	4770      	bx	lr

0800a1b6 <finite>:
 800a1b6:	ee10 3a90 	vmov	r3, s1
 800a1ba:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a1be:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a1c2:	0fc0      	lsrs	r0, r0, #31
 800a1c4:	4770      	bx	lr

0800a1c6 <matherr>:
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	4770      	bx	lr
 800a1ca:	0000      	movs	r0, r0
 800a1cc:	0000      	movs	r0, r0
	...

0800a1d0 <nan>:
 800a1d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a1d8 <nan+0x8>
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	00000000 	.word	0x00000000
 800a1dc:	7ff80000 	.word	0x7ff80000

0800a1e0 <rint>:
 800a1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1e2:	ec51 0b10 	vmov	r0, r1, d0
 800a1e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1ea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a1ee:	2e13      	cmp	r6, #19
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	ee10 4a10 	vmov	r4, s0
 800a1f6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a1fa:	dc56      	bgt.n	800a2aa <rint+0xca>
 800a1fc:	2e00      	cmp	r6, #0
 800a1fe:	da2b      	bge.n	800a258 <rint+0x78>
 800a200:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a204:	4302      	orrs	r2, r0
 800a206:	d023      	beq.n	800a250 <rint+0x70>
 800a208:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a20c:	4302      	orrs	r2, r0
 800a20e:	4254      	negs	r4, r2
 800a210:	4314      	orrs	r4, r2
 800a212:	0c4b      	lsrs	r3, r1, #17
 800a214:	0b24      	lsrs	r4, r4, #12
 800a216:	045b      	lsls	r3, r3, #17
 800a218:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a21c:	ea44 0103 	orr.w	r1, r4, r3
 800a220:	460b      	mov	r3, r1
 800a222:	492f      	ldr	r1, [pc, #188]	; (800a2e0 <rint+0x100>)
 800a224:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a228:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a22c:	4602      	mov	r2, r0
 800a22e:	4639      	mov	r1, r7
 800a230:	4630      	mov	r0, r6
 800a232:	f7f6 f82b 	bl	800028c <__adddf3>
 800a236:	e9cd 0100 	strd	r0, r1, [sp]
 800a23a:	463b      	mov	r3, r7
 800a23c:	4632      	mov	r2, r6
 800a23e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a242:	f7f6 f821 	bl	8000288 <__aeabi_dsub>
 800a246:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a24a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a24e:	4639      	mov	r1, r7
 800a250:	ec41 0b10 	vmov	d0, r0, r1
 800a254:	b003      	add	sp, #12
 800a256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a258:	4a22      	ldr	r2, [pc, #136]	; (800a2e4 <rint+0x104>)
 800a25a:	4132      	asrs	r2, r6
 800a25c:	ea01 0702 	and.w	r7, r1, r2
 800a260:	4307      	orrs	r7, r0
 800a262:	d0f5      	beq.n	800a250 <rint+0x70>
 800a264:	0852      	lsrs	r2, r2, #1
 800a266:	4011      	ands	r1, r2
 800a268:	430c      	orrs	r4, r1
 800a26a:	d00b      	beq.n	800a284 <rint+0xa4>
 800a26c:	ea23 0202 	bic.w	r2, r3, r2
 800a270:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a274:	2e13      	cmp	r6, #19
 800a276:	fa43 f306 	asr.w	r3, r3, r6
 800a27a:	bf0c      	ite	eq
 800a27c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a280:	2400      	movne	r4, #0
 800a282:	4313      	orrs	r3, r2
 800a284:	4916      	ldr	r1, [pc, #88]	; (800a2e0 <rint+0x100>)
 800a286:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a28a:	4622      	mov	r2, r4
 800a28c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a290:	4620      	mov	r0, r4
 800a292:	4629      	mov	r1, r5
 800a294:	f7f5 fffa 	bl	800028c <__adddf3>
 800a298:	e9cd 0100 	strd	r0, r1, [sp]
 800a29c:	4622      	mov	r2, r4
 800a29e:	462b      	mov	r3, r5
 800a2a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2a4:	f7f5 fff0 	bl	8000288 <__aeabi_dsub>
 800a2a8:	e7d2      	b.n	800a250 <rint+0x70>
 800a2aa:	2e33      	cmp	r6, #51	; 0x33
 800a2ac:	dd07      	ble.n	800a2be <rint+0xde>
 800a2ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a2b2:	d1cd      	bne.n	800a250 <rint+0x70>
 800a2b4:	ee10 2a10 	vmov	r2, s0
 800a2b8:	f7f5 ffe8 	bl	800028c <__adddf3>
 800a2bc:	e7c8      	b.n	800a250 <rint+0x70>
 800a2be:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c6:	40f2      	lsrs	r2, r6
 800a2c8:	4210      	tst	r0, r2
 800a2ca:	d0c1      	beq.n	800a250 <rint+0x70>
 800a2cc:	0852      	lsrs	r2, r2, #1
 800a2ce:	4210      	tst	r0, r2
 800a2d0:	bf1f      	itttt	ne
 800a2d2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a2d6:	ea20 0202 	bicne.w	r2, r0, r2
 800a2da:	4134      	asrne	r4, r6
 800a2dc:	4314      	orrne	r4, r2
 800a2de:	e7d1      	b.n	800a284 <rint+0xa4>
 800a2e0:	0800b4d0 	.word	0x0800b4d0
 800a2e4:	000fffff 	.word	0x000fffff

0800a2e8 <scalbn>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	ec55 4b10 	vmov	r4, r5, d0
 800a2ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	462b      	mov	r3, r5
 800a2f6:	b9aa      	cbnz	r2, 800a324 <scalbn+0x3c>
 800a2f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a2fc:	4323      	orrs	r3, r4
 800a2fe:	d03b      	beq.n	800a378 <scalbn+0x90>
 800a300:	4b31      	ldr	r3, [pc, #196]	; (800a3c8 <scalbn+0xe0>)
 800a302:	4629      	mov	r1, r5
 800a304:	2200      	movs	r2, #0
 800a306:	ee10 0a10 	vmov	r0, s0
 800a30a:	f7f6 f975 	bl	80005f8 <__aeabi_dmul>
 800a30e:	4b2f      	ldr	r3, [pc, #188]	; (800a3cc <scalbn+0xe4>)
 800a310:	429e      	cmp	r6, r3
 800a312:	4604      	mov	r4, r0
 800a314:	460d      	mov	r5, r1
 800a316:	da12      	bge.n	800a33e <scalbn+0x56>
 800a318:	a327      	add	r3, pc, #156	; (adr r3, 800a3b8 <scalbn+0xd0>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f6 f96b 	bl	80005f8 <__aeabi_dmul>
 800a322:	e009      	b.n	800a338 <scalbn+0x50>
 800a324:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a328:	428a      	cmp	r2, r1
 800a32a:	d10c      	bne.n	800a346 <scalbn+0x5e>
 800a32c:	ee10 2a10 	vmov	r2, s0
 800a330:	4620      	mov	r0, r4
 800a332:	4629      	mov	r1, r5
 800a334:	f7f5 ffaa 	bl	800028c <__adddf3>
 800a338:	4604      	mov	r4, r0
 800a33a:	460d      	mov	r5, r1
 800a33c:	e01c      	b.n	800a378 <scalbn+0x90>
 800a33e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a342:	460b      	mov	r3, r1
 800a344:	3a36      	subs	r2, #54	; 0x36
 800a346:	4432      	add	r2, r6
 800a348:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a34c:	428a      	cmp	r2, r1
 800a34e:	dd0b      	ble.n	800a368 <scalbn+0x80>
 800a350:	ec45 4b11 	vmov	d1, r4, r5
 800a354:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a3c0 <scalbn+0xd8>
 800a358:	f000 f83c 	bl	800a3d4 <copysign>
 800a35c:	a318      	add	r3, pc, #96	; (adr r3, 800a3c0 <scalbn+0xd8>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	ec51 0b10 	vmov	r0, r1, d0
 800a366:	e7da      	b.n	800a31e <scalbn+0x36>
 800a368:	2a00      	cmp	r2, #0
 800a36a:	dd08      	ble.n	800a37e <scalbn+0x96>
 800a36c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a370:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a374:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a378:	ec45 4b10 	vmov	d0, r4, r5
 800a37c:	bd70      	pop	{r4, r5, r6, pc}
 800a37e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a382:	da0d      	bge.n	800a3a0 <scalbn+0xb8>
 800a384:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a388:	429e      	cmp	r6, r3
 800a38a:	ec45 4b11 	vmov	d1, r4, r5
 800a38e:	dce1      	bgt.n	800a354 <scalbn+0x6c>
 800a390:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a3b8 <scalbn+0xd0>
 800a394:	f000 f81e 	bl	800a3d4 <copysign>
 800a398:	a307      	add	r3, pc, #28	; (adr r3, 800a3b8 <scalbn+0xd0>)
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	e7e0      	b.n	800a362 <scalbn+0x7a>
 800a3a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3a4:	3236      	adds	r2, #54	; 0x36
 800a3a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4b06      	ldr	r3, [pc, #24]	; (800a3d0 <scalbn+0xe8>)
 800a3b6:	e7b2      	b.n	800a31e <scalbn+0x36>
 800a3b8:	c2f8f359 	.word	0xc2f8f359
 800a3bc:	01a56e1f 	.word	0x01a56e1f
 800a3c0:	8800759c 	.word	0x8800759c
 800a3c4:	7e37e43c 	.word	0x7e37e43c
 800a3c8:	43500000 	.word	0x43500000
 800a3cc:	ffff3cb0 	.word	0xffff3cb0
 800a3d0:	3c900000 	.word	0x3c900000

0800a3d4 <copysign>:
 800a3d4:	ec51 0b10 	vmov	r0, r1, d0
 800a3d8:	ee11 0a90 	vmov	r0, s3
 800a3dc:	ee10 2a10 	vmov	r2, s0
 800a3e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a3e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a3e8:	ea41 0300 	orr.w	r3, r1, r0
 800a3ec:	ec43 2b10 	vmov	d0, r2, r3
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <_init>:
 800a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f6:	bf00      	nop
 800a3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fa:	bc08      	pop	{r3}
 800a3fc:	469e      	mov	lr, r3
 800a3fe:	4770      	bx	lr

0800a400 <_fini>:
 800a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a402:	bf00      	nop
 800a404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a406:	bc08      	pop	{r3}
 800a408:	469e      	mov	lr, r3
 800a40a:	4770      	bx	lr
